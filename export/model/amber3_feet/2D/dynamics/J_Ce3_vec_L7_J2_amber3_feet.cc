/*
 * Automatically Generated from Mathematica.
 * Wed 1 Mar 2023 13:29:23 GMT-08:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t200;
  double t92;
  double t96;
  double t203;
  double t288;
  double t168;
  double t213;
  double t248;
  double t40;
  double t320;
  double t335;
  double t338;
  double t467;
  double t400;
  double t32;
  double t1018;
  double t1041;
  double t1103;
  double t749;
  double t762;
  double t793;
  double t800;
  double t832;
  double t949;
  double t278;
  double t418;
  double t455;
  double t473;
  double t544;
  double t545;
  double t556;
  double t585;
  double t1105;
  double t1110;
  double t1133;
  double t1165;
  double t1248;
  double t1253;
  double t1271;
  double t1356;
  double t1861;
  double t1870;
  double t1896;
  double t1916;
  double t1929;
  double t1943;
  double t1688;
  double t1705;
  double t1752;
  double t1768;
  double t2191;
  double t2195;
  double t2201;
  double t2217;
  double t2227;
  double t2231;
  double t2458;
  double t2466;
  double t2472;
  double t2477;
  double t2492;
  double t2556;
  double t2909;
  double t2931;
  double t2933;
  double t2942;
  double t2943;
  double t2986;
  double t2831;
  double t2832;
  double t2861;
  double t2870;
  double t735;
  double t966;
  double t976;
  double t1007;
  double t1437;
  double t1493;
  double t1518;
  double t1542;
  double t1576;
  double t3237;
  double t3242;
  double t3248;
  double t3269;
  double t1788;
  double t1808;
  double t1950;
  double t2005;
  double t3335;
  double t3373;
  double t3388;
  double t3399;
  double t3408;
  double t2093;
  double t2113;
  double t2129;
  double t2155;
  double t2242;
  double t2278;
  double t2279;
  double t2560;
  double t2574;
  double t2586;
  double t3486;
  double t3489;
  double t3639;
  double t3647;
  double t2872;
  double t3000;
  double t3014;
  double t3050;
  double t3074;
  double t3112;
  double t3904;
  double t3906;
  double t3910;
  double t3952;
  double t3884;
  double t3886;
  double t4110;
  double t4132;
  double t4149;
  double t4340;
  double t4342;
  double t4490;
  double t4512;
  double t4300;
  double t4306;
  double t4167;
  double t4177;
  double t4216;
  double t4222;
  double t4240;
  double t4243;
  double t4245;
  double t4931;
  double t4944;
  double t4977;
  double t5277;
  double t5281;
  double t5293;
  double t5235;
  double t5237;
  double t5240;
  double t4106;
  double t4109;
  double t5465;
  double t5468;
  double t4246;
  double t4287;
  double t4296;
  double t4297;
  double t4538;
  double t4669;
  double t5648;
  double t5649;
  double t5651;
  double t5675;
  double t5677;
  double t5678;
  double t4677;
  double t4714;
  double t4786;
  double t4813;
  double t4864;
  double t4872;
  double t4885;
  double t4893;
  double t4899;
  double t4923;
  double t5052;
  double t5055;
  double t5081;
  double t5090;
  double t5107;
  double t5108;
  double t5147;
  double t5173;
  double t5175;
  double t5216;
  double t5220;
  double t5274;
  double t5334;
  double t5827;
  double t5845;
  double t5850;
  double t5888;
  double t5891;
  double t5898;
  double t5381;
  double t5405;
  double t5995;
  double t6002;
  double t6004;
  double t6009;
  double t6025;
  double t6028;
  double t6039;
  double t6125;
  double t6126;
  double t6130;
  double t6060;
  double t6080;
  double t6082;
  double t6042;
  double t6047;
  double t6055;
  double t3306;
  double t3425;
  double t3454;
  double t3455;
  double t3460;
  double t3463;
  double t3465;
  double t3471;
  double t3477;
  double t3496;
  double t3501;
  double t3532;
  double t3537;
  double t3546;
  double t3587;
  double t3593;
  double t3603;
  double t3628;
  double t3660;
  double t3661;
  double t3684;
  double t3691;
  double t3693;
  double t3701;
  double t3707;
  double t3748;
  double t3753;
  double t3757;
  double t3875;
  double t3890;
  double t3959;
  double t3973;
  double t3982;
  double t3991;
  double t4001;
  double t4042;
  double t4045;
  double t4046;
  double t4050;
  double t4052;
  double t4055;
  double t4079;
  double t4085;
  double t4094;
  double t4099;
  double t6165;
  double t6167;
  double t6169;
  double t6175;
  double t6199;
  double t6215;
  double t6216;
  double t6218;
  double t6387;
  double t6400;
  double t6403;
  double t6411;
  double t4337;
  double t4533;
  double t4576;
  double t4631;
  double t4670;
  double t4699;
  double t6511;
  double t6513;
  double t6516;
  double t6523;
  double t5270;
  double t5307;
  double t5313;
  double t5356;
  double t5370;
  double t5418;
  double t6696;
  double t6698;
  double t6699;
  double t6506;
  double t6507;
  double t5477;
  double t5489;
  double t5495;
  double t5497;
  double t5505;
  double t5521;
  double t5528;
  double t5547;
  double t5550;
  double t5554;
  double t6524;
  double t6530;
  double t5670;
  double t5687;
  double t5700;
  double t5711;
  double t5714;
  double t5733;
  double t6539;
  double t6568;
  double t6580;
  double t6582;
  double t6586;
  double t6591;
  double t6595;
  double t6599;
  double t6601;
  double t6606;
  double t6612;
  double t6613;
  double t6614;
  double t6626;
  double t6640;
  double t6651;
  double t6655;
  double t6656;
  double t6662;
  double t6667;
  double t6669;
  double t6670;
  double t6679;
  double t6723;
  double t6726;
  double t5864;
  double t5902;
  double t5903;
  double t6753;
  double t6756;
  double t5905;
  double t5921;
  double t5925;
  double t6902;
  double t6913;
  double t6925;
  double t6798;
  double t6799;
  double t6815;
  double t6816;
  double t7000;
  double t7001;
  double t7020;
  double t7022;
  double t7030;
  double t7089;
  double t7090;
  double t7096;
  double t7098;
  double t7100;
  double t7053;
  double t7061;
  double t7062;
  double t7039;
  double t7041;
  double t7046;
  double t4250;
  double t4259;
  double t4605;
  double t4709;
  double t4716;
  double t4782;
  double t5322;
  double t5424;
  double t5426;
  double t5427;
  double t5444;
  double t5450;
  double t6525;
  double t6529;
  double t6534;
  double t6538;
  double t6549;
  double t6563;
  double t6702;
  double t6720;
  double t6727;
  double t6732;
  double t6733;
  double t6746;
  double t6747;
  double t6757;
  double t6788;
  double t6790;
  double t6794;
  double t6797;
  double t6825;
  double t6833;
  double t6852;
  double t6853;
  double t6855;
  double t6861;
  double t7170;
  double t7173;
  double t7176;
  double t7178;
  double t7114;
  double t7115;
  double t7120;
  double t7130;
  double t7136;
  double t7340;
  double t7341;
  double t7337;
  double t7338;
  double t7113;
  double t7146;
  double t7147;
  double t7162;
  double t7196;
  double t7216;
  double t7431;
  double t7432;
  double t7433;
  double t7231;
  double t7239;
  double t7253;
  double t7257;
  double t7266;
  double t7267;
  double t7270;
  double t7272;
  double t7273;
  double t7279;
  double t7282;
  double t7296;
  double t7299;
  double t7300;
  double t7303;
  double t7317;
  double t7318;
  double t7322;
  double t7326;
  double t7329;
  double t7330;
  double t7331;
  double t7333;
  double t7335;
  double t7382;
  double t7384;
  double t7485;
  double t7487;
  double t7492;
  double t7493;
  double t7359;
  double t7363;
  double t7534;
  double t7536;
  double t7537;
  double t7539;
  double t7543;
  double t7567;
  double t7570;
  double t7571;
  double t7573;
  double t7575;
  double t7552;
  double t7555;
  double t7556;
  double t7557;
  double t7558;
  double t7546;
  double t7548;
  double t7550;
  double t7596;
  double t7599;
  double t7618;
  double t7619;
  double t7620;
  double t7624;
  double t7625;
  double t7626;
  double t7583;
  double t7597;
  double t7600;
  double t7602;
  double t7607;
  double t7608;
  double t7610;
  double t7621;
  double t7627;
  double t7629;
  double t7631;
  double t7632;
  double t7633;
  double t7653;
  double t7654;
  double t7655;
  double t7418;
  double t7427;
  double t7428;
  double t7448;
  double t7689;
  double t7458;
  double t7470;
  double t7477;
  double t7480;
  double t7482;
  double t7483;
  double t7718;
  double t7719;
  double t7721;
  double t7723;
  double t7508;
  double t7511;
  double t7681;
  double t7412;
  double t7682;
  double t7414;
  double t7422;
  double t7685;
  double t7430;
  double t7688;
  double t7691;
  double t7442;
  double t7692;
  double t7693;
  double t7449;
  double t7701;
  double t7703;
  double t7704;
  double t7459;
  double t7706;
  double t7471;
  double t7711;
  double t7479;
  double t7714;
  double t7481;
  double t7715;
  double t7484;
  double t7498;
  double t7716;
  double t7720;
  double t7724;
  double t7725;
  double t7728;
  double t7729;
  double t7509;
  double t7731;
  double t7514;
  double t7732;
  double t7544;
  double t7545;
  double t7563;
  double t7564;
  double t7565;
  double t7775;
  double t7776;
  double t7778;
  double t7770;
  double t7771;
  double t7773;
  double t7766;
  double t7767;
  double t7768;
  double t7582;
  t200 = Cos(var1[7]);
  t92 = Cos(var1[8]);
  t96 = Sin(var1[7]);
  t203 = Sin(var1[8]);
  t288 = Cos(var1[6]);
  t168 = t92*t96;
  t213 = t200*t203;
  t248 = t168 + t213;
  t40 = Sin(var1[6]);
  t320 = t200*t92;
  t335 = -1.*t96*t203;
  t338 = t320 + t335;
  t467 = Sin(var1[2]);
  t400 = t288*t338;
  t32 = Cos(var1[2]);
  t1018 = -1.*t92*t96;
  t1041 = -1.*t200*t203;
  t1103 = t1018 + t1041;
  t749 = -1.*t92;
  t762 = 1. + t749;
  t793 = -1.3127*t762;
  t800 = -1.3127*t92;
  t832 = -0.06*t203;
  t949 = t793 + t800 + t832;
  t278 = -1.*t40*t248;
  t418 = t278 + t400;
  t455 = -1.*t32*t418;
  t473 = t288*t248;
  t544 = t40*t338;
  t545 = t473 + t544;
  t556 = t467*t545;
  t585 = t455 + t556;
  t1105 = t40*t1103;
  t1110 = t1105 + t400;
  t1133 = t467*t1110;
  t1165 = t288*t1103;
  t1248 = -1.*t40*t338;
  t1253 = t1165 + t1248;
  t1271 = -1.*t32*t1253;
  t1356 = t1133 + t1271;
  t1861 = -1.*t200;
  t1870 = 1. + t1861;
  t1896 = -0.9063*t1870;
  t1916 = -0.06*t92*t96;
  t1929 = t200*t949;
  t1943 = t1896 + t1916 + t1929;
  t1688 = 0.06*t200*t92;
  t1705 = 0.9063*t96;
  t1752 = t96*t949;
  t1768 = t1688 + t1705 + t1752;
  t2191 = -1.*t467*t1110;
  t2195 = t32*t1253;
  t2201 = t2191 + t2195;
  t2217 = -1.*t32*t1110;
  t2227 = -1.*t467*t1253;
  t2231 = t2217 + t2227;
  t2458 = -1.*t467*t418;
  t2466 = -1.*t32*t545;
  t2472 = t2458 + t2466;
  t2477 = t32*t418;
  t2492 = -1.*t467*t545;
  t2556 = t2477 + t2492;
  t2909 = -1.*t288;
  t2931 = 1. + t2909;
  t2933 = -0.4999*t2931;
  t2942 = t288*t1943;
  t2943 = -1.*t40*t1768;
  t2986 = t2933 + t2942 + t2943;
  t2831 = 0.4999*t40;
  t2832 = t40*t1943;
  t2861 = t288*t1768;
  t2870 = t2831 + t2832 + t2861;
  t735 = 0.9063*t92;
  t966 = t92*t949;
  t976 = 0.06*t92*t203;
  t1007 = t735 + t966 + t976;
  t1437 = Power(t92,2);
  t1493 = -0.06*t1437;
  t1518 = 0.9063*t203;
  t1542 = t949*t203;
  t1576 = t1493 + t1518 + t1542;
  t3237 = -1.*t288*t248;
  t3242 = t3237 + t1248;
  t3248 = -1.*t467*t3242;
  t3269 = t455 + t3248;
  t1788 = t1768*t248;
  t1808 = 0.4999*t338;
  t1950 = t1943*t338;
  t2005 = t1788 + t1808 + t1950;
  t3335 = -1.*t40*t1103;
  t3373 = -1.*t288*t338;
  t3388 = t3335 + t3373;
  t3399 = -1.*t467*t3388;
  t3408 = t3399 + t1271;
  t2093 = -1.*t1943*t1103;
  t2113 = 0.4999*t248;
  t2129 = -1.*t1768*t338;
  t2155 = t2093 + t2113 + t2129;
  t2242 = t32*t1110;
  t2278 = t467*t1253;
  t2279 = t2242 + t2278;
  t2560 = t467*t418;
  t2574 = t32*t545;
  t2586 = t2560 + t2574;
  t3486 = t32*t3388;
  t3489 = t3486 + t2227;
  t3639 = t32*t3242;
  t3647 = t2458 + t3639;
  t2872 = -1.*t2870*t1110;
  t3000 = -1.*t2986*t1253;
  t3014 = t2872 + t3000;
  t3050 = t2986*t418;
  t3074 = t2870*t545;
  t3112 = t3050 + t3074;
  t3904 = -0.4999*t40;
  t3906 = -1.*t40*t1943;
  t3910 = -1.*t288*t1768;
  t3952 = t3904 + t3906 + t3910;
  t3884 = 0.4999*t288;
  t3886 = t3884 + t2942 + t2943;
  t4110 = -1.*t200*t92;
  t4132 = t96*t203;
  t4149 = t4110 + t4132;
  t4340 = -0.06*t200*t92;
  t4342 = -0.9063*t96;
  t4490 = -1.*t96*t949;
  t4512 = t4340 + t4342 + t4490;
  t4300 = 0.9063*t200;
  t4306 = t4300 + t1916 + t1929;
  t4167 = t288*t4149;
  t4177 = t3335 + t4167;
  t4216 = -1.*t467*t4177;
  t4222 = t40*t4149;
  t4240 = t1165 + t4222;
  t4243 = -1.*t32*t4240;
  t4245 = t4216 + t4243;
  t4931 = t32*t4177;
  t4944 = -1.*t467*t4240;
  t4977 = t4931 + t4944;
  t5277 = t288*t4306;
  t5281 = t40*t4512;
  t5293 = t5277 + t5281;
  t5235 = -1.*t40*t4306;
  t5237 = t288*t4512;
  t5240 = t5235 + t5237;
  t4106 = -0.03428571*var2[8]*t2231;
  t4109 = 1.142857*t1576*t2231;
  t5465 = -0.06*t92;
  t5468 = 0. + t5465;
  t4246 = 1.142857*t1007*t4245;
  t4287 = 1.142857*t2155*t2231;
  t4296 = 0.4999*t1103;
  t4297 = t1943*t1103;
  t4538 = t1768*t338;
  t4669 = -1.*t1768*t1103;
  t5648 = t5468*t96;
  t5649 = -0.06*t200*t203;
  t5651 = t5648 + t5649;
  t5675 = t200*t5468;
  t5677 = 0.06*t96*t203;
  t5678 = t5675 + t5677;
  t4677 = -1.*t1943*t4149;
  t4714 = 1.142857*t2005*t4245;
  t4786 = 1.142857*t2279*t2472;
  t4813 = 1.142857*t2231*t2586;
  t4864 = 2.285714*t2201*t2556;
  t4872 = 1.142857*t2279*t4245;
  t4885 = t467*t4177;
  t4893 = t32*t4240;
  t4899 = t4885 + t4893;
  t4923 = 1.142857*t2231*t4899;
  t5052 = 2.285714*t2201*t4977;
  t5055 = t4786 + t4813 + t4864 + t4872 + t4923 + t5052;
  t5081 = 0.5*var2[0]*t5055;
  t5090 = 2.285714*t2201*t2472;
  t5107 = 2.285714*t2231*t2556;
  t5108 = 2.285714*t2201*t4245;
  t5147 = 2.285714*t2231*t4977;
  t5173 = t5090 + t5107 + t5108 + t5147;
  t5175 = 0.5*var2[1]*t5173;
  t5216 = 1.142857*t2231*t3014;
  t5220 = t2870*t1110;
  t5274 = t2986*t1253;
  t5334 = 1.142857*t3112*t4245;
  t5827 = -1.*t40*t5651;
  t5845 = t288*t5678;
  t5850 = t5827 + t5845;
  t5888 = t288*t5651;
  t5891 = t40*t5678;
  t5898 = t5888 + t5891;
  t5381 = -1.*t2986*t4177;
  t5405 = -1.*t2870*t4240;
  t5995 = Power(t2201,2);
  t6002 = 1.142857*t5995;
  t6004 = 1.142857*t2231*t2279;
  t6009 = 1.142857*t2472*t2586;
  t6025 = Power(t2556,2);
  t6028 = 1.142857*t6025;
  t6039 = t6002 + t6004 + t6009 + t6028;
  t6125 = 1.142857*t3014*t2472;
  t6126 = 1.142857*t2231*t3112;
  t6130 = t6125 + t6126;
  t6060 = 1.142857*t2005*t2231;
  t6080 = 1.142857*t2155*t2472;
  t6082 = t6060 + t6080;
  t6042 = 1.142857*t1007*t2231;
  t6047 = 1.142857*t1576*t2472;
  t6055 = t6042 + t6047;
  t3306 = -0.03428571*var2[8]*t3269;
  t3425 = 1.142857*t1007*t3408;
  t3454 = 1.142857*t1576*t3269;
  t3455 = t3425 + t3454;
  t3460 = 0.5*var2[7]*t3455;
  t3463 = 1.142857*t2005*t3408;
  t3465 = 1.142857*t2155*t3269;
  t3471 = t3463 + t3465;
  t3477 = 0.5*var2[6]*t3471;
  t3496 = 2.285714*t2201*t3489;
  t3501 = t467*t3388;
  t3532 = t3501 + t2195;
  t3537 = 1.142857*t3532*t2231;
  t3546 = 1.142857*t3408*t2279;
  t3587 = t467*t3242;
  t3593 = t2477 + t3587;
  t3603 = 1.142857*t3593*t2472;
  t3628 = 1.142857*t3269*t2586;
  t3660 = 2.285714*t3647*t2556;
  t3661 = t3496 + t3537 + t3546 + t3603 + t3628 + t3660;
  t3684 = 0.5*var2[0]*t3661;
  t3691 = 2.285714*t3408*t2201;
  t3693 = 2.285714*t3489*t2231;
  t3701 = 2.285714*t3647*t2472;
  t3707 = 2.285714*t3269*t2556;
  t3748 = t3691 + t3693 + t3701 + t3707;
  t3753 = 0.5*var2[1]*t3748;
  t3757 = 1.142857*t3014*t3269;
  t3875 = -1.*t2986*t3388;
  t3890 = -1.*t3886*t1110;
  t3959 = -1.*t3952*t1253;
  t3973 = -1.*t2870*t1253;
  t3982 = t3875 + t3890 + t3959 + t3973;
  t3991 = 1.142857*t3982*t2472;
  t4001 = 1.142857*t3408*t3112;
  t4042 = t3952*t418;
  t4045 = t2870*t418;
  t4046 = t2986*t3242;
  t4050 = t3886*t545;
  t4052 = t4042 + t4045 + t4046 + t4050;
  t4055 = 1.142857*t2231*t4052;
  t4079 = t3757 + t3991 + t4001 + t4055;
  t4085 = 0.5*var2[2]*t4079;
  t4094 = t3306 + t3460 + t3477 + t3684 + t3753 + t4085;
  t4099 = var2[1]*t4094;
  t6165 = t40*t248;
  t6167 = t6165 + t3373;
  t6169 = t32*t6167;
  t6175 = t6169 + t3248;
  t6199 = -1.*t288*t1103;
  t6215 = t6199 + t544;
  t6216 = t32*t6215;
  t6218 = t3399 + t6216;
  t6387 = -0.4999*t288;
  t6400 = -1.*t288*t1943;
  t6403 = t40*t1768;
  t6411 = t6387 + t6400 + t6403;
  t4337 = t4306*t248;
  t4533 = t4512*t338;
  t4576 = t4296 + t4297 + t4337 + t4533 + t4538;
  t4631 = -1.*t4512*t1103;
  t4670 = -1.*t4306*t338;
  t4699 = t4631 + t4669 + t1808 + t4670 + t4677;
  t6511 = -1.*t40*t4149;
  t6513 = t6199 + t6511;
  t6516 = t32*t6513;
  t6523 = t4216 + t6516;
  t5270 = t5240*t418;
  t5307 = t5293*t545;
  t5313 = t5220 + t5270 + t5274 + t5307;
  t5356 = -1.*t5293*t1110;
  t5370 = -1.*t5240*t1253;
  t5418 = t5356 + t5370 + t5381 + t5405;
  t6696 = -1.*t288*t4306;
  t6698 = -1.*t40*t4512;
  t6699 = t6696 + t6698;
  t6506 = -0.03428571*var2[8]*t3489;
  t6507 = 1.142857*t1576*t3489;
  t5477 = t5468*t92;
  t5489 = 0.06*t1437;
  t5495 = -0.9063*t203;
  t5497 = -1.*t949*t203;
  t5505 = Power(t203,2);
  t5521 = -0.06*t5505;
  t5528 = t5477 + t5489 + t5495 + t5497 + t5521;
  t5547 = t5468*t203;
  t5550 = 0.12*t92*t203;
  t5554 = t735 + t966 + t5547 + t5550;
  t6524 = 1.142857*t1007*t6523;
  t6530 = 1.142857*t2155*t3489;
  t5670 = t5651*t248;
  t5687 = t338*t5678;
  t5700 = t4296 + t4297 + t5670 + t4538 + t5687;
  t5711 = -1.*t5651*t338;
  t5714 = -1.*t1103*t5678;
  t5733 = t4669 + t1808 + t5711 + t5714 + t4677;
  t6539 = 1.142857*t2005*t6523;
  t6568 = 1.142857*t2279*t3647;
  t6580 = 1.142857*t2201*t3593;
  t6582 = 1.142857*t3489*t2586;
  t6586 = 1.142857*t3532*t2556;
  t6591 = 1.142857*t2279*t6523;
  t6595 = t467*t6513;
  t6599 = t4931 + t6595;
  t6601 = 1.142857*t2201*t6599;
  t6606 = 1.142857*t3489*t4899;
  t6612 = 1.142857*t3532*t4977;
  t6613 = t6568 + t6580 + t6582 + t6586 + t6591 + t6601 + t6606 + t6612;
  t6614 = 0.5*var2[0]*t6613;
  t6626 = 2.285714*t2201*t3647;
  t6640 = 2.285714*t3489*t2556;
  t6651 = 2.285714*t2201*t6523;
  t6655 = 2.285714*t3489*t4977;
  t6656 = t6626 + t6640 + t6651 + t6655;
  t6662 = 0.5*var2[1]*t6656;
  t6667 = 1.142857*t2201*t3982;
  t6669 = 1.142857*t3489*t3014;
  t6670 = t2986*t3388;
  t6679 = t3886*t1110;
  t6723 = t3952*t1253;
  t6726 = t2870*t1253;
  t5864 = t418*t5850;
  t5902 = t545*t5898;
  t5903 = t5220 + t5274 + t5864 + t5902;
  t6753 = 1.142857*t3112*t6523;
  t6756 = 1.142857*t4052*t4977;
  t5905 = -1.*t1253*t5850;
  t5921 = -1.*t1110*t5898;
  t5925 = t5905 + t5921 + t5381 + t5405;
  t6902 = -1.*t288*t5651;
  t6913 = -1.*t40*t5678;
  t6925 = t6902 + t6913;
  t6798 = -1.*t3952*t4177;
  t6799 = -1.*t2870*t4177;
  t6815 = -1.*t2986*t6513;
  t6816 = -1.*t3886*t4240;
  t7000 = 1.142857*t3532*t2201;
  t7001 = 1.142857*t3489*t2279;
  t7020 = 1.142857*t3647*t2586;
  t7022 = 1.142857*t3593*t2556;
  t7030 = t7000 + t7001 + t7020 + t7022;
  t7089 = 1.142857*t3014*t3647;
  t7090 = 1.142857*t3982*t2556;
  t7096 = 1.142857*t3489*t3112;
  t7098 = 1.142857*t2201*t4052;
  t7100 = t7089 + t7090 + t7096 + t7098;
  t7053 = 1.142857*t2005*t3489;
  t7061 = 1.142857*t2155*t3647;
  t7062 = t7053 + t7061;
  t7039 = 1.142857*t1007*t3489;
  t7041 = 1.142857*t1576*t3647;
  t7046 = t7039 + t7041;
  t4250 = t4109 + t4246;
  t4259 = 0.5*var2[7]*t4250;
  t4605 = 1.142857*t4576*t2231;
  t4709 = 1.142857*t4699*t2472;
  t4716 = t4287 + t4605 + t4709 + t4714;
  t4782 = 0.5*var2[6]*t4716;
  t5322 = 1.142857*t2231*t5313;
  t5424 = 1.142857*t2472*t5418;
  t5426 = t5216 + t5322 + t5334 + t5424;
  t5427 = 0.5*var2[2]*t5426;
  t5444 = t4106 + t4259 + t4782 + t5081 + t5175 + t5427;
  t5450 = var2[1]*t5444;
  t6525 = t6507 + t6524;
  t6529 = 0.5*var2[7]*t6525;
  t6534 = 1.142857*t4576*t3489;
  t6538 = 1.142857*t4699*t3647;
  t6549 = t6530 + t6534 + t6538 + t6539;
  t6563 = 0.5*var2[6]*t6549;
  t6702 = t6699*t418;
  t6720 = t5293*t418;
  t6727 = t5240*t3242;
  t6732 = t5240*t545;
  t6733 = t6670 + t6679 + t6702 + t6720 + t6723 + t6726 + t6727 + t6732;
  t6746 = 1.142857*t2201*t6733;
  t6747 = 1.142857*t3489*t5313;
  t6757 = 1.142857*t3647*t5418;
  t6788 = -1.*t5240*t3388;
  t6790 = -1.*t5240*t1110;
  t6794 = -1.*t6699*t1253;
  t6797 = -1.*t5293*t1253;
  t6825 = t6788 + t6790 + t6794 + t6797 + t6798 + t6799 + t6815 + t6816;
  t6833 = 1.142857*t2556*t6825;
  t6852 = t6667 + t6669 + t6746 + t6747 + t6753 + t6756 + t6757 + t6833;
  t6853 = 0.5*var2[2]*t6852;
  t6855 = t6506 + t6529 + t6563 + t6614 + t6662 + t6853;
  t6861 = var2[1]*t6855;
  t7170 = -0.9063*t200;
  t7173 = 0.06*t92*t96;
  t7176 = -1.*t200*t949;
  t7178 = t7170 + t7173 + t7176;
  t7114 = t6165 + t4167;
  t7115 = -1.*t467*t7114;
  t7120 = t473 + t6511;
  t7130 = t32*t7120;
  t7136 = t7115 + t7130;
  t7340 = t288*t7178;
  t7341 = t7340 + t6698;
  t7337 = t40*t7178;
  t7338 = t7337 + t5237;
  t7113 = -0.03428571*var2[8]*t4977;
  t7146 = 1.142857*t1007*t7136;
  t7147 = 1.142857*t1576*t4977;
  t7162 = t1768*t1103;
  t7196 = 0.4999*t4149;
  t7216 = t1943*t4149;
  t7431 = -1.*t5468*t96;
  t7432 = 0.06*t200*t203;
  t7433 = t7431 + t7432;
  t7231 = -1.*t1943*t248;
  t7239 = -1.*t1768*t4149;
  t7253 = 1.142857*t2005*t7136;
  t7257 = 1.142857*t2155*t4977;
  t7266 = 2.285714*t2201*t2279;
  t7267 = 1.142857*t2279*t7136;
  t7270 = t32*t7114;
  t7272 = t467*t7120;
  t7273 = t7270 + t7272;
  t7279 = 1.142857*t2201*t7273;
  t7282 = 1.142857*t2556*t4899;
  t7296 = 1.142857*t2586*t4977;
  t7299 = 2.285714*t4899*t4977;
  t7300 = t7266 + t7267 + t7279 + t7282 + t7296 + t7299;
  t7303 = 0.5*var2[0]*t7300;
  t7317 = 2.285714*t5995;
  t7318 = 2.285714*t2201*t7136;
  t7322 = 2.285714*t2556*t4977;
  t7326 = Power(t4977,2);
  t7329 = 2.285714*t7326;
  t7330 = t7317 + t7318 + t7322 + t7329;
  t7331 = 0.5*var2[1]*t7330;
  t7333 = 1.142857*t3112*t7136;
  t7335 = 1.142857*t3014*t4977;
  t7382 = t2986*t4177;
  t7384 = t2870*t4240;
  t7485 = t40*t7433;
  t7487 = t7485 + t5845;
  t7492 = t288*t7433;
  t7493 = t7492 + t6913;
  t7359 = -1.*t2870*t7114;
  t7363 = -1.*t2986*t7120;
  t7534 = 1.142857*t2201*t2586;
  t7536 = 1.142857*t2279*t2556;
  t7537 = 1.142857*t2201*t4899;
  t7539 = 1.142857*t2279*t4977;
  t7543 = t7534 + t7536 + t7537 + t7539;
  t7567 = 1.142857*t2201*t3014;
  t7570 = 1.142857*t2201*t5313;
  t7571 = 1.142857*t3112*t4977;
  t7573 = 1.142857*t2556*t5418;
  t7575 = t7567 + t7570 + t7571 + t7573;
  t7552 = 1.142857*t2155*t2201;
  t7555 = 1.142857*t4576*t2201;
  t7556 = 1.142857*t4699*t2556;
  t7557 = 1.142857*t2005*t4977;
  t7558 = t7552 + t7555 + t7556 + t7557;
  t7546 = 1.142857*t1576*t2201;
  t7548 = 1.142857*t1007*t4977;
  t7550 = t7546 + t7548;
  t7596 = t1916 + t5649;
  t7599 = t4340 + t5677;
  t7618 = -1.*t40*t7596;
  t7619 = t288*t7599;
  t7620 = t7618 + t7619;
  t7624 = t288*t7596;
  t7625 = t40*t7599;
  t7626 = t7624 + t7625;
  t7583 = 0. + t5495 + t5497 + t5521;
  t7597 = t7596*t248;
  t7600 = t338*t7599;
  t7602 = t4296 + t4297 + t7597 + t4538 + t7600;
  t7607 = -1.*t7596*t338;
  t7608 = -1.*t1103*t7599;
  t7610 = t4669 + t1808 + t7607 + t7608 + t4677;
  t7621 = t418*t7620;
  t7627 = t545*t7626;
  t7629 = t5220 + t5274 + t7621 + t7627;
  t7631 = -1.*t1253*t7620;
  t7632 = -1.*t1110*t7626;
  t7633 = t7631 + t7632 + t5381 + t5405;
  t7653 = -1.*t288*t7596;
  t7654 = -1.*t40*t7599;
  t7655 = t7653 + t7654;
  t7418 = 1.142857*t4699*t2201;
  t7427 = t4512*t1103;
  t7428 = t4306*t338;
  t7448 = -1.*t4306*t1103;
  t7689 = t7173 + t7432;
  t7458 = -1.*t4512*t4149;
  t7470 = 1.142857*t4576*t4977;
  t7477 = 1.142857*t5313*t4977;
  t7480 = 1.142857*t2201*t5418;
  t7482 = t5293*t1110;
  t7483 = t5240*t1253;
  t7718 = t40*t7689;
  t7719 = t7718 + t7619;
  t7721 = t288*t7689;
  t7723 = t7721 + t7654;
  t7508 = -1.*t5240*t4177;
  t7511 = -1.*t5293*t4240;
  t7681 = 1.142857*t1007*t2201;
  t7412 = 1.142857*t5554*t2201;
  t7682 = 1.142857*t7583*t4977;
  t7414 = 1.142857*t5528*t4977;
  t7422 = 1.142857*t5733*t2201;
  t7685 = 1.142857*t7610*t2201;
  t7430 = t5651*t338;
  t7688 = t7596*t338;
  t7691 = t7689*t338;
  t7442 = t1103*t5678;
  t7692 = t1103*t7599;
  t7693 = t248*t7599;
  t7449 = -1.*t1103*t5651;
  t7701 = -1.*t1103*t7596;
  t7703 = -1.*t1103*t7689;
  t7704 = -1.*t338*t7599;
  t7459 = -1.*t5678*t4149;
  t7706 = -1.*t7599*t4149;
  t7471 = 1.142857*t5700*t4977;
  t7711 = 1.142857*t7602*t4977;
  t7479 = 1.142857*t5903*t4977;
  t7714 = 1.142857*t7629*t4977;
  t7481 = 1.142857*t2201*t5925;
  t7715 = 1.142857*t2201*t7633;
  t7484 = t1253*t5850;
  t7498 = t1110*t5898;
  t7716 = t1253*t7620;
  t7720 = t545*t7719;
  t7724 = t418*t7723;
  t7725 = t1110*t7626;
  t7728 = -1.*t1110*t7719;
  t7729 = -1.*t1253*t7723;
  t7509 = -1.*t5850*t4177;
  t7731 = -1.*t7620*t4177;
  t7514 = -1.*t5898*t4240;
  t7732 = -1.*t7626*t4240;
  t7544 = 0.5*var2[1]*t7543;
  t7545 = -0.03428571*var2[8]*t2201;
  t7563 = t4864 + t5052;
  t7564 = var2[1]*t7563;
  t7565 = 0.5*var2[0]*t7543;
  t7775 = 1.142857*t2201*t7629;
  t7776 = 1.142857*t2556*t7633;
  t7778 = t7567 + t7775 + t7571 + t7776;
  t7770 = 1.142857*t7602*t2201;
  t7771 = 1.142857*t7610*t2556;
  t7773 = t7552 + t7770 + t7771 + t7557;
  t7766 = 1.142857*t7583*t2201;
  t7767 = 1.142857*t1007*t2556;
  t7768 = t7546 + t7766 + t7767 + t7548;
  t7582 = -0.03428571*var2[1]*t2201;
  p_output1[0]=var2[1]*(0.5*(3.428571*t2201*t2231 + 1.142857*t1356*t2279 + 3.428571*t2472*t2556 + 1.142857*t2586*t585)*var2[0] + 0.5*(2.285714*t1356*t2201 + 2.285714*Power(t2231,2) + 2.285714*Power(t2472,2) + 2.285714*t2556*t585)*var2[1] + 0.5*(1.142857*t1356*t3112 + 1.142857*t3014*t585)*var2[2] + 0.5*(1.142857*t1356*t2005 + 1.142857*t2155*t585)*var2[6] + 0.5*(1.142857*t1007*t1356 + 1.142857*t1576*t585)*var2[7] - 0.03428571*t585*var2[8]);
  p_output1[1]=t4099;
  p_output1[2]=t5450;
  p_output1[3]=var2[1]*(t4106 + t5081 + t5175 + 0.5*(t5216 + t5334 + 1.142857*t2231*t5903 + 1.142857*t2472*t5925)*var2[2] + 0.5*(t4287 + t4714 + 1.142857*t2231*t5700 + 1.142857*t2472*t5733)*var2[6] + 0.5*(t4109 + t4246 + 1.142857*t2231*t5528 + 1.142857*t2472*t5554)*var2[7]);
  p_output1[4]=0.5*t6039*var2[1];
  p_output1[5]=0.5*t6039*var2[0] + (2.285714*t2201*t2231 + 2.285714*t2472*t2556)*var2[1] + 0.5*t6130*var2[2] + 0.5*t6082*var2[6] + 0.5*t6055*var2[7] - 0.03428571*t2472*var2[8];
  p_output1[6]=0.5*t6130*var2[1];
  p_output1[7]=0.5*t6082*var2[1];
  p_output1[8]=0.5*t6055*var2[1];
  p_output1[9]=-0.03428571*t2472*var2[1];
  p_output1[10]=t4099;
  p_output1[11]=var2[1]*(0.5*(2.285714*t3489*t3532 + 2.285714*t3593*t3647 + 1.142857*t2556*(t3639 + t467*t6167) + 1.142857*t2586*t6175 + 1.142857*t2201*(t3486 + t467*t6215) + 1.142857*t2279*t6218)*var2[0] + 0.5*(2.285714*Power(t3489,2) + 2.285714*Power(t3647,2) + 2.285714*t2556*t6175 + 2.285714*t2201*t6218)*var2[1] + 0.5*(2.285714*t3647*t3982 + 2.285714*t3489*t4052 + 1.142857*t3014*t6175 + 1.142857*t3112*t6218 + 1.142857*t2556*(-1.*t2870*t3388 - 2.*t1253*t3886 - 1.*t1110*t3952 - 2.*t3388*t3952 - 1.*t2986*t6215 - 1.*t1253*t6411) + 1.142857*t2201*(t2870*t3242 + 2.*t3242*t3952 + 2.*t3886*t418 + t3952*t545 + t2986*t6167 + t418*t6411))*var2[2] + 0.5*(1.142857*t2155*t6175 + 1.142857*t2005*t6218)*var2[6] + 0.5*(1.142857*t1576*t6175 + 1.142857*t1007*t6218)*var2[7] - 0.03428571*t6175*var2[8]);
  p_output1[12]=t6861;
  p_output1[13]=var2[1]*(t6506 + t6614 + t6662 + 0.5*(1.142857*t3489*t5903 + 1.142857*t3647*t5925 + t6667 + t6669 + t6753 + t6756 + 1.142857*t2556*(-1.*t1110*t5850 - 1.*t3388*t5850 - 1.*t1253*t5898 + t6798 + t6799 + t6815 + t6816 - 1.*t1253*t6925) + 1.142857*t2201*(t3242*t5850 + t545*t5850 + t418*t5898 + t6670 + t6679 + t6723 + t6726 + t418*t6925))*var2[2] + 0.5*(1.142857*t3489*t5700 + 1.142857*t3647*t5733 + t6530 + t6539)*var2[6] + 0.5*(1.142857*t3489*t5528 + 1.142857*t3647*t5554 + t6507 + t6524)*var2[7]);
  p_output1[14]=0.5*t7030*var2[1];
  p_output1[15]=0.5*t7030*var2[0] + (t3496 + t3660)*var2[1] + 0.5*t7100*var2[2] + 0.5*t7062*var2[6] + 0.5*t7046*var2[7] - 0.03428571*t3647*var2[8];
  p_output1[16]=0.5*t7100*var2[1];
  p_output1[17]=0.5*t7062*var2[1];
  p_output1[18]=0.5*t7046*var2[1];
  p_output1[19]=-0.03428571*t3647*var2[1];
  p_output1[20]=t5450;
  p_output1[21]=t6861;
  p_output1[22]=var2[1]*(t7113 + t7303 + t7331 + 0.5*(2.285714*t4977*t5313 + 2.285714*t2201*t5418 + t7333 + t7335 + 1.142857*t2556*(-2.*t4177*t5240 - 2.*t4240*t5293 - 1.*t1110*t7338 - 1.*t1253*t7341 + t7359 + t7363) + 1.142857*t2201*(2.*t1253*t5240 + 2.*t1110*t5293 + t545*t7338 + t418*t7341 + t7382 + t7384))*var2[2] + 0.5*(2.285714*t2201*t4699 + 2.285714*t4576*t4977 + 1.142857*t2201*(2.*t338*t4306 + 2.*t1103*t4512 + t248*t4512 + t7162 + t338*t7178 + t7196 + t7216) + 1.142857*t2556*(t4296 - 2.*t1103*t4306 - 1.*t338*t4512 - 2.*t4149*t4512 - 1.*t1103*t7178 + t7231 + t7239) + t7253 + t7257)*var2[6] + 0.5*(t7146 + t7147)*var2[7]);
  p_output1[23]=var2[1]*(t7113 + t7303 + t7331 + 0.5*(t7333 + t7335 + t7477 + t7479 + t7480 + t7481 + 1.142857*t2201*(t7382 + t7384 + t7482 + t7483 + t7484 + t545*t7487 + t418*t7493 + t7498) + 1.142857*t2556*(t7359 + t7363 - 1.*t1110*t7487 - 1.*t1253*t7493 + t7508 + t7509 + t7511 + t7514))*var2[2] + 0.5*(t7253 + t7257 + t7418 + t7422 + 1.142857*t2201*(t248*t5678 + t7162 + t7196 + t7216 + t7427 + t7428 + t7430 + t338*t7433 + t7442) + 1.142857*t2556*(t4296 - 1.*t338*t5678 + t7231 + t7239 - 1.*t1103*t7433 + t7448 + t7449 + t7458 + t7459) + t7470 + t7471)*var2[6] + 0.5*(t7146 + t7147 + t7412 + t7414)*var2[7]);
  p_output1[24]=t7544;
  p_output1[25]=t7545 + t7564 + t7565 + 0.5*t7575*var2[2] + 0.5*t7558*var2[6] + 0.5*t7550*var2[7];
  p_output1[26]=0.5*t7575*var2[1];
  p_output1[27]=0.5*t7558*var2[1];
  p_output1[28]=0.5*t7550*var2[1];
  p_output1[29]=t7582;
  p_output1[30]=var2[1]*(t4106 + t5081 + t5175 + 0.5*(t5216 + t5334 + 1.142857*t2231*t7629 + 1.142857*t2472*t7633)*var2[2] + 0.5*(t4287 + t4714 + 1.142857*t2231*t7602 + 1.142857*t2472*t7610)*var2[6] + 0.5*(1.142857*t1007*t2472 + t4109 + t4246 + 1.142857*t2231*t7583)*var2[7]);
  p_output1[31]=var2[1]*(t6506 + t6614 + t6662 + 0.5*(t6667 + t6669 + t6753 + t6756 + 1.142857*t3489*t7629 + 1.142857*t3647*t7633 + 1.142857*t2556*(t6798 + t6799 + t6815 + t6816 - 1.*t1110*t7620 - 1.*t3388*t7620 - 1.*t1253*t7626 - 1.*t1253*t7655) + 1.142857*t2201*(t6670 + t6679 + t6723 + t6726 + t3242*t7620 + t545*t7620 + t418*t7626 + t418*t7655))*var2[2] + 0.5*(t6530 + t6539 + 1.142857*t3489*t7602 + 1.142857*t3647*t7610)*var2[6] + 0.5*(1.142857*t1007*t3647 + t6507 + t6524 + 1.142857*t3489*t7583)*var2[7]);
  p_output1[32]=var2[1]*(t7113 + t7303 + t7331 + 0.5*(t7333 + t7335 + t7477 + t7480 + t7714 + t7715 + 1.142857*t2201*(t7382 + t7384 + t7482 + t7483 + t7716 + t7720 + t7724 + t7725) + 1.142857*t2556*(t7359 + t7363 + t7508 + t7511 + t7728 + t7729 + t7731 + t7732))*var2[2] + 0.5*(t7253 + t7257 + t7418 + t7470 + t7685 + 1.142857*t2201*(t7162 + t7196 + t7216 + t7427 + t7428 + t7688 + t7691 + t7692 + t7693) + 1.142857*t2556*(t4296 + t7231 + t7239 + t7448 + t7458 + t7701 + t7703 + t7704 + t7706) + t7711)*var2[6] + 0.5*(t7146 + t7147 + t7681 + t7682)*var2[7]);
  p_output1[33]=var2[1]*(t7113 + t7303 + t7331 + 0.5*(t7333 + t7335 + t7479 + t7481 + t7714 + t7715 + 1.142857*t2201*(t7382 + t7384 + t7484 + t7498 + t7716 + t7720 + t7724 + t7725) + 1.142857*t2556*(t7359 + t7363 + t7509 + t7514 + t7728 + t7729 + t7731 + t7732))*var2[2] + 0.5*(t7253 + t7257 + t7422 + t7471 + t7685 + 1.142857*t2201*(t7162 + t7196 + t7216 + t7430 + t7442 + t7688 + t7691 + t7692 + t7693) + 1.142857*t2556*(t4296 + t7231 + t7239 + t7449 + t7459 + t7701 + t7703 + t7704 + t7706) + t7711)*var2[6] + 0.5*(1.142857*t2556*t5528 + t7146 + t7147 + t7412 + t7414 + t7681 + t7682 + 1.142857*t2201*(-1.*t203*t5468 - 0.9063*t92 - 0.12*t203*t92 - 1.*t92*t949))*var2[7]);
  p_output1[34]=t7544;
  p_output1[35]=t7545 + t7564 + t7565 + 0.5*t7778*var2[2] + 0.5*t7773*var2[6] + 0.5*t7768*var2[7];
  p_output1[36]=0.5*t7778*var2[1];
  p_output1[37]=0.5*t7773*var2[1];
  p_output1[38]=0.5*t7768*var2[1];
  p_output1[39]=t7582;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 9 && ncols == 1) && 
      !(mrows == 1 && ncols == 9))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 9 && ncols == 1) && 
      !(mrows == 1 && ncols == 9))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 40, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_Ce3_vec_L7_J2_amber3_feet.hh"

namespace RightSS1
{

void J_Ce3_vec_L7_J2_amber3_feet_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
