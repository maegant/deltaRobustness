/*
 * Automatically Generated from Mathematica.
 * Wed 1 Mar 2023 13:28:38 GMT-08:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t51;
  double t128;
  double t354;
  double t390;
  double t431;
  double t475;
  double t514;
  double t515;
  double t517;
  double t542;
  double t549;
  double t605;
  double t218;
  double t257;
  double t306;
  double t391;
  double t557;
  double t586;
  double t606;
  double t662;
  double t689;
  double t695;
  double t761;
  double t795;
  double t870;
  double t912;
  double t927;
  double t935;
  double t977;
  double t1204;
  double t1209;
  double t1228;
  double t1345;
  double t901;
  double t979;
  double t1203;
  double t1149;
  double t1152;
  double t1164;
  double t1014;
  double t1040;
  double t1053;
  double t1056;
  double t1099;
  double t1122;
  double t1240;
  double t1266;
  double t69;
  double t594;
  double t734;
  double t741;
  double t1349;
  double t1406;
  double t1408;
  double t1002;
  double t1184;
  double t1189;
  double t1546;
  double t1563;
  double t1568;
  double t1634;
  double t2000;
  double t2029;
  double t2061;
  double t1722;
  double t2094;
  double t2105;
  double t2108;
  double t2130;
  double t1882;
  double t1889;
  double t2063;
  double t2076;
  double t1287;
  double t2062;
  double t2089;
  double t2136;
  double t2156;
  double t2176;
  double t1662;
  double t1665;
  double t1491;
  double t1709;
  double t1770;
  double t2351;
  double t2359;
  double t2365;
  double t2369;
  double t2381;
  double t2583;
  double t2592;
  double t2595;
  double t2609;
  double t2612;
  double t2625;
  double t2705;
  double t2722;
  double t2724;
  double t2647;
  double t2669;
  double t2672;
  double t2593;
  double t2631;
  double t2637;
  double t2725;
  double t2728;
  double t2740;
  double t2749;
  double t2309;
  double t2314;
  double t2336;
  double t2564;
  double t2640;
  double t2642;
  double t2674;
  double t2684;
  double t2191;
  double t2206;
  double t2219;
  double t2818;
  double t2819;
  double t2839;
  double t2865;
  double t2868;
  double t2561;
  double t3076;
  double t3092;
  double t3093;
  double t3121;
  double t3128;
  double t3152;
  double t3160;
  double t3169;
  double t2734;
  double t2750;
  double t2755;
  double t2801;
  double t3150;
  double t3171;
  double t3173;
  double t3192;
  double t3227;
  double t3228;
  double t2878;
  double t3186;
  double t3234;
  double t3258;
  double t2934;
  double t2966;
  double t2967;
  double t2993;
  double t3266;
  double t3280;
  double t3284;
  double t1678;
  double t1774;
  double t1779;
  double t3373;
  double t3384;
  double t3385;
  double t1956;
  double t1975;
  double t1979;
  double t2265;
  double t2266;
  double t2274;
  double t2303;
  double t2401;
  double t2411;
  double t2419;
  double t2421;
  double t2442;
  double t2450;
  double t2452;
  double t2478;
  double t2479;
  double t2482;
  double t2494;
  double t2497;
  double t2506;
  double t2523;
  double t2534;
  double t3433;
  double t3448;
  double t3450;
  double t3454;
  double t3458;
  double t3473;
  double t3478;
  double t3521;
  double t3524;
  double t3535;
  double t3550;
  double t3554;
  double t3561;
  double t3789;
  double t3793;
  double t3801;
  double t3802;
  double t3803;
  double t3834;
  double t3835;
  double t3844;
  double t3861;
  double t3743;
  double t3766;
  double t3774;
  double t3782;
  double t4678;
  double t4691;
  double t4720;
  double t3610;
  double t3642;
  double t3655;
  double t3665;
  double t3679;
  double t4630;
  double t4649;
  double t4740;
  double t4741;
  double t4771;
  double t4776;
  double t4779;
  double t4827;
  double t4829;
  double t4830;
  double t4857;
  double t3980;
  double t3943;
  double t3981;
  double t4024;
  double t4888;
  double t4928;
  double t4929;
  double t4937;
  double t4957;
  double t4961;
  double t4985;
  double t4991;
  double t5028;
  double t3877;
  double t3889;
  double t3905;
  double t3912;
  double t4175;
  double t4179;
  double t4182;
  double t4335;
  double t4336;
  double t4114;
  double t4122;
  double t4131;
  double t4166;
  double t4170;
  double t5762;
  double t5763;
  double t5765;
  double t5743;
  double t5757;
  double t5769;
  double t5777;
  double t5780;
  double t5139;
  double t5149;
  double t5191;
  double t5214;
  double t5237;
  double t5902;
  double t5905;
  double t5908;
  double t5909;
  double t5921;
  double t5377;
  double t5391;
  double t5458;
  double t5463;
  double t5465;
  double t5482;
  double t5489;
  double t5495;
  double t5497;
  double t5571;
  double t5576;
  double t5611;
  double t5635;
  double t5653;
  double t5656;
  double t6159;
  double t6165;
  double t6175;
  double t6181;
  double t6183;
  double t6216;
  double t6218;
  double t6219;
  double t6203;
  double t6213;
  double t6214;
  double t2704;
  double t2874;
  double t2875;
  double t2876;
  double t2923;
  double t3007;
  double t3026;
  double t3027;
  double t3047;
  double t3051;
  double t4880;
  double t5080;
  double t5088;
  double t5091;
  double t5114;
  double t5136;
  double t5146;
  double t5170;
  double t5172;
  double t5190;
  double t5226;
  double t5228;
  double t5239;
  double t5240;
  double t5248;
  double t5271;
  double t5282;
  double t5283;
  double t5300;
  double t5314;
  double t5329;
  double t5335;
  double t5360;
  double t5395;
  double t5409;
  double t5521;
  double t5524;
  double t5539;
  double t5551;
  double t5599;
  double t5607;
  double t5663;
  double t5675;
  double t5698;
  double t5734;
  double t5737;
  double t5738;
  double t6310;
  double t6313;
  double t6314;
  double t6316;
  double t6321;
  double t6323;
  double t6338;
  double t6341;
  double t6343;
  double t6346;
  double t6352;
  double t6357;
  double t6365;
  double t6371;
  double t6374;
  double t6377;
  double t6380;
  double t6402;
  double t6411;
  double t6417;
  double t6422;
  double t6423;
  double t6424;
  double t6429;
  double t6672;
  double t6673;
  double t6674;
  double t5850;
  double t5866;
  double t5873;
  double t5879;
  double t5891;
  double t5898;
  double t5899;
  double t5809;
  double t5823;
  double t5824;
  double t6676;
  double t6677;
  double t6681;
  double t6684;
  double t6678;
  double t6686;
  double t6687;
  double t6707;
  double t6709;
  double t6712;
  double t6726;
  double t6442;
  double t6449;
  double t5984;
  double t5992;
  double t6009;
  double t6464;
  double t6494;
  double t6495;
  double t5967;
  double t5969;
  double t5974;
  double t6732;
  double t6733;
  double t6735;
  double t6746;
  double t6747;
  double t6757;
  double t6761;
  double t6591;
  double t6599;
  double t6601;
  double t6603;
  double t6605;
  double t6521;
  double t6523;
  double t6525;
  double t6530;
  double t6533;
  double t6972;
  double t6973;
  double t6975;
  double t6976;
  double t6978;
  double t7001;
  double t7002;
  double t7003;
  double t7010;
  double t7011;
  double t6992;
  double t6997;
  double t6999;
  double t7055;
  double t7060;
  double t7057;
  double t7062;
  double t7064;
  double t7068;
  double t7071;
  double t7072;
  double t7067;
  double t7075;
  double t7083;
  double t7093;
  double t7097;
  double t7098;
  double t7127;
  double t7128;
  double t7129;
  double t7123;
  double t7126;
  double t7137;
  double t7140;
  double t7147;
  double t7154;
  double t7163;
  double t7165;
  double t7173;
  double t7177;
  double t7284;
  double t7152;
  double t7290;
  double t7291;
  double t7296;
  double t7298;
  double t7292;
  double t7304;
  double t7306;
  double t7311;
  double t7314;
  double t6779;
  double t6795;
  double t7218;
  double t7223;
  double t7224;
  double t6815;
  double t6816;
  double t7187;
  double t7191;
  double t7210;
  double t7326;
  double t7329;
  double t7331;
  double t7333;
  double t7336;
  double t6898;
  double t6903;
  double t6937;
  double t6941;
  double t7432;
  double t6782;
  double t7342;
  double t7344;
  double t7346;
  double t6796;
  double t7347;
  double t6825;
  double t7363;
  double t7366;
  double t6827;
  double t7370;
  double t7371;
  double t7458;
  double t6902;
  double t7401;
  double t6904;
  double t7403;
  double t6940;
  double t7415;
  double t6945;
  double t7416;
  double t7110;
  double t7111;
  double t7112;
  double t7524;
  double t7528;
  double t7529;
  double t7544;
  double t7545;
  double t7546;
  double t7548;
  double t7549;
  double t7535;
  double t7536;
  double t7537;
  double t7539;
  double t7542;
  t51 = Sin(var1[3]);
  t128 = Cos(var1[4]);
  t354 = Cos(var1[5]);
  t390 = Sin(var1[4]);
  t431 = -1.*t354;
  t475 = 1. + t431;
  t514 = -1.3127*t475;
  t515 = -1.3127*t354;
  t517 = Sin(var1[5]);
  t542 = -0.06*t517;
  t549 = t514 + t515 + t542;
  t605 = Cos(var1[3]);
  t218 = -1.*t128;
  t257 = 1. + t218;
  t306 = -0.9063*t257;
  t391 = -0.06*t354*t390;
  t557 = t128*t549;
  t586 = t306 + t391 + t557;
  t606 = 0.06*t128*t354;
  t662 = 0.9063*t390;
  t689 = t390*t549;
  t695 = t606 + t662 + t689;
  t761 = -1.*t354*t390;
  t795 = -1.*t128*t517;
  t870 = t761 + t795;
  t912 = t128*t354;
  t927 = -1.*t390*t517;
  t935 = t912 + t927;
  t977 = t605*t935;
  t1204 = t354*t390;
  t1209 = t128*t517;
  t1228 = t1204 + t1209;
  t1345 = Sin(var1[2]);
  t901 = t51*t870;
  t979 = t901 + t977;
  t1203 = Cos(var1[2]);
  t1149 = t605*t870;
  t1152 = -1.*t51*t935;
  t1164 = t1149 + t1152;
  t1014 = -1.*t605;
  t1040 = 1. + t1014;
  t1053 = -0.4999*t1040;
  t1056 = t605*t586;
  t1099 = -1.*t51*t695;
  t1122 = t1053 + t1056 + t1099;
  t1240 = -1.*t51*t1228;
  t1266 = t1240 + t977;
  t69 = 0.4999*t51;
  t594 = t51*t586;
  t734 = t605*t695;
  t741 = t69 + t594 + t734;
  t1349 = t605*t1228;
  t1406 = t51*t935;
  t1408 = t1349 + t1406;
  t1002 = -1.*t741*t979;
  t1184 = -1.*t1122*t1164;
  t1189 = t1002 + t1184;
  t1546 = t1122*t1266;
  t1563 = t741*t1408;
  t1568 = t1546 + t1563;
  t1634 = -1.*t1345*t1266;
  t2000 = -1.*t51*t870;
  t2029 = -1.*t605*t935;
  t2061 = t2000 + t2029;
  t1722 = -1.*t1345*t1164;
  t2094 = -0.4999*t51;
  t2105 = -1.*t51*t586;
  t2108 = -1.*t605*t695;
  t2130 = t2094 + t2105 + t2108;
  t1882 = -1.*t605*t1228;
  t1889 = t1882 + t1152;
  t2063 = 0.4999*t605;
  t2076 = t2063 + t1056 + t1099;
  t1287 = -1.*t1203*t1266;
  t2062 = -1.*t1122*t2061;
  t2089 = -1.*t2076*t979;
  t2136 = -1.*t2130*t1164;
  t2156 = -1.*t741*t1164;
  t2176 = t2062 + t2089 + t2136 + t2156;
  t1662 = -1.*t1203*t1408;
  t1665 = t1634 + t1662;
  t1491 = -1.*t1203*t1164;
  t1709 = -1.*t1203*t979;
  t1770 = t1709 + t1722;
  t2351 = t2130*t1266;
  t2359 = t741*t1266;
  t2365 = t1122*t1889;
  t2369 = t2076*t1408;
  t2381 = t2351 + t2359 + t2365 + t2369;
  t2583 = 0.9063*t128;
  t2592 = t2583 + t391 + t557;
  t2595 = -0.06*t128*t354;
  t2609 = -0.9063*t390;
  t2612 = -1.*t390*t549;
  t2625 = t2595 + t2609 + t2612;
  t2705 = -1.*t128*t354;
  t2722 = t390*t517;
  t2724 = t2705 + t2722;
  t2647 = t605*t2592;
  t2669 = t51*t2625;
  t2672 = t2647 + t2669;
  t2593 = -1.*t51*t2592;
  t2631 = t605*t2625;
  t2637 = t2593 + t2631;
  t2725 = t605*t2724;
  t2728 = t2000 + t2725;
  t2740 = t51*t2724;
  t2749 = t1149 + t2740;
  t2309 = -1.*t1345*t979;
  t2314 = t1203*t1164;
  t2336 = t2309 + t2314;
  t2564 = t741*t979;
  t2640 = t2637*t1266;
  t2642 = t1122*t1164;
  t2674 = t2672*t1408;
  t2684 = t2564 + t2640 + t2642 + t2674;
  t2191 = t1203*t1266;
  t2206 = -1.*t1345*t1408;
  t2219 = t2191 + t2206;
  t2818 = -1.*t2672*t979;
  t2819 = -1.*t2637*t1164;
  t2839 = -1.*t1122*t2728;
  t2865 = -1.*t741*t2749;
  t2868 = t2818 + t2819 + t2839 + t2865;
  t2561 = 1.142857*t1770*t1189;
  t3076 = -0.06*t354;
  t3092 = 0. + t3076;
  t3093 = t3092*t390;
  t3121 = -0.06*t128*t517;
  t3128 = t3093 + t3121;
  t3152 = t128*t3092;
  t3160 = 0.06*t390*t517;
  t3169 = t3152 + t3160;
  t2734 = -1.*t1345*t2728;
  t2750 = -1.*t1203*t2749;
  t2755 = t2734 + t2750;
  t2801 = 1.142857*t1568*t2755;
  t3150 = -1.*t51*t3128;
  t3171 = t605*t3169;
  t3173 = t3150 + t3171;
  t3192 = t605*t3128;
  t3227 = t51*t3169;
  t3228 = t3192 + t3227;
  t2878 = 1.142857*t2336*t1189;
  t3186 = t1266*t3173;
  t3234 = t1408*t3228;
  t3258 = t2564 + t2642 + t3186 + t3234;
  t2934 = t1203*t2728;
  t2966 = -1.*t1345*t2749;
  t2967 = t2934 + t2966;
  t2993 = 1.142857*t1568*t2967;
  t3266 = -1.*t1164*t3173;
  t3280 = -1.*t979*t3228;
  t3284 = t3266 + t3280 + t2839 + t2865;
  t1678 = 1.142857*t1189*t1665;
  t1774 = 1.142857*t1770*t1568;
  t1779 = t1678 + t1774;
  t3373 = 1.142857*t1189*t2219;
  t3384 = 1.142857*t2336*t1568;
  t3385 = t3373 + t3384;
  t1956 = t1203*t1889;
  t1975 = t1634 + t1956;
  t1979 = 1.142857*t1189*t1975;
  t2265 = 1.142857*t2176*t2219;
  t2266 = t1203*t2061;
  t2274 = t2266 + t1722;
  t2303 = 1.142857*t2274*t1568;
  t2401 = 1.142857*t2336*t2381;
  t2411 = t1979 + t2265 + t2303 + t2401;
  t2419 = 0.5*var2[0]*t2411;
  t2421 = -1.*t1345*t1889;
  t2442 = t1287 + t2421;
  t2450 = 1.142857*t1189*t2442;
  t2452 = 1.142857*t2176*t1665;
  t2478 = -1.*t1345*t2061;
  t2479 = t2478 + t1491;
  t2482 = 1.142857*t2479*t1568;
  t2494 = 1.142857*t1770*t2381;
  t2497 = t2450 + t2452 + t2482 + t2494;
  t2506 = 0.5*var2[1]*t2497;
  t2523 = t2419 + t2506;
  t2534 = var2[2]*t2523;
  t3433 = -2.*t2130*t2061;
  t3448 = -1.*t741*t2061;
  t3450 = -1.*t2130*t979;
  t3454 = -2.*t2076*t1164;
  t3458 = -0.4999*t605;
  t3473 = -1.*t605*t586;
  t3478 = t51*t695;
  t3521 = t3458 + t3473 + t3478;
  t3524 = -1.*t3521*t1164;
  t3535 = -1.*t605*t870;
  t3550 = t3535 + t1406;
  t3554 = -1.*t1122*t3550;
  t3561 = t3433 + t3448 + t3450 + t3454 + t3524 + t3554;
  t3789 = t51*t1228;
  t3793 = t3789 + t2029;
  t3801 = t1122*t3793;
  t3802 = 2.*t2076*t1266;
  t3803 = t3521*t1266;
  t3834 = 2.*t2130*t1889;
  t3835 = t741*t1889;
  t3844 = t2130*t1408;
  t3861 = t3801 + t3802 + t3803 + t3834 + t3835 + t3844;
  t3743 = 0.9063*t354;
  t3766 = t354*t549;
  t3774 = 0.06*t354*t517;
  t3782 = t3743 + t3766 + t3774;
  t4678 = -1.*t605*t2592;
  t4691 = -1.*t51*t2625;
  t4720 = t4678 + t4691;
  t3610 = Power(t354,2);
  t3642 = -0.06*t3610;
  t3655 = 0.9063*t517;
  t3665 = t549*t517;
  t3679 = t3642 + t3655 + t3665;
  t4630 = -1.*t2637*t2061;
  t4649 = -1.*t2637*t979;
  t4740 = -1.*t4720*t1164;
  t4741 = -1.*t2672*t1164;
  t4771 = -1.*t2130*t2728;
  t4776 = -1.*t741*t2728;
  t4779 = -1.*t51*t2724;
  t4827 = t3535 + t4779;
  t4829 = -1.*t1122*t4827;
  t4830 = -1.*t2076*t2749;
  t4857 = t4630 + t4649 + t4740 + t4741 + t4771 + t4776 + t4829 + t4830;
  t3980 = 0.4999*t935;
  t3943 = t695*t1228;
  t3981 = t586*t935;
  t4024 = t3943 + t3980 + t3981;
  t4888 = t1122*t2061;
  t4928 = t2076*t979;
  t4929 = t4720*t1266;
  t4937 = t2672*t1266;
  t4957 = t2130*t1164;
  t4961 = t741*t1164;
  t4985 = t2637*t1889;
  t4991 = t2637*t1408;
  t5028 = t4888 + t4928 + t4929 + t4937 + t4957 + t4961 + t4985 + t4991;
  t3877 = -1.*t586*t870;
  t3889 = 0.4999*t1228;
  t3905 = -1.*t695*t935;
  t3912 = t3877 + t3889 + t3905;
  t4175 = t1203*t979;
  t4179 = t1345*t1164;
  t4182 = t4175 + t4179;
  t4335 = t1345*t2061;
  t4336 = t4335 + t2314;
  t4114 = t1345*t1889;
  t4122 = t2191 + t4114;
  t4131 = t1345*t1266;
  t4166 = t1203*t1408;
  t4170 = t4131 + t4166;
  t5762 = -1.*t605*t3128;
  t5763 = -1.*t51*t3169;
  t5765 = t5762 + t5763;
  t5743 = -1.*t2061*t3173;
  t5757 = -1.*t979*t3173;
  t5769 = -1.*t1164*t5765;
  t5777 = -1.*t1164*t3228;
  t5780 = t5743 + t5757 + t5769 + t5777 + t4771 + t4776 + t4829 + t4830;
  t5139 = -1.*t695*t870;
  t5149 = -1.*t586*t2724;
  t5191 = 0.4999*t870;
  t5214 = t586*t870;
  t5237 = t695*t935;
  t5902 = t1889*t3173;
  t5905 = t1408*t3173;
  t5908 = t1266*t5765;
  t5909 = t1266*t3228;
  t5921 = t4888 + t4928 + t4957 + t4961 + t5902 + t5905 + t5908 + t5909;
  t5377 = 1.142857*t4182*t2176;
  t5391 = 1.142857*t4336*t1189;
  t5458 = t1345*t4827;
  t5463 = t2934 + t5458;
  t5465 = 1.142857*t1568*t5463;
  t5482 = t1345*t2728;
  t5489 = t1203*t2749;
  t5495 = t5482 + t5489;
  t5497 = 1.142857*t2381*t5495;
  t5571 = 1.142857*t2336*t2176;
  t5576 = 1.142857*t2274*t1189;
  t5611 = t1203*t4827;
  t5635 = t2734 + t5611;
  t5653 = 1.142857*t1568*t5635;
  t5656 = 1.142857*t2381*t2967;
  t6159 = 1.142857*t1189*t4122;
  t6165 = 1.142857*t2176*t4170;
  t6175 = 1.142857*t4336*t1568;
  t6181 = 1.142857*t4182*t2381;
  t6183 = t6159 + t6165 + t6175 + t6181;
  t6216 = 1.142857*t3912*t2176;
  t6218 = 1.142857*t4024*t2381;
  t6219 = t6216 + t6218;
  t6203 = 1.142857*t3679*t2176;
  t6213 = 1.142857*t3782*t2381;
  t6214 = t6203 + t6213;
  t2704 = 1.142857*t1770*t2684;
  t2874 = 1.142857*t1665*t2868;
  t2875 = t2561 + t2704 + t2801 + t2874;
  t2876 = 0.5*var2[1]*t2875;
  t2923 = 1.142857*t2336*t2684;
  t3007 = 1.142857*t2219*t2868;
  t3026 = t2878 + t2923 + t2993 + t3007;
  t3027 = 0.5*var2[0]*t3026;
  t3047 = t2876 + t3027;
  t3051 = var2[2]*t3047;
  t4880 = -0.03428571*var2[5]*t4857;
  t5080 = 1.142857*t3782*t5028;
  t5088 = 1.142857*t3679*t4857;
  t5091 = t5080 + t5088;
  t5114 = 0.5*var2[4]*t5091;
  t5136 = -1.*t2625*t870;
  t5146 = -1.*t2592*t935;
  t5170 = t5136 + t5139 + t3980 + t5146 + t5149;
  t5172 = 1.142857*t5170*t2176;
  t5190 = 1.142857*t4024*t5028;
  t5226 = t2592*t1228;
  t5228 = t2625*t935;
  t5239 = t5191 + t5214 + t5226 + t5228 + t5237;
  t5240 = 1.142857*t5239*t2381;
  t5248 = 1.142857*t3912*t4857;
  t5271 = t5172 + t5190 + t5240 + t5248;
  t5282 = 0.5*var2[3]*t5271;
  t5283 = 2.285714*t5028*t1568;
  t5300 = 2.285714*t2684*t2381;
  t5314 = 2.285714*t2176*t2868;
  t5329 = 2.285714*t1189*t4857;
  t5335 = t5283 + t5300 + t5314 + t5329;
  t5360 = 0.5*var2[2]*t5335;
  t5395 = 1.142857*t4182*t5028;
  t5409 = 1.142857*t4336*t2684;
  t5521 = 1.142857*t4122*t2868;
  t5524 = 1.142857*t4170*t4857;
  t5539 = t5377 + t5391 + t5395 + t5409 + t5465 + t5497 + t5521 + t5524;
  t5551 = 0.5*var2[0]*t5539;
  t5599 = 1.142857*t2336*t5028;
  t5607 = 1.142857*t2274*t2684;
  t5663 = 1.142857*t1975*t2868;
  t5675 = 1.142857*t2219*t4857;
  t5698 = t5571 + t5576 + t5599 + t5607 + t5653 + t5656 + t5663 + t5675;
  t5734 = 0.5*var2[1]*t5698;
  t5737 = t4880 + t5114 + t5282 + t5360 + t5551 + t5734;
  t5738 = var2[2]*t5737;
  t6310 = -0.9063*t128;
  t6313 = 0.06*t354*t390;
  t6314 = -1.*t128*t549;
  t6316 = t6310 + t6313 + t6314;
  t6321 = t51*t6316;
  t6323 = t6321 + t2631;
  t6338 = -1.*t6323*t979;
  t6341 = t605*t6316;
  t6343 = t6341 + t4691;
  t6346 = -1.*t6343*t1164;
  t6352 = -2.*t2637*t2728;
  t6357 = t3789 + t2725;
  t6365 = -1.*t741*t6357;
  t6371 = t1349 + t4779;
  t6374 = -1.*t1122*t6371;
  t6377 = -2.*t2672*t2749;
  t6380 = t6338 + t6346 + t6352 + t6365 + t6374 + t6377;
  t6402 = 2.*t2672*t979;
  t6411 = t6343*t1266;
  t6417 = 2.*t2637*t1164;
  t6422 = t6323*t1408;
  t6423 = t1122*t2728;
  t6424 = t741*t2749;
  t6429 = t6402 + t6411 + t6417 + t6422 + t6423 + t6424;
  t6672 = -1.*t3092*t390;
  t6673 = 0.06*t128*t517;
  t6674 = t6672 + t6673;
  t5850 = t3092*t354;
  t5866 = 0.06*t3610;
  t5873 = -0.9063*t517;
  t5879 = -1.*t549*t517;
  t5891 = Power(t517,2);
  t5898 = -0.06*t5891;
  t5899 = t5850 + t5866 + t5873 + t5879 + t5898;
  t5809 = t3092*t517;
  t5823 = 0.12*t354*t517;
  t5824 = t3743 + t3766 + t5809 + t5823;
  t6676 = t51*t6674;
  t6677 = t6676 + t3171;
  t6681 = t605*t6674;
  t6684 = t6681 + t5763;
  t6678 = -1.*t979*t6677;
  t6686 = -1.*t1164*t6684;
  t6687 = -1.*t2637*t2728;
  t6707 = -1.*t3173*t2728;
  t6709 = -1.*t2672*t2749;
  t6712 = -1.*t3228*t2749;
  t6726 = t6678 + t6686 + t6687 + t6707 + t6365 + t6374 + t6709 + t6712;
  t6442 = -1.*t586*t1228;
  t6449 = -1.*t695*t2724;
  t5984 = t3128*t1228;
  t5992 = t935*t3169;
  t6009 = t5191 + t5214 + t5984 + t5237 + t5992;
  t6464 = t695*t870;
  t6494 = 0.4999*t2724;
  t6495 = t586*t2724;
  t5967 = -1.*t3128*t935;
  t5969 = -1.*t870*t3169;
  t5974 = t5139 + t3980 + t5967 + t5969 + t5149;
  t6732 = t2672*t979;
  t6733 = t2637*t1164;
  t6735 = t1164*t3173;
  t6746 = t1408*t6677;
  t6747 = t1266*t6684;
  t6757 = t979*t3228;
  t6761 = t6732 + t6733 + t6735 + t6746 + t6747 + t6757 + t6423 + t6424;
  t6591 = t1203*t6357;
  t6599 = t1345*t6371;
  t6601 = t6591 + t6599;
  t6603 = 1.142857*t1568*t6601;
  t6605 = 1.142857*t1189*t5495;
  t6521 = -1.*t1345*t6357;
  t6523 = t1203*t6371;
  t6525 = t6521 + t6523;
  t6530 = 1.142857*t1568*t6525;
  t6533 = 1.142857*t1189*t2967;
  t6972 = 1.142857*t4182*t1189;
  t6973 = 1.142857*t4182*t2684;
  t6975 = 1.142857*t1568*t5495;
  t6976 = 1.142857*t4170*t2868;
  t6978 = t6972 + t6973 + t6975 + t6976;
  t7001 = 1.142857*t5170*t1189;
  t7002 = 1.142857*t4024*t2684;
  t7003 = 1.142857*t5239*t1568;
  t7010 = 1.142857*t3912*t2868;
  t7011 = t7001 + t7002 + t7003 + t7010;
  t6992 = 1.142857*t3782*t2684;
  t6997 = 1.142857*t3679*t2868;
  t6999 = t6992 + t6997;
  t7055 = t391 + t3121;
  t7060 = t2595 + t3160;
  t7057 = -1.*t51*t7055;
  t7062 = t605*t7060;
  t7064 = t7057 + t7062;
  t7068 = t605*t7055;
  t7071 = t51*t7060;
  t7072 = t7068 + t7071;
  t7067 = t1266*t7064;
  t7075 = t1408*t7072;
  t7083 = t2564 + t2642 + t7067 + t7075;
  t7093 = -1.*t1164*t7064;
  t7097 = -1.*t979*t7072;
  t7098 = t7093 + t7097 + t2839 + t2865;
  t7127 = -1.*t605*t7055;
  t7128 = -1.*t51*t7060;
  t7129 = t7127 + t7128;
  t7123 = -1.*t2061*t7064;
  t7126 = -1.*t979*t7064;
  t7137 = -1.*t1164*t7129;
  t7140 = -1.*t1164*t7072;
  t7147 = t7123 + t7126 + t7137 + t7140 + t4771 + t4776 + t4829 + t4830;
  t7154 = t1889*t7064;
  t7163 = t1408*t7064;
  t7165 = t1266*t7129;
  t7173 = t1266*t7072;
  t7177 = t4888 + t4928 + t4957 + t4961 + t7154 + t7163 + t7165 + t7173;
  t7284 = t6313 + t6673;
  t7152 = 0. + t5873 + t5879 + t5898;
  t7290 = t51*t7284;
  t7291 = t7290 + t7062;
  t7296 = t605*t7284;
  t7298 = t7296 + t7128;
  t7292 = -1.*t979*t7291;
  t7304 = -1.*t1164*t7298;
  t7306 = -1.*t7064*t2728;
  t7311 = -1.*t7072*t2749;
  t7314 = t7292 + t7304 + t6687 + t7306 + t6365 + t6374 + t6709 + t7311;
  t6779 = -1.*t2592*t870;
  t6795 = -1.*t2625*t2724;
  t7218 = t7055*t1228;
  t7223 = t935*t7060;
  t7224 = t5191 + t5214 + t7218 + t5237 + t7223;
  t6815 = t2625*t870;
  t6816 = t2592*t935;
  t7187 = -1.*t7055*t935;
  t7191 = -1.*t870*t7060;
  t7210 = t5139 + t3980 + t7187 + t7191 + t5149;
  t7326 = t1164*t7064;
  t7329 = t1408*t7291;
  t7331 = t1266*t7298;
  t7333 = t979*t7072;
  t7336 = t6732 + t6733 + t7326 + t7329 + t7331 + t7333 + t6423 + t6424;
  t6898 = 1.142857*t2684*t5495;
  t6903 = 1.142857*t4182*t2868;
  t6937 = 1.142857*t2684*t2967;
  t6941 = 1.142857*t2336*t2868;
  t7432 = t7292 + t7304 + t6707 + t7306 + t6365 + t6374 + t6712 + t7311;
  t6782 = -1.*t870*t3128;
  t7342 = -1.*t870*t7055;
  t7344 = -1.*t870*t7284;
  t7346 = -1.*t935*t7060;
  t6796 = -1.*t3169*t2724;
  t7347 = -1.*t7060*t2724;
  t6825 = t3128*t935;
  t7363 = t7055*t935;
  t7366 = t7284*t935;
  t6827 = t870*t3169;
  t7370 = t870*t7060;
  t7371 = t1228*t7060;
  t7458 = t6735 + t6757 + t7326 + t7329 + t7331 + t7333 + t6423 + t6424;
  t6902 = 1.142857*t3258*t5495;
  t7401 = 1.142857*t7083*t5495;
  t6904 = 1.142857*t4182*t3284;
  t7403 = 1.142857*t4182*t7098;
  t6940 = 1.142857*t3258*t2967;
  t7415 = 1.142857*t7083*t2967;
  t6945 = 1.142857*t2336*t3284;
  t7416 = 1.142857*t2336*t7098;
  t7110 = 1.142857*t2336*t7083;
  t7111 = 1.142857*t2219*t7098;
  t7112 = t2878 + t7110 + t2993 + t7111;
  t7524 = 1.142857*t4182*t7083;
  t7528 = 1.142857*t4170*t7098;
  t7529 = t6972 + t7524 + t6975 + t7528;
  t7544 = 1.142857*t7210*t1189;
  t7545 = 1.142857*t7224*t1568;
  t7546 = 1.142857*t4024*t7083;
  t7548 = 1.142857*t3912*t7098;
  t7549 = t7544 + t7545 + t7546 + t7548;
  t7535 = 1.142857*t3782*t1189;
  t7536 = 1.142857*t7152*t1568;
  t7537 = 1.142857*t3782*t7083;
  t7539 = 1.142857*t3679*t7098;
  t7542 = t7535 + t7536 + t7537 + t7539;
  p_output1[0]=(0.5*t1779*var2[0] + 0.5*(1.142857*t1189*(t1287 + t1345*t1408) + 1.142857*t1568*(t1491 + t1345*t979))*var2[1])*var2[2];
  p_output1[1]=t2534;
  p_output1[2]=t3051;
  p_output1[3]=(0.5*(t2878 + t2993 + 1.142857*t2336*t3258 + 1.142857*t2219*t3284)*var2[0] + 0.5*(t2561 + t2801 + 1.142857*t1770*t3258 + 1.142857*t1665*t3284)*var2[1])*var2[2];
  p_output1[4]=0.5*t3385*var2[2];
  p_output1[5]=0.5*t1779*var2[2];
  p_output1[6]=0.5*t3385*var2[0] + 0.5*t1779*var2[1];
  p_output1[7]=t2534;
  p_output1[8]=var2[2]*(0.5*(1.142857*t1568*(t2266 + t1345*t3550) + 1.142857*t1189*(t1956 + t1345*t3793) + 2.285714*t2176*t4122 + 1.142857*t3561*t4170 + 1.142857*t3861*t4182 + 2.285714*t2381*t4336)*var2[0] + 0.5*(2.285714*t1975*t2176 + 2.285714*t2274*t2381 + 1.142857*t1568*(t2478 + t1203*t3550) + 1.142857*t2219*t3561 + 1.142857*t1189*(t2421 + t1203*t3793) + 1.142857*t2336*t3861)*var2[1] + 0.5*(2.285714*Power(t2176,2) + 2.285714*Power(t2381,2) + 2.285714*t1189*t3561 + 2.285714*t1568*t3861)*var2[2] + 0.5*(1.142857*t3561*t3912 + 1.142857*t3861*t4024)*var2[3] + 0.5*(1.142857*t3561*t3679 + 1.142857*t3782*t3861)*var2[4] - 0.03428571*t3561*var2[5]);
  p_output1[9]=t5738;
  p_output1[10]=var2[2]*(0.5*(1.142857*t3284*t4122 + 1.142857*t3258*t4336 + t5377 + t5391 + t5465 + t5497 + 1.142857*t4170*t5780 + 1.142857*t4182*t5921)*var2[0] + 0.5*(1.142857*t2274*t3258 + 1.142857*t1975*t3284 + t5571 + t5576 + t5653 + t5656 + 1.142857*t2219*t5780 + 1.142857*t2336*t5921)*var2[1] + 0.5*(2.285714*t2381*t3258 + 2.285714*t2176*t3284 + 2.285714*t1189*t5780 + 2.285714*t1568*t5921)*var2[2] + 0.5*(1.142857*t3912*t5780 + 1.142857*t4024*t5921 + 1.142857*t2176*t5974 + 1.142857*t2381*t6009)*var2[3] + 0.5*(1.142857*t3679*t5780 + 1.142857*t2176*t5824 + 1.142857*t2381*t5899 + 1.142857*t3782*t5921)*var2[4] - 0.03428571*t5780*var2[5]);
  p_output1[11]=0.5*t6183*var2[2];
  p_output1[12]=0.5*t2411*var2[2];
  p_output1[13]=0.5*t6183*var2[0] + 0.5*t2411*var2[1] + (2.285714*t1189*t2176 + 2.285714*t1568*t2381)*var2[2] + 0.5*t6219*var2[3] + 0.5*t6214*var2[4] - 0.03428571*t2176*var2[5];
  p_output1[14]=0.5*t6219*var2[2];
  p_output1[15]=0.5*t6214*var2[2];
  p_output1[16]=-0.03428571*t2176*var2[2];
  p_output1[17]=t3051;
  p_output1[18]=t5738;
  p_output1[19]=var2[2]*(0.5*(2.285714*t2868*t4182 + 2.285714*t2684*t5495 + 1.142857*t4170*t6380 + 1.142857*t4182*t6429 + t6603 + t6605)*var2[0] + 0.5*(2.285714*t2336*t2868 + 2.285714*t2684*t2967 + 1.142857*t2219*t6380 + 1.142857*t2336*t6429 + t6530 + t6533)*var2[1] + 0.5*(2.285714*Power(t2684,2) + 2.285714*Power(t2868,2) + 2.285714*t1189*t6380 + 2.285714*t1568*t6429)*var2[2] + 0.5*(2.285714*t2868*t5170 + 2.285714*t2684*t5239 + 1.142857*t3912*t6380 + 1.142857*t4024*t6429 + 1.142857*t1189*(-2.*t2625*t2724 + t5191 + t6442 + t6449 - 2.*t2592*t870 - 1.*t6316*t870 - 1.*t2625*t935) + 1.142857*t1568*(t1228*t2625 + t6464 + t6494 + t6495 + 2.*t2625*t870 + 2.*t2592*t935 + t6316*t935))*var2[3] + 0.5*(1.142857*t3679*t6380 + 1.142857*t3782*t6429)*var2[4] - 0.03428571*t6380*var2[5]);
  p_output1[20]=var2[2]*(0.5*(t6603 + t6605 + 1.142857*t4170*t6726 + 1.142857*t4182*t6761 + t6898 + t6902 + t6903 + t6904)*var2[0] + 0.5*(t6530 + t6533 + 1.142857*t2219*t6726 + 1.142857*t2336*t6761 + t6937 + t6940 + t6941 + t6945)*var2[1] + 0.5*(2.285714*t2684*t3258 + 2.285714*t2868*t3284 + 2.285714*t1189*t6726 + 2.285714*t1568*t6761)*var2[2] + 0.5*(1.142857*t3284*t5170 + 1.142857*t3258*t5239 + 1.142857*t2868*t5974 + 1.142857*t2684*t6009 + 1.142857*t3912*t6726 + 1.142857*t4024*t6761 + 1.142857*t1189*(t5191 + t6442 + t6449 + t6779 + t6782 + t6795 + t6796 - 1.*t6674*t870 - 1.*t3169*t935) + 1.142857*t1568*(t1228*t3169 + t6464 + t6494 + t6495 + t6815 + t6816 + t6825 + t6827 + t6674*t935))*var2[3] + 0.5*(1.142857*t2868*t5824 + 1.142857*t2684*t5899 + 1.142857*t3679*t6726 + 1.142857*t3782*t6761)*var2[4] - 0.03428571*t6726*var2[5]);
  p_output1[21]=0.5*t6978*var2[2];
  p_output1[22]=0.5*t3026*var2[2];
  p_output1[23]=0.5*t6978*var2[0] + 0.5*t3026*var2[1] + (2.285714*t1568*t2684 + 2.285714*t1189*t2868)*var2[2] + 0.5*t7011*var2[3] + 0.5*t6999*var2[4] - 0.03428571*t2868*var2[5];
  p_output1[24]=0.5*t7011*var2[2];
  p_output1[25]=0.5*t6999*var2[2];
  p_output1[26]=-0.03428571*t2868*var2[2];
  p_output1[27]=(0.5*t7112*var2[0] + 0.5*(t2561 + t2801 + 1.142857*t1770*t7083 + 1.142857*t1665*t7098)*var2[1])*var2[2];
  p_output1[28]=var2[2]*(0.5*(t5377 + t5391 + t5465 + t5497 + 1.142857*t4336*t7083 + 1.142857*t4122*t7098 + 1.142857*t4170*t7147 + 1.142857*t4182*t7177)*var2[0] + 0.5*(t5571 + t5576 + t5653 + t5656 + 1.142857*t2274*t7083 + 1.142857*t1975*t7098 + 1.142857*t2219*t7147 + 1.142857*t2336*t7177)*var2[1] + 0.5*(2.285714*t2381*t7083 + 2.285714*t2176*t7098 + 2.285714*t1189*t7147 + 2.285714*t1568*t7177)*var2[2] + 0.5*(1.142857*t3912*t7147 + 1.142857*t4024*t7177 + 1.142857*t2176*t7210 + 1.142857*t2381*t7224)*var2[3] + 0.5*(1.142857*t2176*t3782 + 1.142857*t3679*t7147 + 1.142857*t2381*t7152 + 1.142857*t3782*t7177)*var2[4] - 0.03428571*t7147*var2[5]);
  p_output1[29]=var2[2]*(0.5*(t6603 + t6605 + t6898 + t6903 + 1.142857*t4170*t7314 + 1.142857*t4182*t7336 + t7401 + t7403)*var2[0] + 0.5*(t6530 + t6533 + t6937 + t6941 + 1.142857*t2219*t7314 + 1.142857*t2336*t7336 + t7415 + t7416)*var2[1] + 0.5*(2.285714*t2684*t7083 + 2.285714*t2868*t7098 + 2.285714*t1189*t7314 + 2.285714*t1568*t7336)*var2[2] + 0.5*(1.142857*t5239*t7083 + 1.142857*t5170*t7098 + 1.142857*t2868*t7210 + 1.142857*t2684*t7224 + 1.142857*t3912*t7314 + 1.142857*t4024*t7336 + 1.142857*t1189*(t5191 + t6442 + t6449 + t6779 + t6795 + t7342 + t7344 + t7346 + t7347) + 1.142857*t1568*(t6464 + t6494 + t6495 + t6815 + t6816 + t7363 + t7366 + t7370 + t7371))*var2[3] + 0.5*(1.142857*t2868*t3782 + 1.142857*t2684*t7152 + 1.142857*t3679*t7314 + 1.142857*t3782*t7336)*var2[4] - 0.03428571*t7314*var2[5]);
  p_output1[30]=var2[2]*(0.5*(t6603 + t6605 + t6902 + t6904 + t7401 + t7403 + 1.142857*t4170*t7432 + 1.142857*t4182*t7458)*var2[0] + 0.5*(t6530 + t6533 + t6940 + t6945 + t7415 + t7416 + 1.142857*t2219*t7432 + 1.142857*t2336*t7458)*var2[1] + 0.5*(2.285714*t3258*t7083 + 2.285714*t3284*t7098 + 2.285714*t1189*t7432 + 2.285714*t1568*t7458)*var2[2] + 0.5*(1.142857*t6009*t7083 + 1.142857*t5974*t7098 + 1.142857*t3284*t7210 + 1.142857*t3258*t7224 + 1.142857*t1189*(t5191 + t6442 + t6449 + t6782 + t6796 + t7342 + t7344 + t7346 + t7347) + 1.142857*t1568*(t6464 + t6494 + t6495 + t6825 + t6827 + t7363 + t7366 + t7370 + t7371) + 1.142857*t3912*t7432 + 1.142857*t4024*t7458)*var2[3] + 0.5*(1.142857*t3284*t3782 + 1.142857*t1568*(-0.9063*t354 - 1.*t3092*t517 - 0.12*t354*t517 - 1.*t354*t549) + 1.142857*t1189*t5899 + 1.142857*t5899*t7083 + 1.142857*t5824*t7098 + 1.142857*t3258*t7152 + 1.142857*t3679*t7432 + 1.142857*t3782*t7458)*var2[4] - 0.03428571*t7432*var2[5]);
  p_output1[31]=0.5*t7529*var2[2];
  p_output1[32]=0.5*t7112*var2[2];
  p_output1[33]=0.5*t7529*var2[0] + 0.5*t7112*var2[1] + (2.285714*t1568*t7083 + 2.285714*t1189*t7098)*var2[2] + 0.5*t7549*var2[3] + 0.5*t7542*var2[4] - 0.03428571*t7098*var2[5];
  p_output1[34]=0.5*t7549*var2[2];
  p_output1[35]=0.5*t7542*var2[2];
  p_output1[36]=-0.03428571*t7098*var2[2];
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 9 && ncols == 1) && 
      !(mrows == 1 && ncols == 9))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 9 && ncols == 1) && 
      !(mrows == 1 && ncols == 9))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 37, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_Ce3_vec_L4_J3_amber3_feet.hh"

namespace RightSS1
{

void J_Ce3_vec_L4_J3_amber3_feet_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
