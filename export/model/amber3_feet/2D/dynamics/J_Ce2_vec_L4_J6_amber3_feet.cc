/*
 * Automatically Generated from Mathematica.
 * Wed 1 Mar 2023 13:26:45 GMT-08:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t147;
  double t94;
  double t136;
  double t173;
  double t421;
  double t143;
  double t181;
  double t250;
  double t30;
  double t438;
  double t450;
  double t474;
  double t12;
  double t325;
  double t492;
  double t529;
  double t559;
  double t600;
  double t608;
  double t609;
  double t617;
  double t638;
  double t661;
  double t739;
  double t747;
  double t774;
  double t783;
  double t834;
  double t836;
  double t1193;
  double t1196;
  double t1216;
  double t1111;
  double t1127;
  double t1154;
  double t1170;
  double t1361;
  double t1392;
  double t1396;
  double t1690;
  double t1701;
  double t1710;
  double t1715;
  double t1718;
  double t1721;
  double t1796;
  double t1800;
  double t1829;
  double t1832;
  double t1921;
  double t1922;
  double t1944;
  double t1946;
  double t1967;
  double t1224;
  double t1229;
  double t1232;
  double t1233;
  double t1261;
  double t1268;
  double t1271;
  double t1286;
  double t2015;
  double t1326;
  double t1443;
  double t1450;
  double t1511;
  double t1516;
  double t1529;
  double t1533;
  double t1599;
  double t2138;
  double t2139;
  double t2173;
  double t2345;
  double t2367;
  double t2377;
  double t2402;
  double t2403;
  double t2437;
  double t2590;
  double t2618;
  double t2635;
  double t2796;
  double t2809;
  double t2815;
  double t2829;
  double t2842;
  double t2848;
  double t2852;
  double t2861;
  double t2864;
  double t2903;
  double t2997;
  double t2999;
  double t3001;
  double t3013;
  double t3016;
  double t3064;
  double t687;
  double t702;
  double t712;
  double t838;
  double t846;
  double t3463;
  double t3484;
  double t3508;
  double t3510;
  double t905;
  double t908;
  double t921;
  double t942;
  double t976;
  double t1723;
  double t1744;
  double t1839;
  double t1848;
  double t1901;
  double t1917;
  double t1942;
  double t1943;
  double t1972;
  double t1986;
  double t2012;
  double t2044;
  double t2049;
  double t2056;
  double t2065;
  double t3533;
  double t3539;
  double t3542;
  double t3549;
  double t2099;
  double t2104;
  double t2114;
  double t3568;
  double t3575;
  double t3576;
  double t3583;
  double t3585;
  double t2238;
  double t2510;
  double t3839;
  double t3840;
  double t2834;
  double t2931;
  double t2947;
  double t3947;
  double t3950;
  double t3953;
  double t3958;
  double t3965;
  double t3968;
  double t2975;
  double t2995;
  double t3009;
  double t3078;
  double t3124;
  double t3155;
  double t3157;
  double t3162;
  double t3252;
  double t3272;
  double t3278;
  double t3287;
  double t3289;
  double t4041;
  double t4062;
  double t4071;
  double t4804;
  double t4805;
  double t4818;
  double t4831;
  double t4837;
  double t4954;
  double t4986;
  double t4994;
  double t4640;
  double t4658;
  double t4671;
  double t4692;
  double t4702;
  double t4750;
  double t5494;
  double t5510;
  double t5513;
  double t5465;
  double t5473;
  double t5485;
  double t5699;
  double t5715;
  double t5728;
  double t5729;
  double t4589;
  double t4621;
  double t5858;
  double t5864;
  double t4754;
  double t4766;
  double t4770;
  double t5945;
  double t5946;
  double t5955;
  double t4852;
  double t4906;
  double t5985;
  double t5989;
  double t4938;
  double t5005;
  double t6005;
  double t6008;
  double t5008;
  double t5013;
  double t5019;
  double t5033;
  double t5057;
  double t5059;
  double t5066;
  double t5071;
  double t5125;
  double t5130;
  double t5177;
  double t5179;
  double t5228;
  double t5295;
  double t5308;
  double t5314;
  double t5316;
  double t5320;
  double t5321;
  double t5323;
  double t5333;
  double t5339;
  double t5354;
  double t5355;
  double t5357;
  double t5369;
  double t5372;
  double t5373;
  double t5378;
  double t5414;
  double t5417;
  double t5436;
  double t5439;
  double t5441;
  double t5543;
  double t6162;
  double t6172;
  double t6176;
  double t6181;
  double t6184;
  double t6196;
  double t5598;
  double t5698;
  double t5717;
  double t5732;
  double t5734;
  double t5736;
  double t5740;
  double t5766;
  double t5767;
  double t5776;
  double t5789;
  double t5791;
  double t5815;
  double t6433;
  double t6442;
  double t6450;
  double t6462;
  double t6463;
  double t6395;
  double t6402;
  double t6419;
  double t6420;
  double t6425;
  double t6330;
  double t6333;
  double t6335;
  double t6341;
  double t6343;
  double t6347;
  double t6351;
  double t6353;
  double t6371;
  double t6373;
  double t6383;
  double t6385;
  double t6386;
  double t2293;
  double t2301;
  double t2517;
  double t2520;
  double t2305;
  double t2440;
  double t2455;
  double t2570;
  double t2655;
  double t2656;
  double t2662;
  double t3772;
  double t3787;
  double t3892;
  double t3898;
  double t3824;
  double t3829;
  double t3871;
  double t3881;
  double t3900;
  double t3904;
  double t3919;
  double t3920;
  double t3925;
  double t3943;
  double t3952;
  double t3971;
  double t3972;
  double t3995;
  double t4012;
  double t4020;
  double t4026;
  double t4029;
  double t4030;
  double t4039;
  double t4089;
  double t4108;
  double t4117;
  double t4186;
  double t4203;
  double t4212;
  double t4217;
  double t4265;
  double t4282;
  double t4300;
  double t4368;
  double t4370;
  double t4397;
  double t4427;
  double t4428;
  double t4437;
  double t4522;
  double t4819;
  double t4839;
  double t4849;
  double t4859;
  double t4934;
  double t5041;
  double t5051;
  double t5086;
  double t5148;
  double t5181;
  double t5205;
  double t5213;
  double t5489;
  double t5519;
  double t5520;
  double t5554;
  double t5577;
  double t5582;
  double t5606;
  double t5617;
  double t5741;
  double t5772;
  double t5802;
  double t5821;
  double t6694;
  double t5850;
  double t5857;
  double t5866;
  double t5895;
  double t5912;
  double t6697;
  double t5920;
  double t5940;
  double t5942;
  double t6711;
  double t6712;
  double t6715;
  double t5999;
  double t6010;
  double t6011;
  double t6725;
  double t6076;
  double t6077;
  double t6082;
  double t6090;
  double t6091;
  double t6115;
  double t6733;
  double t6734;
  double t6131;
  double t6138;
  double t6147;
  double t6757;
  double t6763;
  double t6770;
  double t6783;
  double t6789;
  double t6795;
  double t6796;
  double t6800;
  double t6802;
  double t6803;
  double t6806;
  double t6807;
  double t6177;
  double t6202;
  double t6205;
  double t6815;
  double t6211;
  double t6212;
  double t6213;
  double t6824;
  double t6223;
  double t6229;
  double t6234;
  double t6249;
  double t6255;
  double t6256;
  double t6366;
  double t2948;
  double t3147;
  double t3174;
  double t3299;
  double t3305;
  double t1872;
  double t1999;
  double t2079;
  double t2115;
  double t2128;
  double t866;
  double t992;
  double t1290;
  double t1636;
  double t1655;
  double t1670;
  double t2136;
  double t6919;
  double t3344;
  double t6579;
  double t6588;
  double t6589;
  double t6593;
  double t6598;
  double t3997;
  double t4007;
  double t4160;
  double t4162;
  double t4176;
  double t4273;
  double t4274;
  double t4561;
  double t4568;
  double t6649;
  double t6650;
  double t6656;
  double t6658;
  double t6664;
  double t6674;
  double t6678;
  double t6684;
  double t6685;
  double t5542;
  double t5597;
  double t5765;
  double t5823;
  double t5825;
  double t6814;
  double t6816;
  double t6828;
  double t6843;
  double t6844;
  double t6208;
  double t6220;
  double t6238;
  double t6301;
  double t6311;
  double t6894;
  double t6896;
  double t6904;
  double t6908;
  double t6911;
  double t6387;
  double t6922;
  double t7199;
  double t7200;
  double t7202;
  double t7203;
  double t7204;
  double t7187;
  double t7188;
  double t7191;
  double t7192;
  double t7193;
  double t7182;
  double t7184;
  double t7185;
  double t6530;
  double t6539;
  double t6541;
  double t6546;
  double t6550;
  double t6630;
  double t6631;
  double t6632;
  double t6633;
  double t6634;
  double t3633;
  double t3651;
  double t3656;
  double t3662;
  double t3664;
  double t6978;
  double t6980;
  double t6987;
  double t6989;
  double t6991;
  double t4851;
  double t5049;
  double t5158;
  double t5221;
  double t5231;
  double t6721;
  double t6726;
  double t6732;
  double t6747;
  double t6758;
  double t7035;
  double t7039;
  double t7040;
  double t7041;
  double t7045;
  double t7050;
  double t7051;
  double t7052;
  double t7056;
  double t6071;
  double t6084;
  double t6129;
  double t6154;
  double t6160;
  double t6874;
  double t6876;
  double t6880;
  double t6891;
  double t6892;
  double t7110;
  double t7111;
  double t7116;
  double t7118;
  double t7123;
  double t7126;
  double t7128;
  double t7135;
  double t7139;
  double t6430;
  double t6924;
  double t7194;
  double t7351;
  double t7354;
  double t7355;
  double t7363;
  double t7368;
  double t7341;
  double t7342;
  double t7343;
  double t6513;
  double t6514;
  double t6521;
  double t6522;
  double t6526;
  double t6612;
  double t6616;
  double t6617;
  double t6622;
  double t6624;
  double t3527;
  double t3532;
  double t3554;
  double t3594;
  double t3606;
  double t6960;
  double t6962;
  double t6963;
  double t6965;
  double t6969;
  double t7241;
  double t7243;
  double t7247;
  double t7250;
  double t7254;
  double t4784;
  double t6716;
  double t7012;
  double t7015;
  double t7026;
  double t7027;
  double t7032;
  double t7290;
  double t7291;
  double t7292;
  double t7294;
  double t7296;
  double t7298;
  double t7305;
  double t7306;
  double t7309;
  double t5916;
  double t5944;
  double t5962;
  double t5963;
  double t5981;
  double t6853;
  double t6859;
  double t6861;
  double t6863;
  double t6865;
  double t7085;
  double t7086;
  double t7088;
  double t7091;
  double t7094;
  double t7097;
  double t7098;
  double t7102;
  double t7107;
  double t6473;
  double t6926;
  double t7206;
  double t7369;
  double t7443;
  double t7445;
  double t7447;
  double t7493;
  double t7498;
  double t674;
  t147 = Cos(var1[4]);
  t94 = Cos(var1[5]);
  t136 = Sin(var1[4]);
  t173 = Sin(var1[5]);
  t421 = Cos(var1[3]);
  t143 = -1.*t94*t136;
  t181 = -1.*t147*t173;
  t250 = t143 + t181;
  t30 = Sin(var1[3]);
  t438 = t147*t94;
  t450 = -1.*t136*t173;
  t474 = t438 + t450;
  t12 = Sin(var1[2]);
  t325 = t30*t250;
  t492 = t421*t474;
  t529 = t325 + t492;
  t559 = -1.*t12*t529;
  t600 = Cos(var1[2]);
  t608 = t421*t250;
  t609 = -1.*t30*t474;
  t617 = t608 + t609;
  t638 = t600*t617;
  t661 = t559 + t638;
  t739 = -1.*t94;
  t747 = 1. + t739;
  t774 = -1.3127*t747;
  t783 = -1.3127*t94;
  t834 = -0.06*t173;
  t836 = t774 + t783 + t834;
  t1193 = t94*t136;
  t1196 = t147*t173;
  t1216 = t1193 + t1196;
  t1111 = 0.9063*t94;
  t1127 = t94*t836;
  t1154 = 0.06*t94*t173;
  t1170 = t1111 + t1127 + t1154;
  t1361 = -1.*t147*t94;
  t1392 = t136*t173;
  t1396 = t1361 + t1392;
  t1690 = -1.*t147;
  t1701 = 1. + t1690;
  t1710 = -0.9063*t1701;
  t1715 = -0.06*t94*t136;
  t1718 = t147*t836;
  t1721 = t1710 + t1715 + t1718;
  t1796 = 0.06*t147*t94;
  t1800 = 0.9063*t136;
  t1829 = t136*t836;
  t1832 = t1796 + t1800 + t1829;
  t1921 = -0.06*t147*t173;
  t1922 = t1715 + t1921;
  t1944 = -0.06*t147*t94;
  t1946 = 0.06*t136*t173;
  t1967 = t1944 + t1946;
  t1224 = -1.*t30*t1216;
  t1229 = t1224 + t492;
  t1232 = t600*t1229;
  t1233 = t421*t1216;
  t1261 = t30*t474;
  t1268 = t1233 + t1261;
  t1271 = -1.*t12*t1268;
  t1286 = t1232 + t1271;
  t2015 = 0.4999*t474;
  t1326 = -1.*t30*t250;
  t1443 = t421*t1396;
  t1450 = t1326 + t1443;
  t1511 = t600*t1450;
  t1516 = t30*t1396;
  t1529 = t608 + t1516;
  t1533 = -1.*t12*t1529;
  t1599 = t1511 + t1533;
  t2138 = t600*t529;
  t2139 = t12*t617;
  t2173 = t2138 + t2139;
  t2345 = -1.*t600*t529;
  t2367 = -1.*t12*t617;
  t2377 = t2345 + t2367;
  t2402 = t12*t1229;
  t2403 = t600*t1268;
  t2437 = t2402 + t2403;
  t2590 = t12*t1450;
  t2618 = t600*t1529;
  t2635 = t2590 + t2618;
  t2796 = 0.4999*t30;
  t2809 = t30*t1721;
  t2815 = t421*t1832;
  t2829 = t2796 + t2809 + t2815;
  t2842 = -1.*t421;
  t2848 = 1. + t2842;
  t2852 = -0.4999*t2848;
  t2861 = t421*t1721;
  t2864 = -1.*t30*t1832;
  t2903 = t2852 + t2861 + t2864;
  t2997 = -1.*t30*t1922;
  t2999 = t421*t1967;
  t3001 = t2997 + t2999;
  t3013 = t421*t1922;
  t3016 = t30*t1967;
  t3064 = t3013 + t3016;
  t687 = Power(t94,2);
  t702 = -0.06*t687;
  t712 = 0.9063*t173;
  t838 = t836*t173;
  t846 = t702 + t712 + t838;
  t3463 = -1.*t421*t474;
  t3484 = t1326 + t3463;
  t3508 = t12*t3484;
  t3510 = t3508 + t638;
  t905 = -0.9063*t173;
  t908 = -1.*t836*t173;
  t921 = Power(t173,2);
  t942 = -0.06*t921;
  t976 = 0. + t905 + t908 + t942;
  t1723 = -1.*t1721*t250;
  t1744 = 0.4999*t1216;
  t1839 = -1.*t1832*t474;
  t1848 = t1723 + t1744 + t1839;
  t1901 = 0.4999*t250;
  t1917 = t1721*t250;
  t1942 = t1922*t1216;
  t1943 = t1832*t474;
  t1972 = t474*t1967;
  t1986 = t1901 + t1917 + t1942 + t1943 + t1972;
  t2012 = -1.*t1832*t250;
  t2044 = -1.*t1922*t474;
  t2049 = -1.*t250*t1967;
  t2056 = -1.*t1721*t1396;
  t2065 = t2012 + t2015 + t2044 + t2049 + t2056;
  t3533 = -1.*t421*t1216;
  t3539 = t3533 + t609;
  t3542 = t12*t3539;
  t3549 = t1232 + t3542;
  t2099 = t1832*t1216;
  t2104 = t1721*t474;
  t2114 = t2099 + t2015 + t2104;
  t3568 = -1.*t421*t250;
  t3575 = -1.*t30*t1396;
  t3576 = t3568 + t3575;
  t3583 = t12*t3576;
  t3585 = t1511 + t3583;
  t2238 = -1.*t12*t1229;
  t2510 = -1.*t12*t1450;
  t3839 = t600*t3484;
  t3840 = t3839 + t2367;
  t2834 = -1.*t2829*t529;
  t2931 = -1.*t2903*t617;
  t2947 = t2834 + t2931;
  t3947 = 0.4999*t421;
  t3950 = t3947 + t2861 + t2864;
  t3953 = -0.4999*t30;
  t3958 = -1.*t30*t1721;
  t3965 = -1.*t421*t1832;
  t3968 = t3953 + t3958 + t3965;
  t2975 = t2829*t529;
  t2995 = t2903*t617;
  t3009 = t1229*t3001;
  t3078 = t1268*t3064;
  t3124 = t2975 + t2995 + t3009 + t3078;
  t3155 = t2903*t1229;
  t3157 = t2829*t1268;
  t3162 = t3155 + t3157;
  t3252 = -1.*t617*t3001;
  t3272 = -1.*t529*t3064;
  t3278 = -1.*t2903*t1450;
  t3287 = -1.*t2829*t1529;
  t3289 = t3252 + t3272 + t3278 + t3287;
  t4041 = -1.*t421*t1922;
  t4062 = -1.*t30*t1967;
  t4071 = t4041 + t4062;
  t4804 = -0.9063*t136;
  t4805 = -1.*t136*t836;
  t4818 = t1944 + t4804 + t4805;
  t4831 = 0.9063*t147;
  t4837 = t4831 + t1715 + t1718;
  t4954 = 0.06*t94*t136;
  t4986 = 0.06*t147*t173;
  t4994 = t4954 + t4986;
  t4640 = t30*t1216;
  t4658 = t4640 + t1443;
  t4671 = t600*t4658;
  t4692 = t1233 + t3575;
  t4702 = t12*t4692;
  t4750 = t4671 + t4702;
  t5494 = t421*t4837;
  t5510 = t30*t4818;
  t5513 = t5494 + t5510;
  t5465 = -1.*t30*t4837;
  t5473 = t421*t4818;
  t5485 = t5465 + t5473;
  t5699 = t30*t4994;
  t5715 = t5699 + t2999;
  t5728 = t421*t4994;
  t5729 = t5728 + t4062;
  t4589 = 0.03428571*var2[5]*t2635;
  t4621 = 1.142857*t1170*t2173;
  t5858 = -0.06*t94;
  t5864 = 0. + t5858;
  t4754 = 1.142857*t1170*t4750;
  t4766 = 1.142857*t846*t2635;
  t4770 = 1.142857*t976*t2635;
  t5945 = t5864*t94;
  t5946 = 0.06*t687;
  t5955 = t5945 + t5946 + t905 + t908 + t942;
  t4852 = 1.142857*t2065*t2173;
  t4906 = t1832*t250;
  t5985 = t5864*t136;
  t5989 = t5985 + t1921;
  t4938 = t1922*t474;
  t5005 = t4994*t474;
  t6005 = t147*t5864;
  t6008 = t6005 + t1946;
  t5008 = t250*t1967;
  t5013 = t1216*t1967;
  t5019 = 0.4999*t1396;
  t5033 = t1721*t1396;
  t5057 = -1.*t250*t1922;
  t5059 = -1.*t250*t4994;
  t5066 = -1.*t1721*t1216;
  t5071 = -1.*t474*t1967;
  t5125 = -1.*t1832*t1396;
  t5130 = -1.*t1967*t1396;
  t5177 = 1.142857*t2114*t4750;
  t5179 = 1.142857*t1848*t2635;
  t5228 = 1.142857*t1986*t2635;
  t5295 = Power(t2173,2);
  t5308 = 2.285714*t5295;
  t5314 = 2.285714*t2173*t4750;
  t5316 = 2.285714*t2437*t2635;
  t5320 = Power(t2635,2);
  t5321 = 2.285714*t5320;
  t5323 = t5308 + t5314 + t5316 + t5321;
  t5333 = -0.5*var2[0]*t5323;
  t5339 = 2.285714*t661*t2173;
  t5354 = -1.*t12*t4658;
  t5355 = t600*t4692;
  t5357 = t5354 + t5355;
  t5369 = 1.142857*t2173*t5357;
  t5372 = 1.142857*t661*t4750;
  t5373 = 1.142857*t1286*t2635;
  t5378 = 1.142857*t2437*t1599;
  t5414 = 2.285714*t2635*t1599;
  t5417 = t5339 + t5369 + t5372 + t5373 + t5378 + t5414;
  t5436 = -0.5*var2[1]*t5417;
  t5439 = 1.142857*t3162*t4750;
  t5441 = 1.142857*t2947*t2635;
  t5543 = 1.142857*t3124*t2635;
  t6162 = -1.*t30*t5989;
  t6172 = t421*t6008;
  t6176 = t6162 + t6172;
  t6181 = t421*t5989;
  t6184 = t30*t6008;
  t6196 = t6181 + t6184;
  t5598 = 1.142857*t2173*t3289;
  t5698 = t617*t3001;
  t5717 = t1268*t5715;
  t5732 = t1229*t5729;
  t5734 = t529*t3064;
  t5736 = t2903*t1450;
  t5740 = t2829*t1529;
  t5766 = -1.*t529*t5715;
  t5767 = -1.*t617*t5729;
  t5776 = -1.*t3001*t1450;
  t5789 = -1.*t2829*t4658;
  t5791 = -1.*t2903*t4692;
  t5815 = -1.*t3064*t1529;
  t6433 = 1.142857*t846*t2173;
  t6442 = 1.142857*t976*t2173;
  t6450 = 1.142857*t1170*t2437;
  t6462 = 1.142857*t1170*t2635;
  t6463 = t6433 + t6442 + t6450 + t6462;
  t6395 = 1.142857*t1848*t2173;
  t6402 = 1.142857*t1986*t2173;
  t6419 = 1.142857*t2065*t2437;
  t6420 = 1.142857*t2114*t2635;
  t6425 = t6395 + t6402 + t6419 + t6420;
  t6330 = 2.285714*t2173*t2437;
  t6333 = 2.285714*t2173*t2635;
  t6335 = t6330 + t6333;
  t6341 = 1.142857*t661*t2437;
  t6343 = 1.142857*t2173*t1286;
  t6347 = 1.142857*t661*t2635;
  t6351 = 1.142857*t2173*t1599;
  t6353 = t6341 + t6343 + t6347 + t6351;
  t6371 = 1.142857*t2173*t2947;
  t6373 = 1.142857*t2173*t3124;
  t6383 = 1.142857*t3162*t2635;
  t6385 = 1.142857*t2437*t3289;
  t6386 = t6371 + t6373 + t6383 + t6385;
  t2293 = -1.*t600*t1268;
  t2301 = t2238 + t2293;
  t2517 = -1.*t600*t1529;
  t2520 = t2510 + t2517;
  t2305 = 1.142857*t2173*t2301;
  t2440 = 1.142857*t2377*t2437;
  t2455 = 2.285714*t661*t1286;
  t2570 = 1.142857*t2173*t2520;
  t2655 = 1.142857*t2377*t2635;
  t2656 = 2.285714*t661*t1599;
  t2662 = t2305 + t2440 + t2455 + t2570 + t2655 + t2656;
  t3772 = t600*t3539;
  t3787 = t2238 + t3772;
  t3892 = t600*t3576;
  t3898 = t2510 + t3892;
  t3824 = 1.142857*t2173*t3787;
  t3829 = 1.142857*t661*t3549;
  t3871 = 1.142857*t3840*t2437;
  t3881 = 1.142857*t3510*t1286;
  t3900 = 1.142857*t2173*t3898;
  t3904 = 1.142857*t661*t3585;
  t3919 = 1.142857*t3840*t2635;
  t3920 = 1.142857*t3510*t1599;
  t3925 = t3824 + t3829 + t3871 + t3881 + t3900 + t3904 + t3919 + t3920;
  t3943 = -1.*t2903*t3484;
  t3952 = -1.*t3950*t529;
  t3971 = -1.*t3968*t617;
  t3972 = -1.*t2829*t617;
  t3995 = t3943 + t3952 + t3971 + t3972;
  t4012 = t2903*t3484;
  t4020 = t3950*t529;
  t4026 = t3968*t617;
  t4029 = t2829*t617;
  t4030 = t3539*t3001;
  t4039 = t1268*t3001;
  t4089 = t1229*t4071;
  t4108 = t1229*t3064;
  t4117 = t4012 + t4020 + t4026 + t4029 + t4030 + t4039 + t4089 + t4108;
  t4186 = t3968*t1229;
  t4203 = t2829*t1229;
  t4212 = t2903*t3539;
  t4217 = t3950*t1268;
  t4265 = t4186 + t4203 + t4212 + t4217;
  t4282 = -1.*t3484*t3001;
  t4300 = -1.*t529*t3001;
  t4368 = -1.*t617*t4071;
  t4370 = -1.*t617*t3064;
  t4397 = -1.*t3968*t1450;
  t4427 = -1.*t2829*t1450;
  t4428 = -1.*t2903*t3576;
  t4437 = -1.*t3950*t1529;
  t4522 = t4282 + t4300 + t4368 + t4370 + t4397 + t4427 + t4428 + t4437;
  t4819 = -1.*t4818*t250;
  t4839 = -1.*t4837*t474;
  t4849 = t4819 + t2012 + t2015 + t4839 + t2056;
  t4859 = t4818*t250;
  t4934 = t4837*t474;
  t5041 = t4859 + t4906 + t4934 + t4938 + t5005 + t5008 + t5013 + t5019 + t5033;
  t5051 = -1.*t4837*t250;
  t5086 = -1.*t4818*t1396;
  t5148 = t1901 + t5051 + t5057 + t5059 + t5066 + t5071 + t5086 + t5125 + t5130;
  t5181 = t4837*t1216;
  t5205 = t4818*t474;
  t5213 = t1901 + t1917 + t5181 + t5205 + t1943;
  t5489 = t5485*t1229;
  t5519 = t5513*t1268;
  t5520 = t2975 + t5489 + t2995 + t5519;
  t5554 = -1.*t5513*t529;
  t5577 = -1.*t5485*t617;
  t5582 = t5554 + t5577 + t3278 + t3287;
  t5606 = t5513*t529;
  t5617 = t5485*t617;
  t5741 = t5606 + t5617 + t5698 + t5717 + t5732 + t5734 + t5736 + t5740;
  t5772 = -1.*t5485*t1450;
  t5802 = -1.*t5513*t1529;
  t5821 = t5766 + t5767 + t5772 + t5776 + t5789 + t5791 + t5802 + t5815;
  t6694 = 0.03428571*var2[5]*t1599;
  t5850 = -0.9063*t94;
  t5857 = -1.*t94*t836;
  t5866 = -1.*t5864*t173;
  t5895 = -0.12*t94*t173;
  t5912 = t5850 + t5857 + t5866 + t5895;
  t6697 = 1.142857*t1170*t661;
  t5920 = t5864*t173;
  t5940 = 0.12*t94*t173;
  t5942 = t1111 + t1127 + t5920 + t5940;
  t6711 = 1.142857*t1170*t5357;
  t6712 = 1.142857*t846*t1599;
  t6715 = 1.142857*t976*t1599;
  t5999 = -1.*t5989*t474;
  t6010 = -1.*t250*t6008;
  t6011 = t2012 + t2015 + t5999 + t6010 + t2056;
  t6725 = 1.142857*t2065*t661;
  t6076 = t5989*t474;
  t6077 = t250*t6008;
  t6082 = t4906 + t6076 + t4938 + t5005 + t6077 + t5008 + t5013 + t5019 + t5033;
  t6090 = -1.*t250*t5989;
  t6091 = -1.*t6008*t1396;
  t6115 = t1901 + t6090 + t5057 + t5059 + t5066 + t5071 + t5125 + t6091 + t5130;
  t6733 = 1.142857*t2114*t5357;
  t6734 = 1.142857*t1848*t1599;
  t6131 = t5989*t1216;
  t6138 = t474*t6008;
  t6147 = t1901 + t1917 + t6131 + t1943 + t6138;
  t6757 = 1.142857*t1986*t1599;
  t6763 = -0.5*var2[0]*t5417;
  t6770 = Power(t661,2);
  t6783 = 2.285714*t6770;
  t6789 = 2.285714*t661*t5357;
  t6795 = 2.285714*t1286*t1599;
  t6796 = Power(t1599,2);
  t6800 = 2.285714*t6796;
  t6802 = t6783 + t6789 + t6795 + t6800;
  t6803 = -0.5*var2[1]*t6802;
  t6806 = 1.142857*t3162*t5357;
  t6807 = 1.142857*t2947*t1599;
  t6177 = t1229*t6176;
  t6202 = t1268*t6196;
  t6205 = t2975 + t2995 + t6177 + t6202;
  t6815 = 1.142857*t3124*t1599;
  t6211 = -1.*t617*t6176;
  t6212 = -1.*t529*t6196;
  t6213 = t6211 + t6212 + t3278 + t3287;
  t6824 = 1.142857*t661*t3289;
  t6223 = t617*t6176;
  t6229 = t529*t6196;
  t6234 = t6223 + t6229 + t5698 + t5717 + t5732 + t5734 + t5736 + t5740;
  t6249 = -1.*t6176*t1450;
  t6255 = -1.*t6196*t1529;
  t6256 = t5766 + t5767 + t6249 + t5776 + t5789 + t5791 + t6255 + t5815;
  t6366 = -0.5*var2[5]*t6353;
  t2948 = 1.142857*t661*t2947;
  t3147 = 1.142857*t661*t3124;
  t3174 = 1.142857*t3162*t1599;
  t3299 = 1.142857*t1286*t3289;
  t3305 = t2948 + t3147 + t3174 + t3299;
  t1872 = 1.142857*t1848*t661;
  t1999 = 1.142857*t1986*t661;
  t2079 = 1.142857*t2065*t1286;
  t2115 = 1.142857*t2114*t1599;
  t2128 = t1872 + t1999 + t2079 + t2115;
  t866 = 1.142857*t846*t661;
  t992 = 1.142857*t976*t661;
  t1290 = 1.142857*t1170*t1286;
  t1636 = 1.142857*t1170*t1599;
  t1655 = t866 + t992 + t1290 + t1636;
  t1670 = -0.5*var2[4]*t1655;
  t2136 = -0.5*var2[3]*t2128;
  t6919 = t2455 + t2656;
  t3344 = -0.5*var2[2]*t3305;
  t6579 = 1.142857*t2377*t2947;
  t6588 = 1.142857*t2377*t3124;
  t6589 = 1.142857*t3162*t2520;
  t6593 = 1.142857*t2301*t3289;
  t6598 = t6579 + t6588 + t6589 + t6593;
  t3997 = 1.142857*t2173*t3995;
  t4007 = 1.142857*t3510*t2947;
  t4160 = 1.142857*t2173*t4117;
  t4162 = 1.142857*t3510*t3124;
  t4176 = 1.142857*t3162*t3585;
  t4273 = 1.142857*t4265*t2635;
  t4274 = 1.142857*t3549*t3289;
  t4561 = 1.142857*t2437*t4522;
  t4568 = t3997 + t4007 + t4160 + t4162 + t4176 + t4273 + t4274 + t4561;
  t6649 = 1.142857*t661*t3995;
  t6650 = 1.142857*t3840*t2947;
  t6656 = 1.142857*t661*t4117;
  t6658 = 1.142857*t3840*t3124;
  t6664 = 1.142857*t3162*t3898;
  t6674 = 1.142857*t4265*t1599;
  t6678 = 1.142857*t3787*t3289;
  t6684 = 1.142857*t1286*t4522;
  t6685 = t6649 + t6650 + t6656 + t6658 + t6664 + t6674 + t6678 + t6684;
  t5542 = 1.142857*t5520*t2635;
  t5597 = 1.142857*t2173*t5582;
  t5765 = 1.142857*t2173*t5741;
  t5823 = 1.142857*t2437*t5821;
  t5825 = t5439 + t5441 + t5542 + t5543 + t5597 + t5598 + t5765 + t5823;
  t6814 = 1.142857*t5520*t1599;
  t6816 = 1.142857*t661*t5582;
  t6828 = 1.142857*t661*t5741;
  t6843 = 1.142857*t1286*t5821;
  t6844 = t6806 + t6807 + t6814 + t6815 + t6816 + t6824 + t6828 + t6843;
  t6208 = 1.142857*t6205*t2635;
  t6220 = 1.142857*t2173*t6213;
  t6238 = 1.142857*t2173*t6234;
  t6301 = 1.142857*t2437*t6256;
  t6311 = t5439 + t5441 + t6208 + t5543 + t6220 + t5598 + t6238 + t6301;
  t6894 = 1.142857*t6205*t1599;
  t6896 = 1.142857*t661*t6213;
  t6904 = 1.142857*t661*t6234;
  t6908 = 1.142857*t1286*t6256;
  t6911 = t6806 + t6807 + t6894 + t6815 + t6896 + t6824 + t6904 + t6908;
  t6387 = -0.5*var2[5]*t6386;
  t6922 = -0.5*var2[5]*t3305;
  t7199 = 1.142857*t1170*t2947;
  t7200 = 1.142857*t976*t3162;
  t7202 = 1.142857*t1170*t3124;
  t7203 = 1.142857*t846*t3289;
  t7204 = t7199 + t7200 + t7202 + t7203;
  t7187 = 1.142857*t2065*t2947;
  t7188 = 1.142857*t1986*t3162;
  t7191 = 1.142857*t2114*t3124;
  t7192 = 1.142857*t1848*t3289;
  t7193 = t7187 + t7188 + t7191 + t7192;
  t7182 = 2.285714*t3162*t3124;
  t7184 = 2.285714*t2947*t3289;
  t7185 = t7182 + t7184;
  t6530 = 1.142857*t1848*t2377;
  t6539 = 1.142857*t1986*t2377;
  t6541 = 1.142857*t2065*t2301;
  t6546 = 1.142857*t2114*t2520;
  t6550 = t6530 + t6539 + t6541 + t6546;
  t6630 = 1.142857*t1848*t3840;
  t6631 = 1.142857*t1986*t3840;
  t6632 = 1.142857*t2065*t3787;
  t6633 = 1.142857*t2114*t3898;
  t6634 = t6630 + t6631 + t6632 + t6633;
  t3633 = 1.142857*t1848*t3510;
  t3651 = 1.142857*t1986*t3510;
  t3656 = 1.142857*t2065*t3549;
  t3662 = 1.142857*t2114*t3585;
  t3664 = t3633 + t3651 + t3656 + t3662;
  t6978 = 1.142857*t2065*t3995;
  t6980 = 1.142857*t1986*t4265;
  t6987 = 1.142857*t2114*t4117;
  t6989 = 1.142857*t1848*t4522;
  t6991 = t6978 + t6980 + t6987 + t6989;
  t4851 = 1.142857*t4849*t2173;
  t5049 = 1.142857*t5041*t2173;
  t5158 = 1.142857*t5148*t2437;
  t5221 = 1.142857*t5213*t2635;
  t5231 = t4851 + t4852 + t5049 + t5158 + t5177 + t5179 + t5221 + t5228;
  t6721 = 1.142857*t4849*t661;
  t6726 = 1.142857*t5041*t661;
  t6732 = 1.142857*t5148*t1286;
  t6747 = 1.142857*t5213*t1599;
  t6758 = t6721 + t6725 + t6726 + t6732 + t6733 + t6734 + t6747 + t6757;
  t7035 = 1.142857*t5148*t2947;
  t7039 = 1.142857*t1986*t5520;
  t7040 = 1.142857*t5041*t3162;
  t7041 = 1.142857*t5213*t3124;
  t7045 = 1.142857*t2065*t5582;
  t7050 = 1.142857*t4849*t3289;
  t7051 = 1.142857*t2114*t5741;
  t7052 = 1.142857*t1848*t5821;
  t7056 = t7035 + t7039 + t7040 + t7041 + t7045 + t7050 + t7051 + t7052;
  t6071 = 1.142857*t6011*t2173;
  t6084 = 1.142857*t6082*t2173;
  t6129 = 1.142857*t6115*t2437;
  t6154 = 1.142857*t6147*t2635;
  t6160 = t6071 + t4852 + t6084 + t6129 + t5177 + t5179 + t6154 + t5228;
  t6874 = 1.142857*t6011*t661;
  t6876 = 1.142857*t6082*t661;
  t6880 = 1.142857*t6115*t1286;
  t6891 = 1.142857*t6147*t1599;
  t6892 = t6874 + t6725 + t6876 + t6880 + t6733 + t6734 + t6891 + t6757;
  t7110 = 1.142857*t6115*t2947;
  t7111 = 1.142857*t6082*t3162;
  t7116 = 1.142857*t1986*t6205;
  t7118 = 1.142857*t6147*t3124;
  t7123 = 1.142857*t2065*t6213;
  t7126 = 1.142857*t6011*t3289;
  t7128 = 1.142857*t2114*t6234;
  t7135 = 1.142857*t1848*t6256;
  t7139 = t7110 + t7111 + t7116 + t7118 + t7123 + t7126 + t7128 + t7135;
  t6430 = -0.5*var2[5]*t6425;
  t6924 = -0.5*var2[5]*t2128;
  t7194 = -0.5*var2[5]*t7193;
  t7351 = 1.142857*t976*t2114;
  t7354 = 1.142857*t1170*t1848;
  t7355 = 1.142857*t1170*t1986;
  t7363 = 1.142857*t846*t2065;
  t7368 = t7351 + t7354 + t7355 + t7363;
  t7341 = 2.285714*t2114*t1986;
  t7342 = 2.285714*t1848*t2065;
  t7343 = t7341 + t7342;
  t6513 = 1.142857*t846*t2377;
  t6514 = 1.142857*t976*t2377;
  t6521 = 1.142857*t1170*t2301;
  t6522 = 1.142857*t1170*t2520;
  t6526 = t6513 + t6514 + t6521 + t6522;
  t6612 = 1.142857*t846*t3840;
  t6616 = 1.142857*t976*t3840;
  t6617 = 1.142857*t1170*t3787;
  t6622 = 1.142857*t1170*t3898;
  t6624 = t6612 + t6616 + t6617 + t6622;
  t3527 = 1.142857*t846*t3510;
  t3532 = 1.142857*t976*t3510;
  t3554 = 1.142857*t1170*t3549;
  t3594 = 1.142857*t1170*t3585;
  t3606 = t3527 + t3532 + t3554 + t3594;
  t6960 = 1.142857*t1170*t3995;
  t6962 = 1.142857*t976*t4265;
  t6963 = 1.142857*t1170*t4117;
  t6965 = 1.142857*t846*t4522;
  t6969 = t6960 + t6962 + t6963 + t6965;
  t7241 = 1.142857*t976*t5213;
  t7243 = 1.142857*t1170*t4849;
  t7247 = 1.142857*t1170*t5041;
  t7250 = 1.142857*t846*t5148;
  t7254 = t7241 + t7243 + t7247 + t7250;
  t4784 = t4621 + t4754 + t4766 + t4770;
  t6716 = t6697 + t6711 + t6712 + t6715;
  t7012 = 1.142857*t976*t5520;
  t7015 = 1.142857*t1170*t5582;
  t7026 = 1.142857*t1170*t5741;
  t7027 = 1.142857*t846*t5821;
  t7032 = t7012 + t7015 + t7026 + t7027;
  t7290 = 1.142857*t5912*t2114;
  t7291 = 1.142857*t5955*t1848;
  t7292 = 1.142857*t976*t6147;
  t7294 = 1.142857*t5955*t1986;
  t7296 = 1.142857*t1170*t6011;
  t7298 = 1.142857*t5942*t2065;
  t7305 = 1.142857*t1170*t6082;
  t7306 = 1.142857*t846*t6115;
  t7309 = t7290 + t7291 + t7292 + t7294 + t7296 + t7298 + t7305 + t7306;
  t5916 = 1.142857*t5912*t2173;
  t5944 = 1.142857*t5942*t2173;
  t5962 = 1.142857*t5955*t2437;
  t5963 = 1.142857*t5955*t2635;
  t5981 = t5916 + t4621 + t5944 + t5962 + t4754 + t4766 + t4770 + t5963;
  t6853 = 1.142857*t5912*t661;
  t6859 = 1.142857*t5942*t661;
  t6861 = 1.142857*t5955*t1286;
  t6863 = 1.142857*t5955*t1599;
  t6865 = t6853 + t6697 + t6859 + t6861 + t6711 + t6712 + t6715 + t6863;
  t7085 = 1.142857*t5955*t2947;
  t7086 = 1.142857*t5912*t3162;
  t7088 = 1.142857*t976*t6205;
  t7091 = 1.142857*t5955*t3124;
  t7094 = 1.142857*t1170*t6213;
  t7097 = 1.142857*t5942*t3289;
  t7098 = 1.142857*t1170*t6234;
  t7102 = 1.142857*t846*t6256;
  t7107 = t7085 + t7086 + t7088 + t7091 + t7094 + t7097 + t7098 + t7102;
  t6473 = -0.5*var2[5]*t6463;
  t6926 = -0.5*var2[5]*t1655;
  t7206 = -0.5*var2[5]*t7204;
  t7369 = -0.5*var2[5]*t7368;
  t7443 = 2.285714*t1170*t846;
  t7445 = 2.285714*t1170*t976;
  t7447 = t7443 + t7445;
  t7493 = 0.03428571*var2[0]*t2635;
  t7498 = 0.03428571*var2[1]*t1599;
  t674 = 0.03428571*var2[5]*t661;
  p_output1[0]=(t1670 + t2136 + t3344 + t674 - 0.5*(2.285714*t1286*t2173 + 2.285714*t1599*t2173 + 2.285714*t2437*t661 + 2.285714*t2635*t661)*var2[0] - 0.5*t2662*var2[1])*var2[5];
  p_output1[1]=var2[5]*(-0.5*(2.285714*t2437*t3510 + 2.285714*t2635*t3510 + 2.285714*t2173*t3549 + 2.285714*t2173*t3585)*var2[0] - 0.5*t3925*var2[1] - 0.5*t4568*var2[2] - 0.5*t3664*var2[3] - 0.5*t3606*var2[4] + 0.03428571*t3510*var2[5]);
  p_output1[2]=(t4589 + t5333 + t5436 - 0.5*t5825*var2[2] - 0.5*t5231*var2[3] - 0.5*t4784*var2[4])*var2[5];
  p_output1[3]=(t4589 + t5333 + t5436 - 0.5*t6311*var2[2] - 0.5*t6160*var2[3] - 0.5*t5981*var2[4])*var2[5];
  p_output1[4]=-0.5*t6335*var2[5];
  p_output1[5]=t6366;
  p_output1[6]=t6387;
  p_output1[7]=t6430;
  p_output1[8]=t6473;
  p_output1[9]=-0.5*t6335*var2[0] - 0.5*t6353*var2[1] - 0.5*t6386*var2[2] - 0.5*t6425*var2[3] - 0.5*t6463*var2[4] + 0.06857142*t2173*var2[5];
  p_output1[10]=var2[5]*(-0.5*t2662*var2[0] - 0.5*(2.285714*t1286*t2377 + 2.285714*t1599*t2377 + 2.285714*t2301*t661 + 2.285714*t2520*t661)*var2[1] - 0.5*t6598*var2[2] - 0.5*t6550*var2[3] - 0.5*t6526*var2[4] + 0.03428571*t2377*var2[5]);
  p_output1[11]=var2[5]*(-0.5*t3925*var2[0] - 0.5*(2.285714*t1286*t3840 + 2.285714*t1599*t3840 + 2.285714*t3787*t661 + 2.285714*t3898*t661)*var2[1] - 0.5*t6685*var2[2] - 0.5*t6634*var2[3] - 0.5*t6624*var2[4] + 0.03428571*t3840*var2[5]);
  p_output1[12]=(t6694 + t6763 + t6803 - 0.5*t6844*var2[2] - 0.5*t6758*var2[3] - 0.5*t6716*var2[4])*var2[5];
  p_output1[13]=(t6694 + t6763 + t6803 - 0.5*t6911*var2[2] - 0.5*t6892*var2[3] - 0.5*t6865*var2[4])*var2[5];
  p_output1[14]=t6366;
  p_output1[15]=-0.5*t6919*var2[5];
  p_output1[16]=t6922;
  p_output1[17]=t6924;
  p_output1[18]=t6926;
  p_output1[19]=t1670 + t2136 + t3344 - 0.5*t6353*var2[0] - 0.5*t6919*var2[1] + 0.06857142*t661*var2[5];
  p_output1[20]=(-0.5*t3305*var2[0] - 0.5*t6598*var2[1])*var2[5];
  p_output1[21]=var2[5]*(-0.5*t4568*var2[0] - 0.5*t6685*var2[1] - 0.5*(2.285714*t3289*t3995 + 2.285714*t3162*t4117 + 2.285714*t3124*t4265 + 2.285714*t2947*t4522)*var2[2] - 0.5*t6991*var2[3] - 0.5*t6969*var2[4] + 0.03428571*t4522*var2[5]);
  p_output1[22]=var2[5]*(-0.5*t5825*var2[0] - 0.5*t6844*var2[1] - 0.5*(2.285714*t3124*t5520 + 2.285714*t3289*t5582 + 2.285714*t3162*t5741 + 2.285714*t2947*t5821)*var2[2] - 0.5*t7056*var2[3] - 0.5*t7032*var2[4] + 0.03428571*t5821*var2[5]);
  p_output1[23]=var2[5]*(-0.5*t6311*var2[0] - 0.5*t6911*var2[1] - 0.5*(2.285714*t3124*t6205 + 2.285714*t3289*t6213 + 2.285714*t3162*t6234 + 2.285714*t2947*t6256)*var2[2] - 0.5*t7139*var2[3] - 0.5*t7107*var2[4] + 0.03428571*t6256*var2[5]);
  p_output1[24]=t6387;
  p_output1[25]=t6922;
  p_output1[26]=-0.5*t7185*var2[5];
  p_output1[27]=t7194;
  p_output1[28]=t7206;
  p_output1[29]=-0.5*t6386*var2[0] - 0.5*t3305*var2[1] - 0.5*t7185*var2[2] - 0.5*t7193*var2[3] - 0.5*t7204*var2[4] + 0.06857142*t3289*var2[5];
  p_output1[30]=(-0.5*t2128*var2[0] - 0.5*t6550*var2[1])*var2[5];
  p_output1[31]=(-0.5*t3664*var2[0] - 0.5*t6634*var2[1] - 0.5*t6991*var2[2])*var2[5];
  p_output1[32]=var2[5]*(-0.5*t5231*var2[0] - 0.5*t6758*var2[1] - 0.5*t7056*var2[2] - 0.5*(2.285714*t2065*t4849 + 2.285714*t2114*t5041 + 2.285714*t1848*t5148 + 2.285714*t1986*t5213)*var2[3] - 0.5*t7254*var2[4] + 0.03428571*t5148*var2[5]);
  p_output1[33]=var2[5]*(-0.5*t6160*var2[0] - 0.5*t6892*var2[1] - 0.5*t7139*var2[2] - 0.5*(2.285714*t2065*t6011 + 2.285714*t2114*t6082 + 2.285714*t1848*t6115 + 2.285714*t1986*t6147)*var2[3] - 0.5*t7309*var2[4] + 0.03428571*t6115*var2[5]);
  p_output1[34]=t6430;
  p_output1[35]=t6924;
  p_output1[36]=t7194;
  p_output1[37]=-0.5*t7343*var2[5];
  p_output1[38]=t7369;
  p_output1[39]=-0.5*t6425*var2[0] - 0.5*t2128*var2[1] - 0.5*t7193*var2[2] - 0.5*t7343*var2[3] - 0.5*t7368*var2[4] + 0.06857142*t2065*var2[5];
  p_output1[40]=(-0.5*t1655*var2[0] - 0.5*t6526*var2[1])*var2[5];
  p_output1[41]=(-0.5*t3606*var2[0] - 0.5*t6624*var2[1] - 0.5*t6969*var2[2])*var2[5];
  p_output1[42]=(-0.5*t4784*var2[0] - 0.5*t6716*var2[1] - 0.5*t7032*var2[2] - 0.5*t7254*var2[3])*var2[5];
  p_output1[43]=var2[5]*(-0.5*t5981*var2[0] - 0.5*t6865*var2[1] - 0.5*t7107*var2[2] - 0.5*t7309*var2[3] - 0.5*(2.285714*t1170*t5912 + 2.285714*t1170*t5942 + 2.285714*t5955*t846 + 2.285714*t5955*t976)*var2[4] + 0.03428571*t5955*var2[5]);
  p_output1[44]=t6473;
  p_output1[45]=t6926;
  p_output1[46]=t7206;
  p_output1[47]=t7369;
  p_output1[48]=-0.5*t7447*var2[5];
  p_output1[49]=-0.5*t6463*var2[0] - 0.5*t1655*var2[1] - 0.5*t7204*var2[2] - 0.5*t7368*var2[3] - 0.5*t7447*var2[4] + 0.06857142*t1170*var2[5];
  p_output1[50]=(0.03428571*t661*var2[0] + 0.03428571*t2377*var2[1])*var2[5];
  p_output1[51]=(0.03428571*t3510*var2[0] + 0.03428571*t3840*var2[1] + 0.03428571*t4522*var2[2])*var2[5];
  p_output1[52]=(t7493 + t7498 + 0.03428571*t5821*var2[2] + 0.03428571*t5148*var2[3])*var2[5];
  p_output1[53]=(t7493 + t7498 + 0.03428571*t6256*var2[2] + 0.03428571*t6115*var2[3] + 0.03428571*t5955*var2[4])*var2[5];
  p_output1[54]=0.03428571*t2173*var2[5];
  p_output1[55]=t674;
  p_output1[56]=0.03428571*t3289*var2[5];
  p_output1[57]=0.03428571*t2065*var2[5];
  p_output1[58]=0.03428571*t1170*var2[5];
  p_output1[59]=0.03428571*t2173*var2[0] + 0.03428571*t661*var2[1] + 0.03428571*t3289*var2[2] + 0.03428571*t2065*var2[3] + 0.03428571*t1170*var2[4];
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 9 && ncols == 1) && 
      !(mrows == 1 && ncols == 9))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 9 && ncols == 1) && 
      !(mrows == 1 && ncols == 9))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 60, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_Ce2_vec_L4_J6_amber3_feet.hh"

namespace RightSS1
{

void J_Ce2_vec_L4_J6_amber3_feet_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
