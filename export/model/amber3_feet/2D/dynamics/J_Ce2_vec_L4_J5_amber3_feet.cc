/*
 * Automatically Generated from Mathematica.
 * Wed 1 Mar 2023 13:26:44 GMT-08:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t327;
  double t247;
  double t267;
  double t381;
  double t449;
  double t298;
  double t403;
  double t410;
  double t123;
  double t492;
  double t493;
  double t525;
  double t7;
  double t421;
  double t529;
  double t530;
  double t542;
  double t564;
  double t600;
  double t610;
  double t647;
  double t774;
  double t783;
  double t887;
  double t900;
  double t905;
  double t921;
  double t992;
  double t1148;
  double t1387;
  double t1392;
  double t1439;
  double t1769;
  double t1778;
  double t1800;
  double t1848;
  double t1872;
  double t1884;
  double t1921;
  double t1922;
  double t1930;
  double t1944;
  double t1946;
  double t1972;
  double t1974;
  double t2104;
  double t2136;
  double t2210;
  double t2220;
  double t2065;
  double t2082;
  double t2403;
  double t1386;
  double t1443;
  double t1478;
  double t1516;
  double t1529;
  double t1611;
  double t1621;
  double t1670;
  double t2454;
  double t2500;
  double t2517;
  double t2570;
  double t2575;
  double t2510;
  double t2580;
  double t2590;
  double t2753;
  double t2761;
  double t2796;
  double t2825;
  double t2829;
  double t2834;
  double t2842;
  double t2852;
  double t2861;
  double t2999;
  double t3013;
  double t3016;
  double t3289;
  double t3299;
  double t3305;
  double t3318;
  double t3322;
  double t3324;
  double t3344;
  double t3348;
  double t3380;
  double t3392;
  double t3532;
  double t3533;
  double t3541;
  double t3487;
  double t3508;
  double t3522;
  double t834;
  double t836;
  double t866;
  double t1154;
  double t1170;
  double t3690;
  double t3720;
  double t3727;
  double t3736;
  double t1229;
  double t1233;
  double t1268;
  double t1271;
  double t1888;
  double t1942;
  double t1981;
  double t1999;
  double t2049;
  double t2056;
  double t2099;
  double t2238;
  double t2293;
  double t2301;
  double t2372;
  double t2383;
  double t2429;
  double t2430;
  double t2437;
  double t2635;
  double t2655;
  double t2656;
  double t3800;
  double t3806;
  double t3819;
  double t3824;
  double t3839;
  double t3897;
  double t3898;
  double t3900;
  double t3919;
  double t2799;
  double t2952;
  double t4030;
  double t4039;
  double t3321;
  double t3425;
  double t3434;
  double t4397;
  double t4429;
  double t4437;
  double t4466;
  double t4468;
  double t4490;
  double t3484;
  double t3525;
  double t3527;
  double t3542;
  double t3549;
  double t3575;
  double t3576;
  double t3583;
  double t3597;
  double t3602;
  double t3618;
  double t3623;
  double t3631;
  double t4600;
  double t4616;
  double t4624;
  double t5179;
  double t5181;
  double t5182;
  double t5198;
  double t5041;
  double t5045;
  double t5049;
  double t5055;
  double t5057;
  double t5059;
  double t5617;
  double t5622;
  double t5597;
  double t5602;
  double t5038;
  double t5066;
  double t5071;
  double t5766;
  double t5768;
  double t5148;
  double t5916;
  double t5920;
  double t5927;
  double t5944;
  double t5945;
  double t5947;
  double t5213;
  double t5221;
  double t5988;
  double t5989;
  double t5995;
  double t5272;
  double t5313;
  double t5320;
  double t5333;
  double t5372;
  double t5373;
  double t5378;
  double t5414;
  double t5417;
  double t5436;
  double t5445;
  double t5456;
  double t5465;
  double t5470;
  double t5473;
  double t5485;
  double t5489;
  double t5494;
  double t5510;
  double t5519;
  double t5520;
  double t5530;
  double t5531;
  double t5542;
  double t5543;
  double t6135;
  double t6138;
  double t6146;
  double t6160;
  double t6162;
  double t6163;
  double t5729;
  double t5732;
  double t6213;
  double t6217;
  double t6223;
  double t6228;
  double t6230;
  double t5670;
  double t5677;
  double t6402;
  double t6425;
  double t6430;
  double t6433;
  double t6443;
  double t6339;
  double t6341;
  double t6342;
  double t6347;
  double t6351;
  double t6353;
  double t6366;
  double t6367;
  double t6371;
  double t6385;
  double t6386;
  double t6387;
  double t6398;
  double t2985;
  double t2995;
  double t2804;
  double t2809;
  double t2815;
  double t2903;
  double t2948;
  double t2997;
  double t3064;
  double t3078;
  double t3080;
  double t4089;
  double t4117;
  double t3972;
  double t4007;
  double t4012;
  double t4029;
  double t4062;
  double t4071;
  double t4162;
  double t4203;
  double t4217;
  double t4273;
  double t4360;
  double t4377;
  double t4434;
  double t4534;
  double t4552;
  double t4561;
  double t4587;
  double t4589;
  double t4640;
  double t4658;
  double t4671;
  double t4692;
  double t4702;
  double t4750;
  double t4754;
  double t4805;
  double t4818;
  double t4831;
  double t4837;
  double t4839;
  double t4865;
  double t4870;
  double t4875;
  double t4886;
  double t4893;
  double t4912;
  double t4913;
  double t4927;
  double t4934;
  double t5133;
  double t5158;
  double t5205;
  double t5209;
  double t5228;
  double t5260;
  double t5263;
  double t5280;
  double t5305;
  double t5314;
  double t5603;
  double t5647;
  double t5658;
  double t5683;
  double t5698;
  double t5716;
  double t5717;
  double t5718;
  double t5728;
  double t5734;
  double t6668;
  double t5772;
  double t5789;
  double t5802;
  double t6674;
  double t6678;
  double t5821;
  double t5823;
  double t5825;
  double t5843;
  double t5847;
  double t5850;
  double t5864;
  double t5929;
  double t5948;
  double t5962;
  double t5981;
  double t5984;
  double t5985;
  double t5999;
  double t6005;
  double t6008;
  double t6010;
  double t6016;
  double t6023;
  double t6025;
  double t6027;
  double t6061;
  double t6065;
  double t6071;
  double t6693;
  double t6694;
  double t6082;
  double t6084;
  double t6090;
  double t6714;
  double t6715;
  double t6716;
  double t6718;
  double t6721;
  double t6725;
  double t6726;
  double t6736;
  double t6740;
  double t6747;
  double t6757;
  double t6147;
  double t6172;
  double t6176;
  double t6189;
  double t6192;
  double t6196;
  double t6205;
  double t6208;
  double t6212;
  double t6220;
  double t6234;
  double t6238;
  double t6249;
  double t6267;
  double t6271;
  double t6284;
  double t6287;
  double t6296;
  double t6297;
  double t6311;
  double t6368;
  double t3463;
  double t3568;
  double t3585;
  double t3633;
  double t3649;
  double t2044;
  double t2345;
  double t2618;
  double t2664;
  double t2693;
  double t830;
  double t1193;
  double t1690;
  double t1737;
  double t2747;
  double t6873;
  double t3653;
  double t6568;
  double t6570;
  double t6576;
  double t6579;
  double t6583;
  double t4568;
  double t4577;
  double t4766;
  double t4770;
  double t4793;
  double t4849;
  double t4851;
  double t4954;
  double t4973;
  double t6636;
  double t6637;
  double t6639;
  double t6640;
  double t6641;
  double t6647;
  double t6649;
  double t6650;
  double t6652;
  double t6758;
  double t6762;
  double t6763;
  double t6770;
  double t6786;
  double t5577;
  double t5699;
  double t5715;
  double t5736;
  double t5739;
  double t6129;
  double t6177;
  double t6181;
  double t6202;
  double t6255;
  double t6316;
  double t6320;
  double t6844;
  double t6849;
  double t6851;
  double t6852;
  double t6853;
  double t6859;
  double t6860;
  double t6399;
  double t6878;
  double t7109;
  double t7110;
  double t7111;
  double t7116;
  double t7117;
  double t7098;
  double t7102;
  double t7105;
  double t6522;
  double t6526;
  double t6527;
  double t6530;
  double t6537;
  double t6612;
  double t6616;
  double t6617;
  double t6622;
  double t6623;
  double t3881;
  double t3892;
  double t3920;
  double t3925;
  double t3926;
  double t6924;
  double t6926;
  double t6932;
  double t6934;
  double t6939;
  double t5125;
  double t5231;
  double t5316;
  double t5339;
  double t5351;
  double t6685;
  double t6687;
  double t6689;
  double t6697;
  double t6701;
  double t6987;
  double t6991;
  double t6992;
  double t6995;
  double t6996;
  double t6997;
  double t6998;
  double t5912;
  double t5963;
  double t6011;
  double t6076;
  double t6077;
  double t6091;
  double t6099;
  double t6807;
  double t6814;
  double t6815;
  double t6816;
  double t6824;
  double t6828;
  double t6840;
  double t7050;
  double t7051;
  double t7052;
  double t7059;
  double t7063;
  double t7066;
  double t7068;
  double t7071;
  double t7076;
  double t6454;
  double t6889;
  double t7120;
  double t7266;
  double t7271;
  double t7272;
  double t6513;
  double t6514;
  double t6518;
  double t6599;
  double t6601;
  double t6602;
  double t3787;
  double t3840;
  double t3859;
  double t6917;
  double t6920;
  double t6921;
  double t7187;
  double t7188;
  double t7189;
  double t5074;
  double t6680;
  double t6975;
  double t6978;
  double t6979;
  double t7224;
  double t7225;
  double t7226;
  double t7227;
  double t7230;
  double t5815;
  double t5866;
  double t5877;
  double t6800;
  double t6802;
  double t6804;
  double t7035;
  double t7039;
  double t7040;
  double t7041;
  double t7043;
  double t6463;
  double t6473;
  double t6475;
  double t1748;
  double t7126;
  double t7128;
  double t7134;
  double t7275;
  double t7279;
  double t7281;
  double t7411;
  double t7413;
  double t6508;
  double t6896;
  double t7156;
  double t7294;
  t327 = Cos(var1[4]);
  t247 = Cos(var1[5]);
  t267 = Sin(var1[4]);
  t381 = Sin(var1[5]);
  t449 = Cos(var1[3]);
  t298 = -1.*t247*t267;
  t403 = -1.*t327*t381;
  t410 = t298 + t403;
  t123 = Sin(var1[3]);
  t492 = t327*t247;
  t493 = -1.*t267*t381;
  t525 = t492 + t493;
  t7 = Sin(var1[2]);
  t421 = t123*t410;
  t529 = t449*t525;
  t530 = t421 + t529;
  t542 = -1.*t7*t530;
  t564 = Cos(var1[2]);
  t600 = t449*t410;
  t610 = -1.*t123*t525;
  t647 = t600 + t610;
  t774 = t564*t647;
  t783 = t542 + t774;
  t887 = -1.*t247;
  t900 = 1. + t887;
  t905 = -1.3127*t900;
  t921 = -1.3127*t247;
  t992 = -0.06*t381;
  t1148 = t905 + t921 + t992;
  t1387 = -1.*t327*t247;
  t1392 = t267*t381;
  t1439 = t1387 + t1392;
  t1769 = -1.*t327;
  t1778 = 1. + t1769;
  t1800 = -0.9063*t1778;
  t1848 = -0.06*t247*t267;
  t1872 = t327*t1148;
  t1884 = t1800 + t1848 + t1872;
  t1921 = t247*t267;
  t1922 = t327*t381;
  t1930 = t1921 + t1922;
  t1944 = 0.06*t327*t247;
  t1946 = 0.9063*t267;
  t1972 = t267*t1148;
  t1974 = t1944 + t1946 + t1972;
  t2104 = -0.06*t327*t247;
  t2136 = -0.9063*t267;
  t2210 = -1.*t267*t1148;
  t2220 = t2104 + t2136 + t2210;
  t2065 = 0.9063*t327;
  t2082 = t2065 + t1848 + t1872;
  t2403 = 0.4999*t525;
  t1386 = -1.*t123*t410;
  t1443 = t449*t1439;
  t1478 = t1386 + t1443;
  t1516 = t564*t1478;
  t1529 = t123*t1439;
  t1611 = t600 + t1529;
  t1621 = -1.*t7*t1611;
  t1670 = t1516 + t1621;
  t2454 = -1.*t123*t1930;
  t2500 = t2454 + t529;
  t2517 = t449*t1930;
  t2570 = t123*t525;
  t2575 = t2517 + t2570;
  t2510 = t564*t2500;
  t2580 = -1.*t7*t2575;
  t2590 = t2510 + t2580;
  t2753 = t564*t530;
  t2761 = t7*t647;
  t2796 = t2753 + t2761;
  t2825 = -1.*t564*t530;
  t2829 = -1.*t7*t647;
  t2834 = t2825 + t2829;
  t2842 = t7*t2500;
  t2852 = t564*t2575;
  t2861 = t2842 + t2852;
  t2999 = t7*t1478;
  t3013 = t564*t1611;
  t3016 = t2999 + t3013;
  t3289 = 0.4999*t123;
  t3299 = t123*t1884;
  t3305 = t449*t1974;
  t3318 = t3289 + t3299 + t3305;
  t3322 = -1.*t449;
  t3324 = 1. + t3322;
  t3344 = -0.4999*t3324;
  t3348 = t449*t1884;
  t3380 = -1.*t123*t1974;
  t3392 = t3344 + t3348 + t3380;
  t3532 = t449*t2082;
  t3533 = t123*t2220;
  t3541 = t3532 + t3533;
  t3487 = -1.*t123*t2082;
  t3508 = t449*t2220;
  t3522 = t3487 + t3508;
  t834 = Power(t247,2);
  t836 = -0.06*t834;
  t866 = 0.9063*t381;
  t1154 = t1148*t381;
  t1170 = t836 + t866 + t1154;
  t3690 = -1.*t449*t525;
  t3720 = t1386 + t3690;
  t3727 = t7*t3720;
  t3736 = t3727 + t774;
  t1229 = 0.9063*t247;
  t1233 = t247*t1148;
  t1268 = 0.06*t247*t381;
  t1271 = t1229 + t1233 + t1268;
  t1888 = -1.*t1884*t410;
  t1942 = 0.4999*t1930;
  t1981 = -1.*t1974*t525;
  t1999 = t1888 + t1942 + t1981;
  t2049 = 0.4999*t410;
  t2056 = t1884*t410;
  t2099 = t2082*t1930;
  t2238 = t2220*t525;
  t2293 = t1974*t525;
  t2301 = t2049 + t2056 + t2099 + t2238 + t2293;
  t2372 = -1.*t2220*t410;
  t2383 = -1.*t1974*t410;
  t2429 = -1.*t2082*t525;
  t2430 = -1.*t1884*t1439;
  t2437 = t2372 + t2383 + t2403 + t2429 + t2430;
  t2635 = t1974*t1930;
  t2655 = t1884*t525;
  t2656 = t2635 + t2403 + t2655;
  t3800 = -1.*t449*t410;
  t3806 = -1.*t123*t1439;
  t3819 = t3800 + t3806;
  t3824 = t7*t3819;
  t3839 = t1516 + t3824;
  t3897 = -1.*t449*t1930;
  t3898 = t3897 + t610;
  t3900 = t7*t3898;
  t3919 = t2510 + t3900;
  t2799 = -1.*t7*t2500;
  t2952 = -1.*t7*t1478;
  t4030 = t564*t3720;
  t4039 = t4030 + t2829;
  t3321 = -1.*t3318*t530;
  t3425 = -1.*t3392*t647;
  t3434 = t3321 + t3425;
  t4397 = 0.4999*t449;
  t4429 = t4397 + t3348 + t3380;
  t4437 = -0.4999*t123;
  t4466 = -1.*t123*t1884;
  t4468 = -1.*t449*t1974;
  t4490 = t4437 + t4466 + t4468;
  t3484 = t3318*t530;
  t3525 = t3522*t2500;
  t3527 = t3392*t647;
  t3542 = t3541*t2575;
  t3549 = t3484 + t3525 + t3527 + t3542;
  t3575 = t3392*t2500;
  t3576 = t3318*t2575;
  t3583 = t3575 + t3576;
  t3597 = -1.*t3541*t530;
  t3602 = -1.*t3522*t647;
  t3618 = -1.*t3392*t1478;
  t3623 = -1.*t3318*t1611;
  t3631 = t3597 + t3602 + t3618 + t3623;
  t4600 = -1.*t449*t2082;
  t4616 = -1.*t123*t2220;
  t4624 = t4600 + t4616;
  t5179 = -0.9063*t327;
  t5181 = 0.06*t247*t267;
  t5182 = -1.*t327*t1148;
  t5198 = t5179 + t5181 + t5182;
  t5041 = t123*t1930;
  t5045 = t5041 + t1443;
  t5049 = t564*t5045;
  t5055 = t2517 + t3806;
  t5057 = t7*t5055;
  t5059 = t5049 + t5057;
  t5617 = t449*t5198;
  t5622 = t5617 + t4616;
  t5597 = t123*t5198;
  t5602 = t5597 + t3508;
  t5038 = 0.03428571*var2[5]*t3016;
  t5066 = 1.142857*t1271*t5059;
  t5071 = 1.142857*t1170*t3016;
  t5766 = -0.06*t247;
  t5768 = 0. + t5766;
  t5148 = t1974*t410;
  t5916 = t5768*t267;
  t5920 = -0.06*t327*t381;
  t5927 = t5916 + t5920;
  t5944 = t327*t5768;
  t5945 = 0.06*t267*t381;
  t5947 = t5944 + t5945;
  t5213 = 0.4999*t1439;
  t5221 = t1884*t1439;
  t5988 = -1.*t5768*t267;
  t5989 = 0.06*t327*t381;
  t5995 = t5988 + t5989;
  t5272 = -1.*t1884*t1930;
  t5313 = -1.*t1974*t1439;
  t5320 = 1.142857*t2656*t5059;
  t5333 = 1.142857*t1999*t3016;
  t5372 = Power(t2796,2);
  t5373 = 2.285714*t5372;
  t5378 = 2.285714*t2796*t5059;
  t5414 = 2.285714*t2861*t3016;
  t5417 = Power(t3016,2);
  t5436 = 2.285714*t5417;
  t5445 = t5373 + t5378 + t5414 + t5436;
  t5456 = -0.5*var2[0]*t5445;
  t5465 = 2.285714*t783*t2796;
  t5470 = -1.*t7*t5045;
  t5473 = t564*t5055;
  t5485 = t5470 + t5473;
  t5489 = 1.142857*t2796*t5485;
  t5494 = 1.142857*t783*t5059;
  t5510 = 1.142857*t2590*t3016;
  t5519 = 1.142857*t2861*t1670;
  t5520 = 2.285714*t3016*t1670;
  t5530 = t5465 + t5489 + t5494 + t5510 + t5519 + t5520;
  t5531 = -0.5*var2[1]*t5530;
  t5542 = 1.142857*t3583*t5059;
  t5543 = 1.142857*t3434*t3016;
  t6135 = -1.*t123*t5927;
  t6138 = t449*t5947;
  t6146 = t6135 + t6138;
  t6160 = t449*t5927;
  t6162 = t123*t5947;
  t6163 = t6160 + t6162;
  t5729 = t3392*t1478;
  t5732 = t3318*t1611;
  t6213 = t123*t5995;
  t6217 = t6213 + t6138;
  t6223 = t449*t5995;
  t6228 = -1.*t123*t5947;
  t6230 = t6223 + t6228;
  t5670 = -1.*t3318*t5045;
  t5677 = -1.*t3392*t5055;
  t6402 = 1.142857*t1999*t2796;
  t6425 = 1.142857*t2301*t2796;
  t6430 = 1.142857*t2437*t2861;
  t6433 = 1.142857*t2656*t3016;
  t6443 = t6402 + t6425 + t6430 + t6433;
  t6339 = 2.285714*t2796*t2861;
  t6341 = 2.285714*t2796*t3016;
  t6342 = t6339 + t6341;
  t6347 = 1.142857*t783*t2861;
  t6351 = 1.142857*t2796*t2590;
  t6353 = 1.142857*t783*t3016;
  t6366 = 1.142857*t2796*t1670;
  t6367 = t6347 + t6351 + t6353 + t6366;
  t6371 = 1.142857*t2796*t3434;
  t6385 = 1.142857*t2796*t3549;
  t6386 = 1.142857*t3583*t3016;
  t6387 = 1.142857*t2861*t3631;
  t6398 = t6371 + t6385 + t6386 + t6387;
  t2985 = -1.*t564*t1611;
  t2995 = t2952 + t2985;
  t2804 = -1.*t564*t2575;
  t2809 = t2799 + t2804;
  t2815 = 1.142857*t2796*t2809;
  t2903 = 1.142857*t2834*t2861;
  t2948 = 2.285714*t783*t2590;
  t2997 = 1.142857*t2796*t2995;
  t3064 = 1.142857*t2834*t3016;
  t3078 = 2.285714*t783*t1670;
  t3080 = t2815 + t2903 + t2948 + t2997 + t3064 + t3078;
  t4089 = t564*t3819;
  t4117 = t2952 + t4089;
  t3972 = t564*t3898;
  t4007 = t2799 + t3972;
  t4012 = 1.142857*t2796*t4007;
  t4029 = 1.142857*t783*t3919;
  t4062 = 1.142857*t4039*t2861;
  t4071 = 1.142857*t3736*t2590;
  t4162 = 1.142857*t2796*t4117;
  t4203 = 1.142857*t783*t3839;
  t4217 = 1.142857*t4039*t3016;
  t4273 = 1.142857*t3736*t1670;
  t4360 = t4012 + t4029 + t4062 + t4071 + t4162 + t4203 + t4217 + t4273;
  t4377 = -1.*t3392*t3720;
  t4434 = -1.*t4429*t530;
  t4534 = -1.*t4490*t647;
  t4552 = -1.*t3318*t647;
  t4561 = t4377 + t4434 + t4534 + t4552;
  t4587 = t3392*t3720;
  t4589 = t4429*t530;
  t4640 = t4624*t2500;
  t4658 = t3541*t2500;
  t4671 = t4490*t647;
  t4692 = t3318*t647;
  t4702 = t3522*t3898;
  t4750 = t3522*t2575;
  t4754 = t4587 + t4589 + t4640 + t4658 + t4671 + t4692 + t4702 + t4750;
  t4805 = t4490*t2500;
  t4818 = t3318*t2500;
  t4831 = t3392*t3898;
  t4837 = t4429*t2575;
  t4839 = t4805 + t4818 + t4831 + t4837;
  t4865 = -1.*t3522*t3720;
  t4870 = -1.*t3522*t530;
  t4875 = -1.*t4624*t647;
  t4886 = -1.*t3541*t647;
  t4893 = -1.*t4490*t1478;
  t4912 = -1.*t3318*t1478;
  t4913 = -1.*t3392*t3819;
  t4927 = -1.*t4429*t1611;
  t4934 = t4865 + t4870 + t4875 + t4886 + t4893 + t4912 + t4913 + t4927;
  t5133 = 2.*t2220*t410;
  t5158 = t2220*t1930;
  t5205 = t5198*t525;
  t5209 = 2.*t2082*t525;
  t5228 = t5133 + t5148 + t5158 + t5205 + t5209 + t5213 + t5221;
  t5260 = -1.*t5198*t410;
  t5263 = -2.*t2082*t410;
  t5280 = -1.*t2220*t525;
  t5305 = -2.*t2220*t1439;
  t5314 = t2049 + t5260 + t5263 + t5272 + t5280 + t5305 + t5313;
  t5603 = -1.*t5602*t530;
  t5647 = -1.*t5622*t647;
  t5658 = -2.*t3522*t1478;
  t5683 = -2.*t3541*t1611;
  t5698 = t5603 + t5647 + t5658 + t5670 + t5677 + t5683;
  t5716 = 2.*t3541*t530;
  t5717 = t5622*t2500;
  t5718 = 2.*t3522*t647;
  t5728 = t5602*t2575;
  t5734 = t5716 + t5717 + t5718 + t5728 + t5729 + t5732;
  t6668 = 0.03428571*var2[5]*t1670;
  t5772 = t5768*t381;
  t5789 = 0.12*t247*t381;
  t5802 = t1229 + t1233 + t5772 + t5789;
  t6674 = 1.142857*t1271*t5485;
  t6678 = 1.142857*t1170*t1670;
  t5821 = t5768*t247;
  t5823 = 0.06*t834;
  t5825 = -0.9063*t381;
  t5843 = -1.*t1148*t381;
  t5847 = Power(t381,2);
  t5850 = -0.06*t5847;
  t5864 = t5821 + t5823 + t5825 + t5843 + t5850;
  t5929 = -1.*t5927*t525;
  t5948 = -1.*t410*t5947;
  t5962 = t2383 + t2403 + t5929 + t5948 + t2430;
  t5981 = t2220*t410;
  t5984 = t2082*t525;
  t5985 = t5927*t525;
  t5999 = t5995*t525;
  t6005 = t410*t5947;
  t6008 = t1930*t5947;
  t6010 = t5981 + t5148 + t5984 + t5985 + t5999 + t6005 + t6008 + t5213 + t5221;
  t6016 = -1.*t2082*t410;
  t6023 = -1.*t410*t5927;
  t6025 = -1.*t410*t5995;
  t6027 = -1.*t525*t5947;
  t6061 = -1.*t2220*t1439;
  t6065 = -1.*t5947*t1439;
  t6071 = t2049 + t6016 + t6023 + t6025 + t5272 + t6027 + t6061 + t5313 + t6065;
  t6693 = 1.142857*t2656*t5485;
  t6694 = 1.142857*t1999*t1670;
  t6082 = t5927*t1930;
  t6084 = t525*t5947;
  t6090 = t2049 + t2056 + t6082 + t2293 + t6084;
  t6714 = -0.5*var2[0]*t5530;
  t6715 = Power(t783,2);
  t6716 = 2.285714*t6715;
  t6718 = 2.285714*t783*t5485;
  t6721 = 2.285714*t2590*t1670;
  t6725 = Power(t1670,2);
  t6726 = 2.285714*t6725;
  t6736 = t6716 + t6718 + t6721 + t6726;
  t6740 = -0.5*var2[1]*t6736;
  t6747 = 1.142857*t3583*t5485;
  t6757 = 1.142857*t3434*t1670;
  t6147 = t2500*t6146;
  t6172 = t2575*t6163;
  t6176 = t3484 + t3527 + t6147 + t6172;
  t6189 = -1.*t647*t6146;
  t6192 = -1.*t530*t6163;
  t6196 = t6189 + t6192 + t3618 + t3623;
  t6205 = t3541*t530;
  t6208 = t3522*t647;
  t6212 = t647*t6146;
  t6220 = t2575*t6217;
  t6234 = t2500*t6230;
  t6238 = t530*t6163;
  t6249 = t6205 + t6208 + t6212 + t6220 + t6234 + t6238 + t5729 + t5732;
  t6267 = -1.*t530*t6217;
  t6271 = -1.*t647*t6230;
  t6284 = -1.*t3522*t1478;
  t6287 = -1.*t6146*t1478;
  t6296 = -1.*t3541*t1611;
  t6297 = -1.*t6163*t1611;
  t6311 = t6267 + t6271 + t6284 + t6287 + t5670 + t5677 + t6296 + t6297;
  t6368 = -0.5*var2[4]*t6367;
  t3463 = 1.142857*t783*t3434;
  t3568 = 1.142857*t783*t3549;
  t3585 = 1.142857*t3583*t1670;
  t3633 = 1.142857*t2590*t3631;
  t3649 = t3463 + t3568 + t3585 + t3633;
  t2044 = 1.142857*t1999*t783;
  t2345 = 1.142857*t2301*t783;
  t2618 = 1.142857*t2437*t2590;
  t2664 = 1.142857*t2656*t1670;
  t2693 = t2044 + t2345 + t2618 + t2664;
  t830 = 0.03428571*var2[5]*t783;
  t1193 = 1.142857*t1170*t783;
  t1690 = 1.142857*t1271*t1670;
  t1737 = t1193 + t1690;
  t2747 = -0.5*var2[3]*t2693;
  t6873 = t2948 + t3078;
  t3653 = -0.5*var2[2]*t3649;
  t6568 = 1.142857*t2834*t3434;
  t6570 = 1.142857*t2834*t3549;
  t6576 = 1.142857*t3583*t2995;
  t6579 = 1.142857*t2809*t3631;
  t6583 = t6568 + t6570 + t6576 + t6579;
  t4568 = 1.142857*t2796*t4561;
  t4577 = 1.142857*t3736*t3434;
  t4766 = 1.142857*t2796*t4754;
  t4770 = 1.142857*t3736*t3549;
  t4793 = 1.142857*t3583*t3839;
  t4849 = 1.142857*t4839*t3016;
  t4851 = 1.142857*t3919*t3631;
  t4954 = 1.142857*t2861*t4934;
  t4973 = t4568 + t4577 + t4766 + t4770 + t4793 + t4849 + t4851 + t4954;
  t6636 = 1.142857*t783*t4561;
  t6637 = 1.142857*t4039*t3434;
  t6639 = 1.142857*t783*t4754;
  t6640 = 1.142857*t4039*t3549;
  t6641 = 1.142857*t3583*t4117;
  t6647 = 1.142857*t4839*t1670;
  t6649 = 1.142857*t4007*t3631;
  t6650 = 1.142857*t2590*t4934;
  t6652 = t6636 + t6637 + t6639 + t6640 + t6641 + t6647 + t6649 + t6650;
  t6758 = 2.285714*t3549*t1670;
  t6762 = 1.142857*t2590*t5698;
  t6763 = 2.285714*t783*t3631;
  t6770 = 1.142857*t783*t5734;
  t6786 = t6747 + t6757 + t6758 + t6762 + t6763 + t6770;
  t5577 = 2.285714*t3549*t3016;
  t5699 = 1.142857*t2861*t5698;
  t5715 = 2.285714*t2796*t3631;
  t5736 = 1.142857*t2796*t5734;
  t5739 = t5542 + t5543 + t5577 + t5699 + t5715 + t5736;
  t6129 = 1.142857*t3549*t3016;
  t6177 = 1.142857*t6176*t3016;
  t6181 = 1.142857*t2796*t3631;
  t6202 = 1.142857*t2796*t6196;
  t6255 = 1.142857*t2796*t6249;
  t6316 = 1.142857*t2861*t6311;
  t6320 = t5542 + t5543 + t6129 + t6177 + t6181 + t6202 + t6255 + t6316;
  t6844 = 1.142857*t3549*t1670;
  t6849 = 1.142857*t6176*t1670;
  t6851 = 1.142857*t783*t3631;
  t6852 = 1.142857*t783*t6196;
  t6853 = 1.142857*t783*t6249;
  t6859 = 1.142857*t2590*t6311;
  t6860 = t6747 + t6757 + t6844 + t6849 + t6851 + t6852 + t6853 + t6859;
  t6399 = -0.5*var2[4]*t6398;
  t6878 = -0.5*var2[4]*t3649;
  t7109 = 1.142857*t2437*t3434;
  t7110 = 1.142857*t2656*t3549;
  t7111 = 1.142857*t2301*t3583;
  t7116 = 1.142857*t1999*t3631;
  t7117 = t7109 + t7110 + t7111 + t7116;
  t7098 = 2.285714*t3549*t3583;
  t7102 = 2.285714*t3434*t3631;
  t7105 = t7098 + t7102;
  t6522 = 1.142857*t1999*t2834;
  t6526 = 1.142857*t2301*t2834;
  t6527 = 1.142857*t2437*t2809;
  t6530 = 1.142857*t2656*t2995;
  t6537 = t6522 + t6526 + t6527 + t6530;
  t6612 = 1.142857*t1999*t4039;
  t6616 = 1.142857*t2301*t4039;
  t6617 = 1.142857*t2437*t4007;
  t6622 = 1.142857*t2656*t4117;
  t6623 = t6612 + t6616 + t6617 + t6622;
  t3881 = 1.142857*t1999*t3736;
  t3892 = 1.142857*t2301*t3736;
  t3920 = 1.142857*t2437*t3919;
  t3925 = 1.142857*t2656*t3839;
  t3926 = t3881 + t3892 + t3920 + t3925;
  t6924 = 1.142857*t2437*t4561;
  t6926 = 1.142857*t2656*t4754;
  t6932 = 1.142857*t2301*t4839;
  t6934 = 1.142857*t1999*t4934;
  t6939 = t6924 + t6926 + t6932 + t6934;
  t5125 = 2.285714*t2437*t2796;
  t5231 = 1.142857*t5228*t2796;
  t5316 = 1.142857*t5314*t2861;
  t5339 = 2.285714*t2301*t3016;
  t5351 = t5125 + t5231 + t5316 + t5320 + t5333 + t5339;
  t6685 = 2.285714*t2437*t783;
  t6687 = 1.142857*t5228*t783;
  t6689 = 1.142857*t5314*t2590;
  t6697 = 2.285714*t2301*t1670;
  t6701 = t6685 + t6687 + t6689 + t6693 + t6694 + t6697;
  t6987 = 1.142857*t5314*t3434;
  t6991 = 2.285714*t2301*t3549;
  t6992 = 1.142857*t5228*t3583;
  t6995 = 1.142857*t1999*t5698;
  t6996 = 2.285714*t2437*t3631;
  t6997 = 1.142857*t2656*t5734;
  t6998 = t6987 + t6991 + t6992 + t6995 + t6996 + t6997;
  t5912 = 1.142857*t2437*t2796;
  t5963 = 1.142857*t5962*t2796;
  t6011 = 1.142857*t6010*t2796;
  t6076 = 1.142857*t6071*t2861;
  t6077 = 1.142857*t2301*t3016;
  t6091 = 1.142857*t6090*t3016;
  t6099 = t5912 + t5963 + t6011 + t6076 + t5320 + t5333 + t6077 + t6091;
  t6807 = 1.142857*t2437*t783;
  t6814 = 1.142857*t5962*t783;
  t6815 = 1.142857*t6010*t783;
  t6816 = 1.142857*t6071*t2590;
  t6824 = 1.142857*t2301*t1670;
  t6828 = 1.142857*t6090*t1670;
  t6840 = t6807 + t6814 + t6815 + t6816 + t6693 + t6694 + t6824 + t6828;
  t7050 = 1.142857*t6071*t3434;
  t7051 = 1.142857*t6090*t3549;
  t7052 = 1.142857*t6010*t3583;
  t7059 = 1.142857*t2301*t6176;
  t7063 = 1.142857*t5962*t3631;
  t7066 = 1.142857*t2437*t6196;
  t7068 = 1.142857*t2656*t6249;
  t7071 = 1.142857*t1999*t6311;
  t7076 = t7050 + t7051 + t7052 + t7059 + t7063 + t7066 + t7068 + t7071;
  t6454 = -0.5*var2[4]*t6443;
  t6889 = -0.5*var2[4]*t2693;
  t7120 = -0.5*var2[4]*t7117;
  t7266 = 2.285714*t2656*t2301;
  t7271 = 2.285714*t1999*t2437;
  t7272 = t7266 + t7271;
  t6513 = 1.142857*t1170*t2834;
  t6514 = 1.142857*t1271*t2995;
  t6518 = t6513 + t6514;
  t6599 = 1.142857*t1170*t4039;
  t6601 = 1.142857*t1271*t4117;
  t6602 = t6599 + t6601;
  t3787 = 1.142857*t1170*t3736;
  t3840 = 1.142857*t1271*t3839;
  t3859 = t3787 + t3840;
  t6917 = 1.142857*t1271*t4754;
  t6920 = 1.142857*t1170*t4934;
  t6921 = t6917 + t6920;
  t7187 = 1.142857*t1271*t5228;
  t7188 = 1.142857*t1170*t5314;
  t7189 = t7187 + t7188;
  t5074 = t5066 + t5071;
  t6680 = t6674 + t6678;
  t6975 = 1.142857*t1170*t5698;
  t6978 = 1.142857*t1271*t5734;
  t6979 = t6975 + t6978;
  t7224 = 1.142857*t5864*t2301;
  t7225 = 1.142857*t5802*t2437;
  t7226 = 1.142857*t1271*t6010;
  t7227 = 1.142857*t1170*t6071;
  t7230 = t7224 + t7225 + t7226 + t7227;
  t5815 = 1.142857*t5802*t2796;
  t5866 = 1.142857*t5864*t3016;
  t5877 = t5815 + t5066 + t5071 + t5866;
  t6800 = 1.142857*t5802*t783;
  t6802 = 1.142857*t5864*t1670;
  t6804 = t6800 + t6674 + t6678 + t6802;
  t7035 = 1.142857*t5864*t3549;
  t7039 = 1.142857*t5802*t3631;
  t7040 = 1.142857*t1271*t6249;
  t7041 = 1.142857*t1170*t6311;
  t7043 = t7035 + t7039 + t7040 + t7041;
  t6463 = 1.142857*t1170*t2796;
  t6473 = 1.142857*t1271*t3016;
  t6475 = t6463 + t6473;
  t1748 = -0.5*var2[4]*t1737;
  t7126 = 1.142857*t1271*t3549;
  t7128 = 1.142857*t1170*t3631;
  t7134 = t7126 + t7128;
  t7275 = 1.142857*t1271*t2301;
  t7279 = 1.142857*t1170*t2437;
  t7281 = t7275 + t7279;
  t7411 = 0.03428571*var2[0]*t3016;
  t7413 = 0.03428571*var2[1]*t1670;
  t6508 = 0.03428571*var2[4]*t2796;
  t6896 = 0.03428571*var2[4]*t783;
  t7156 = 0.03428571*var2[4]*t3631;
  t7294 = 0.03428571*var2[4]*t2437;
  p_output1[0]=(t1748 + t2747 + t3653 + t830 - 0.5*(2.285714*t1670*t2796 + 2.285714*t2590*t2796 + 2.285714*t2861*t783 + 2.285714*t3016*t783)*var2[0] - 0.5*t3080*var2[1])*var2[4];
  p_output1[1]=var2[4]*(-0.5*(2.285714*t2861*t3736 + 2.285714*t3016*t3736 + 2.285714*t2796*t3839 + 2.285714*t2796*t3919)*var2[0] - 0.5*t4360*var2[1] - 0.5*t4973*var2[2] - 0.5*t3926*var2[3] - 0.5*t3859*var2[4] + 0.03428571*t3736*var2[5]);
  p_output1[2]=var2[4]*(t5038 + t5456 + t5531 - 0.5*t5739*var2[2] - 0.5*t5351*var2[3] - 0.5*t5074*var2[4]);
  p_output1[3]=var2[4]*(t5038 + t5456 + t5531 - 0.5*t6320*var2[2] - 0.5*t6099*var2[3] - 0.5*t5877*var2[4]);
  p_output1[4]=-0.5*t6342*var2[4];
  p_output1[5]=t6368;
  p_output1[6]=t6399;
  p_output1[7]=t6454;
  p_output1[8]=-0.5*t6342*var2[0] - 0.5*t6367*var2[1] - 0.5*t6398*var2[2] - 0.5*t6443*var2[3] - 1.*t6475*var2[4] + 0.03428571*t2796*var2[5];
  p_output1[9]=t6508;
  p_output1[10]=var2[4]*(-0.5*t3080*var2[0] - 0.5*(2.285714*t1670*t2834 + 2.285714*t2590*t2834 + 2.285714*t2809*t783 + 2.285714*t2995*t783)*var2[1] - 0.5*t6583*var2[2] - 0.5*t6537*var2[3] - 0.5*t6518*var2[4] + 0.03428571*t2834*var2[5]);
  p_output1[11]=var2[4]*(-0.5*t4360*var2[0] - 0.5*(2.285714*t1670*t4039 + 2.285714*t2590*t4039 + 2.285714*t4007*t783 + 2.285714*t4117*t783)*var2[1] - 0.5*t6652*var2[2] - 0.5*t6623*var2[3] - 0.5*t6602*var2[4] + 0.03428571*t4039*var2[5]);
  p_output1[12]=var2[4]*(t6668 + t6714 + t6740 - 0.5*t6786*var2[2] - 0.5*t6701*var2[3] - 0.5*t6680*var2[4]);
  p_output1[13]=var2[4]*(t6668 + t6714 + t6740 - 0.5*t6860*var2[2] - 0.5*t6840*var2[3] - 0.5*t6804*var2[4]);
  p_output1[14]=t6368;
  p_output1[15]=-0.5*t6873*var2[4];
  p_output1[16]=t6878;
  p_output1[17]=t6889;
  p_output1[18]=t2747 + t3653 + t830 - 0.5*t6367*var2[0] - 0.5*t6873*var2[1] - 1.*t1737*var2[4];
  p_output1[19]=t6896;
  p_output1[20]=(-0.5*t3649*var2[0] - 0.5*t6583*var2[1])*var2[4];
  p_output1[21]=var2[4]*(-0.5*t4973*var2[0] - 0.5*t6652*var2[1] - 0.5*(2.285714*t3631*t4561 + 2.285714*t3583*t4754 + 2.285714*t3549*t4839 + 2.285714*t3434*t4934)*var2[2] - 0.5*t6939*var2[3] - 0.5*t6921*var2[4] + 0.03428571*t4934*var2[5]);
  p_output1[22]=var2[4]*(-0.5*t5739*var2[0] - 0.5*t6786*var2[1] - 0.5*(2.285714*Power(t3549,2) + 2.285714*Power(t3631,2) + 2.285714*t3434*t5698 + 2.285714*t3583*t5734)*var2[2] - 0.5*t6998*var2[3] - 0.5*t6979*var2[4] + 0.03428571*t5698*var2[5]);
  p_output1[23]=var2[4]*(-0.5*t6320*var2[0] - 0.5*t6860*var2[1] - 0.5*(2.285714*t3549*t6176 + 2.285714*t3631*t6196 + 2.285714*t3583*t6249 + 2.285714*t3434*t6311)*var2[2] - 0.5*t7076*var2[3] - 0.5*t7043*var2[4] + 0.03428571*t6311*var2[5]);
  p_output1[24]=t6399;
  p_output1[25]=t6878;
  p_output1[26]=-0.5*t7105*var2[4];
  p_output1[27]=t7120;
  p_output1[28]=-0.5*t6398*var2[0] - 0.5*t3649*var2[1] - 0.5*t7105*var2[2] - 0.5*t7117*var2[3] - 1.*t7134*var2[4] + 0.03428571*t3631*var2[5];
  p_output1[29]=t7156;
  p_output1[30]=(-0.5*t2693*var2[0] - 0.5*t6537*var2[1])*var2[4];
  p_output1[31]=(-0.5*t3926*var2[0] - 0.5*t6623*var2[1] - 0.5*t6939*var2[2])*var2[4];
  p_output1[32]=var2[4]*(-0.5*t5351*var2[0] - 0.5*t6701*var2[1] - 0.5*t6998*var2[2] - 0.5*(2.285714*Power(t2301,2) + 2.285714*Power(t2437,2) + 2.285714*t2656*t5228 + 2.285714*t1999*t5314)*var2[3] - 0.5*t7189*var2[4] + 0.03428571*t5314*var2[5]);
  p_output1[33]=var2[4]*(-0.5*t6099*var2[0] - 0.5*t6840*var2[1] - 0.5*t7076*var2[2] - 0.5*(2.285714*t2437*t5962 + 2.285714*t2656*t6010 + 2.285714*t1999*t6071 + 2.285714*t2301*t6090)*var2[3] - 0.5*t7230*var2[4] + 0.03428571*t6071*var2[5]);
  p_output1[34]=t6454;
  p_output1[35]=t6889;
  p_output1[36]=t7120;
  p_output1[37]=-0.5*t7272*var2[4];
  p_output1[38]=-0.5*t6443*var2[0] - 0.5*t2693*var2[1] - 0.5*t7117*var2[2] - 0.5*t7272*var2[3] - 1.*t7281*var2[4] + 0.03428571*t2437*var2[5];
  p_output1[39]=t7294;
  p_output1[40]=(-0.5*t1737*var2[0] - 0.5*t6518*var2[1])*var2[4];
  p_output1[41]=(-0.5*t3859*var2[0] - 0.5*t6602*var2[1] - 0.5*t6921*var2[2])*var2[4];
  p_output1[42]=(-0.5*t5074*var2[0] - 0.5*t6680*var2[1] - 0.5*t6979*var2[2] - 0.5*t7189*var2[3])*var2[4];
  p_output1[43]=(-0.5*t5877*var2[0] - 0.5*t6804*var2[1] - 0.5*t7043*var2[2] - 0.5*t7230*var2[3])*var2[4];
  p_output1[44]=-0.5*t6475*var2[4];
  p_output1[45]=t1748;
  p_output1[46]=-0.5*t7134*var2[4];
  p_output1[47]=-0.5*t7281*var2[4];
  p_output1[48]=-0.5*t6475*var2[0] - 0.5*t1737*var2[1] - 0.5*t7134*var2[2] - 0.5*t7281*var2[3];
  p_output1[49]=(0.03428571*t783*var2[0] + 0.03428571*t2834*var2[1])*var2[4];
  p_output1[50]=(0.03428571*t3736*var2[0] + 0.03428571*t4039*var2[1] + 0.03428571*t4934*var2[2])*var2[4];
  p_output1[51]=(t7411 + t7413 + 0.03428571*t5698*var2[2] + 0.03428571*t5314*var2[3])*var2[4];
  p_output1[52]=(t7411 + t7413 + 0.03428571*t6311*var2[2] + 0.03428571*t6071*var2[3])*var2[4];
  p_output1[53]=t6508;
  p_output1[54]=t6896;
  p_output1[55]=t7156;
  p_output1[56]=t7294;
  p_output1[57]=0.03428571*t2796*var2[0] + 0.03428571*t783*var2[1] + 0.03428571*t3631*var2[2] + 0.03428571*t2437*var2[3];
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 9 && ncols == 1) && 
      !(mrows == 1 && ncols == 9))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 9 && ncols == 1) && 
      !(mrows == 1 && ncols == 9))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 58, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_Ce2_vec_L4_J5_amber3_feet.hh"

namespace RightSS1
{

void J_Ce2_vec_L4_J5_amber3_feet_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
