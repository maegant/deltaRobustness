/*
 * Automatically Generated from Mathematica.
 * Wed 1 Mar 2023 13:28:35 GMT-08:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t906;
  double t160;
  double t297;
  double t1015;
  double t1131;
  double t445;
  double t1040;
  double t1076;
  double t139;
  double t1139;
  double t1167;
  double t1181;
  double t1451;
  double t1185;
  double t38;
  double t2078;
  double t2097;
  double t2102;
  double t1898;
  double t1910;
  double t1955;
  double t1956;
  double t2029;
  double t2036;
  double t1088;
  double t1208;
  double t1263;
  double t1589;
  double t1634;
  double t1651;
  double t1835;
  double t1875;
  double t2105;
  double t2107;
  double t2124;
  double t2130;
  double t2141;
  double t2142;
  double t2204;
  double t2206;
  double t2526;
  double t2572;
  double t2583;
  double t2609;
  double t2705;
  double t2707;
  double t2424;
  double t2442;
  double t2452;
  double t2474;
  double t3085;
  double t3171;
  double t3173;
  double t3230;
  double t3245;
  double t3256;
  double t3373;
  double t3374;
  double t3385;
  double t3280;
  double t3338;
  double t3347;
  double t3769;
  double t3773;
  double t3774;
  double t3789;
  double t3794;
  double t3796;
  double t3686;
  double t3733;
  double t3743;
  double t3750;
  double t1889;
  double t2037;
  double t2076;
  double t2077;
  double t2300;
  double t2303;
  double t2309;
  double t2336;
  double t2351;
  double t3917;
  double t3922;
  double t3931;
  double t3945;
  double t2494;
  double t2523;
  double t2749;
  double t2750;
  double t3957;
  double t3977;
  double t4022;
  double t4038;
  double t4063;
  double t2860;
  double t2868;
  double t2879;
  double t2993;
  double t3481;
  double t3632;
  double t4298;
  double t4346;
  double t4389;
  double t4398;
  double t3752;
  double t3797;
  double t3802;
  double t3831;
  double t3874;
  double t3877;
  double t4863;
  double t4867;
  double t4883;
  double t4906;
  double t4774;
  double t4843;
  double t5102;
  double t5109;
  double t5110;
  double t5248;
  double t5282;
  double t5304;
  double t5310;
  double t5237;
  double t5238;
  double t5114;
  double t5128;
  double t5139;
  double t5146;
  double t5157;
  double t5183;
  double t5187;
  double t5551;
  double t5557;
  double t5642;
  double t5765;
  double t5769;
  double t5770;
  double t5745;
  double t5757;
  double t5758;
  double t5088;
  double t5092;
  double t5850;
  double t5863;
  double t5191;
  double t5214;
  double t5215;
  double t5228;
  double t5329;
  double t5421;
  double t5933;
  double t5934;
  double t5953;
  double t5969;
  double t5972;
  double t5973;
  double t5451;
  double t5465;
  double t5483;
  double t5489;
  double t5497;
  double t5508;
  double t5537;
  double t5539;
  double t5540;
  double t5656;
  double t5663;
  double t5666;
  double t5668;
  double t5675;
  double t5688;
  double t5691;
  double t5698;
  double t5710;
  double t5723;
  double t5734;
  double t5743;
  double t5763;
  double t5805;
  double t6044;
  double t6048;
  double t6054;
  double t6057;
  double t6059;
  double t6069;
  double t5820;
  double t5822;
  double t3175;
  double t3395;
  double t6213;
  double t6215;
  double t6216;
  double t6218;
  double t6221;
  double t6226;
  double t6233;
  double t6242;
  double t6165;
  double t6175;
  double t6177;
  double t6145;
  double t6157;
  double t6158;
  double t3955;
  double t4170;
  double t4179;
  double t4180;
  double t4218;
  double t4230;
  double t4233;
  double t4251;
  double t4257;
  double t4286;
  double t4349;
  double t4370;
  double t4375;
  double t4384;
  double t4475;
  double t4519;
  double t4524;
  double t4525;
  double t4538;
  double t4547;
  double t4575;
  double t4615;
  double t4648;
  double t4649;
  double t4691;
  double t4697;
  double t4717;
  double t4741;
  double t4772;
  double t4858;
  double t4907;
  double t4910;
  double t4928;
  double t4929;
  double t4937;
  double t4940;
  double t4985;
  double t4991;
  double t5009;
  double t5010;
  double t5025;
  double t5053;
  double t5070;
  double t5079;
  double t5080;
  double t6310;
  double t6312;
  double t6313;
  double t6316;
  double t6336;
  double t6337;
  double t6341;
  double t6343;
  double t6467;
  double t6468;
  double t6469;
  double t6472;
  double t5239;
  double t5314;
  double t5360;
  double t5415;
  double t5423;
  double t5458;
  double t6545;
  double t6546;
  double t6552;
  double t6554;
  double t5762;
  double t5777;
  double t5780;
  double t5807;
  double t5812;
  double t5823;
  double t6647;
  double t6649;
  double t6653;
  double t6540;
  double t6541;
  double t5868;
  double t5873;
  double t5879;
  double t5889;
  double t5891;
  double t5898;
  double t5899;
  double t5902;
  double t5905;
  double t5906;
  double t6555;
  double t6569;
  double t5967;
  double t5974;
  double t5983;
  double t5996;
  double t5998;
  double t6011;
  double t6579;
  double t6586;
  double t6587;
  double t6588;
  double t6589;
  double t6590;
  double t6593;
  double t6599;
  double t6601;
  double t6603;
  double t6605;
  double t6608;
  double t6609;
  double t6612;
  double t6614;
  double t6617;
  double t6628;
  double t6632;
  double t6635;
  double t6636;
  double t6640;
  double t6645;
  double t6646;
  double t6665;
  double t6667;
  double t6055;
  double t6070;
  double t6075;
  double t6684;
  double t6686;
  double t6083;
  double t6095;
  double t6096;
  double t6764;
  double t6765;
  double t6766;
  double t6705;
  double t6706;
  double t6710;
  double t6711;
  double t6859;
  double t6861;
  double t6867;
  double t6868;
  double t6874;
  double t6876;
  double t6880;
  double t6881;
  double t6884;
  double t6886;
  double t6826;
  double t6827;
  double t6829;
  double t6818;
  double t6820;
  double t6824;
  double t5211;
  double t5213;
  double t5377;
  double t5463;
  double t5467;
  double t5473;
  double t5788;
  double t5824;
  double t5829;
  double t5838;
  double t5842;
  double t5845;
  double t6557;
  double t6566;
  double t6573;
  double t6576;
  double t6584;
  double t6585;
  double t6656;
  double t6657;
  double t6672;
  double t6673;
  double t6674;
  double t6678;
  double t6681;
  double t6687;
  double t6688;
  double t6690;
  double t6697;
  double t6704;
  double t6712;
  double t6715;
  double t6718;
  double t6719;
  double t6726;
  double t6727;
  double t6951;
  double t6952;
  double t6954;
  double t6957;
  double t6915;
  double t6918;
  double t6920;
  double t6925;
  double t6931;
  double t6183;
  double t7041;
  double t7044;
  double t7034;
  double t7035;
  double t6904;
  double t6933;
  double t6934;
  double t6948;
  double t6960;
  double t6961;
  double t7122;
  double t7123;
  double t7125;
  double t6974;
  double t6980;
  double t6987;
  double t6988;
  double t6996;
  double t6997;
  double t6999;
  double t7001;
  double t7002;
  double t7003;
  double t7004;
  double t7006;
  double t7007;
  double t7010;
  double t7011;
  double t7012;
  double t7013;
  double t7014;
  double t7015;
  double t7017;
  double t7024;
  double t7025;
  double t7026;
  double t7027;
  double t7078;
  double t7079;
  double t7173;
  double t7175;
  double t7178;
  double t7179;
  double t7049;
  double t7050;
  double t7247;
  double t7249;
  double t7250;
  double t7253;
  double t7255;
  double t7257;
  double t7260;
  double t7265;
  double t7266;
  double t7268;
  double t7227;
  double t7232;
  double t7233;
  double t7234;
  double t7235;
  double t7223;
  double t7224;
  double t7225;
  double t7287;
  double t7289;
  double t7305;
  double t7306;
  double t7308;
  double t7312;
  double t7314;
  double t7321;
  double t7278;
  double t7288;
  double t7290;
  double t7291;
  double t7294;
  double t7295;
  double t7296;
  double t7311;
  double t7324;
  double t7325;
  double t7327;
  double t7328;
  double t7329;
  double t7354;
  double t7355;
  double t7356;
  double t7109;
  double t7111;
  double t7115;
  double t7133;
  double t7394;
  double t7142;
  double t7148;
  double t7154;
  double t7156;
  double t7159;
  double t7163;
  double t7423;
  double t7424;
  double t7427;
  double t7429;
  double t7199;
  double t7203;
  double t7385;
  double t7091;
  double t7387;
  double t7094;
  double t7110;
  double t7392;
  double t7121;
  double t7393;
  double t7397;
  double t7127;
  double t7400;
  double t7402;
  double t7135;
  double t7408;
  double t7410;
  double t7411;
  double t7143;
  double t7413;
  double t7150;
  double t7416;
  double t7155;
  double t7420;
  double t7158;
  double t7421;
  double t7165;
  double t7184;
  double t7422;
  double t7426;
  double t7431;
  double t7432;
  double t7435;
  double t7436;
  double t7200;
  double t7437;
  double t7207;
  double t7439;
  double t7219;
  double t7237;
  double t7238;
  double t7239;
  double t7241;
  double t7256;
  double t7271;
  double t7499;
  double t7500;
  double t7502;
  double t7493;
  double t7494;
  double t7497;
  double t7483;
  double t7484;
  double t7490;
  double t7276;
  t906 = Cos(var1[4]);
  t160 = Cos(var1[5]);
  t297 = Sin(var1[4]);
  t1015 = Sin(var1[5]);
  t1131 = Cos(var1[3]);
  t445 = t160*t297;
  t1040 = t906*t1015;
  t1076 = t445 + t1040;
  t139 = Sin(var1[3]);
  t1139 = t906*t160;
  t1167 = -1.*t297*t1015;
  t1181 = t1139 + t1167;
  t1451 = Cos(var1[2]);
  t1185 = t1131*t1181;
  t38 = Sin(var1[2]);
  t2078 = -1.*t160*t297;
  t2097 = -1.*t906*t1015;
  t2102 = t2078 + t2097;
  t1898 = -1.*t160;
  t1910 = 1. + t1898;
  t1955 = -1.3127*t1910;
  t1956 = -1.3127*t160;
  t2029 = -0.06*t1015;
  t2036 = t1955 + t1956 + t2029;
  t1088 = -1.*t139*t1076;
  t1208 = t1088 + t1185;
  t1263 = -1.*t38*t1208;
  t1589 = t1131*t1076;
  t1634 = t139*t1181;
  t1651 = t1589 + t1634;
  t1835 = -1.*t1451*t1651;
  t1875 = t1263 + t1835;
  t2105 = t139*t2102;
  t2107 = t2105 + t1185;
  t2124 = -1.*t1451*t2107;
  t2130 = t1131*t2102;
  t2141 = -1.*t139*t1181;
  t2142 = t2130 + t2141;
  t2204 = -1.*t38*t2142;
  t2206 = t2124 + t2204;
  t2526 = -1.*t906;
  t2572 = 1. + t2526;
  t2583 = -0.9063*t2572;
  t2609 = -0.06*t160*t297;
  t2705 = t906*t2036;
  t2707 = t2583 + t2609 + t2705;
  t2424 = 0.06*t906*t160;
  t2442 = 0.9063*t297;
  t2452 = t297*t2036;
  t2474 = t2424 + t2442 + t2452;
  t3085 = -1.*t38*t2107;
  t3171 = t1451*t2142;
  t3173 = t3085 + t3171;
  t3230 = t1451*t2107;
  t3245 = t38*t2142;
  t3256 = t3230 + t3245;
  t3373 = t1451*t1208;
  t3374 = -1.*t38*t1651;
  t3385 = t3373 + t3374;
  t3280 = t38*t1208;
  t3338 = t1451*t1651;
  t3347 = t3280 + t3338;
  t3769 = -1.*t1131;
  t3773 = 1. + t3769;
  t3774 = -0.4999*t3773;
  t3789 = t1131*t2707;
  t3794 = -1.*t139*t2474;
  t3796 = t3774 + t3789 + t3794;
  t3686 = 0.4999*t139;
  t3733 = t139*t2707;
  t3743 = t1131*t2474;
  t3750 = t3686 + t3733 + t3743;
  t1889 = 0.9063*t160;
  t2037 = t160*t2036;
  t2076 = 0.06*t160*t1015;
  t2077 = t1889 + t2037 + t2076;
  t2300 = Power(t160,2);
  t2303 = -0.06*t2300;
  t2309 = 0.9063*t1015;
  t2336 = t2036*t1015;
  t2351 = t2303 + t2309 + t2336;
  t3917 = -1.*t1131*t1076;
  t3922 = t3917 + t2141;
  t3931 = t1451*t3922;
  t3945 = t1263 + t3931;
  t2494 = t2474*t1076;
  t2523 = 0.4999*t1181;
  t2749 = t2707*t1181;
  t2750 = t2494 + t2523 + t2749;
  t3957 = -1.*t139*t2102;
  t3977 = -1.*t1131*t1181;
  t4022 = t3957 + t3977;
  t4038 = t1451*t4022;
  t4063 = t4038 + t2204;
  t2860 = -1.*t2707*t2102;
  t2868 = 0.4999*t1076;
  t2879 = -1.*t2474*t1181;
  t2993 = t2860 + t2868 + t2879;
  t3481 = -1.*t1451*t2142;
  t3632 = -1.*t1451*t1208;
  t4298 = t38*t4022;
  t4346 = t4298 + t3171;
  t4389 = t38*t3922;
  t4398 = t3373 + t4389;
  t3752 = -1.*t3750*t2107;
  t3797 = -1.*t3796*t2142;
  t3802 = t3752 + t3797;
  t3831 = t3796*t1208;
  t3874 = t3750*t1651;
  t3877 = t3831 + t3874;
  t4863 = -0.4999*t139;
  t4867 = -1.*t139*t2707;
  t4883 = -1.*t1131*t2474;
  t4906 = t4863 + t4867 + t4883;
  t4774 = 0.4999*t1131;
  t4843 = t4774 + t3789 + t3794;
  t5102 = -1.*t906*t160;
  t5109 = t297*t1015;
  t5110 = t5102 + t5109;
  t5248 = -0.06*t906*t160;
  t5282 = -0.9063*t297;
  t5304 = -1.*t297*t2036;
  t5310 = t5248 + t5282 + t5304;
  t5237 = 0.9063*t906;
  t5238 = t5237 + t2609 + t2705;
  t5114 = t1131*t5110;
  t5128 = t3957 + t5114;
  t5139 = t1451*t5128;
  t5146 = t139*t5110;
  t5157 = t2130 + t5146;
  t5183 = -1.*t38*t5157;
  t5187 = t5139 + t5183;
  t5551 = t38*t5128;
  t5557 = t1451*t5157;
  t5642 = t5551 + t5557;
  t5765 = t1131*t5238;
  t5769 = t139*t5310;
  t5770 = t5765 + t5769;
  t5745 = -1.*t139*t5238;
  t5757 = t1131*t5310;
  t5758 = t5745 + t5757;
  t5088 = -0.03428571*var2[5]*t3173;
  t5092 = 1.142857*t2351*t3173;
  t5850 = -0.06*t160;
  t5863 = 0. + t5850;
  t5191 = 1.142857*t2077*t5187;
  t5214 = 1.142857*t2993*t3173;
  t5215 = 0.4999*t2102;
  t5228 = t2707*t2102;
  t5329 = t2474*t1181;
  t5421 = -1.*t2474*t2102;
  t5933 = t5863*t297;
  t5934 = -0.06*t906*t1015;
  t5953 = t5933 + t5934;
  t5969 = t906*t5863;
  t5972 = 0.06*t297*t1015;
  t5973 = t5969 + t5972;
  t5451 = -1.*t2707*t5110;
  t5465 = 1.142857*t2750*t5187;
  t5483 = 1.142857*t3256*t1875;
  t5489 = 1.142857*t2206*t3347;
  t5497 = 2.285714*t3173*t3385;
  t5508 = -1.*t38*t5128;
  t5537 = -1.*t1451*t5157;
  t5539 = t5508 + t5537;
  t5540 = 1.142857*t3256*t5539;
  t5656 = 1.142857*t2206*t5642;
  t5663 = 2.285714*t3173*t5187;
  t5666 = t5483 + t5489 + t5497 + t5540 + t5656 + t5663;
  t5668 = 0.5*var2[1]*t5666;
  t5675 = 2.285714*t3173*t3347;
  t5688 = 2.285714*t3256*t3385;
  t5691 = 2.285714*t3173*t5642;
  t5698 = 2.285714*t3256*t5187;
  t5710 = t5675 + t5688 + t5691 + t5698;
  t5723 = 0.5*var2[0]*t5710;
  t5734 = 1.142857*t3173*t3802;
  t5743 = t3750*t2107;
  t5763 = t3796*t2142;
  t5805 = 1.142857*t3877*t5187;
  t6044 = -1.*t139*t5953;
  t6048 = t1131*t5973;
  t6054 = t6044 + t6048;
  t6057 = t1131*t5953;
  t6059 = t139*t5973;
  t6069 = t6057 + t6059;
  t5820 = -1.*t3796*t5128;
  t5822 = -1.*t3750*t5157;
  t3175 = Power(t3173,2);
  t3395 = Power(t3385,2);
  t6213 = 1.142857*t3175;
  t6215 = 1.142857*t2206*t3256;
  t6216 = 1.142857*t1875*t3347;
  t6218 = 1.142857*t3395;
  t6221 = t6213 + t6215 + t6216 + t6218;
  t6226 = 1.142857*t3802*t3385;
  t6233 = 1.142857*t3173*t3877;
  t6242 = t6226 + t6233;
  t6165 = 1.142857*t2750*t3173;
  t6175 = 1.142857*t2993*t3385;
  t6177 = t6165 + t6175;
  t6145 = 1.142857*t2077*t3173;
  t6157 = 1.142857*t2351*t3385;
  t6158 = t6145 + t6157;
  t3955 = -0.03428571*var2[5]*t3945;
  t4170 = 1.142857*t2077*t4063;
  t4179 = 1.142857*t2351*t3945;
  t4180 = t4170 + t4179;
  t4218 = 0.5*var2[4]*t4180;
  t4230 = 1.142857*t2750*t4063;
  t4233 = 1.142857*t2993*t3945;
  t4251 = t4230 + t4233;
  t4257 = 0.5*var2[3]*t4251;
  t4286 = 2.285714*t3173*t4063;
  t4349 = 1.142857*t4346*t2206;
  t4370 = -1.*t38*t4022;
  t4375 = t4370 + t3481;
  t4384 = 1.142857*t4375*t3256;
  t4475 = 1.142857*t4398*t1875;
  t4519 = -1.*t38*t3922;
  t4524 = t3632 + t4519;
  t4525 = 1.142857*t4524*t3347;
  t4538 = 2.285714*t3945*t3385;
  t4547 = t4286 + t4349 + t4384 + t4475 + t4525 + t4538;
  t4575 = 0.5*var2[1]*t4547;
  t4615 = 2.285714*t4346*t3173;
  t4648 = 2.285714*t4063*t3256;
  t4649 = 2.285714*t3945*t3347;
  t4691 = 2.285714*t4398*t3385;
  t4697 = t4615 + t4648 + t4649 + t4691;
  t4717 = 0.5*var2[0]*t4697;
  t4741 = 1.142857*t3802*t3945;
  t4772 = -1.*t3796*t4022;
  t4858 = -1.*t4843*t2107;
  t4907 = -1.*t4906*t2142;
  t4910 = -1.*t3750*t2142;
  t4928 = t4772 + t4858 + t4907 + t4910;
  t4929 = 1.142857*t4928*t3385;
  t4937 = 1.142857*t4063*t3877;
  t4940 = t4906*t1208;
  t4985 = t3750*t1208;
  t4991 = t3796*t3922;
  t5009 = t4843*t1651;
  t5010 = t4940 + t4985 + t4991 + t5009;
  t5025 = 1.142857*t3173*t5010;
  t5053 = t4741 + t4929 + t4937 + t5025;
  t5070 = 0.5*var2[2]*t5053;
  t5079 = t3955 + t4218 + t4257 + t4575 + t4717 + t5070;
  t5080 = var2[0]*t5079;
  t6310 = t139*t1076;
  t6312 = t6310 + t3977;
  t6313 = t38*t6312;
  t6316 = t6313 + t3931;
  t6336 = -1.*t1131*t2102;
  t6337 = t6336 + t1634;
  t6341 = t38*t6337;
  t6343 = t4038 + t6341;
  t6467 = -0.4999*t1131;
  t6468 = -1.*t1131*t2707;
  t6469 = t139*t2474;
  t6472 = t6467 + t6468 + t6469;
  t5239 = t5238*t1076;
  t5314 = t5310*t1181;
  t5360 = t5215 + t5228 + t5239 + t5314 + t5329;
  t5415 = -1.*t5310*t2102;
  t5423 = -1.*t5238*t1181;
  t5458 = t5415 + t5421 + t2523 + t5423 + t5451;
  t6545 = -1.*t139*t5110;
  t6546 = t6336 + t6545;
  t6552 = t38*t6546;
  t6554 = t5139 + t6552;
  t5762 = t5758*t1208;
  t5777 = t5770*t1651;
  t5780 = t5743 + t5762 + t5763 + t5777;
  t5807 = -1.*t5770*t2107;
  t5812 = -1.*t5758*t2142;
  t5823 = t5807 + t5812 + t5820 + t5822;
  t6647 = -1.*t1131*t5238;
  t6649 = -1.*t139*t5310;
  t6653 = t6647 + t6649;
  t6540 = -0.03428571*var2[5]*t4346;
  t6541 = 1.142857*t2351*t4346;
  t5868 = t5863*t160;
  t5873 = 0.06*t2300;
  t5879 = -0.9063*t1015;
  t5889 = -1.*t2036*t1015;
  t5891 = Power(t1015,2);
  t5898 = -0.06*t5891;
  t5899 = t5868 + t5873 + t5879 + t5889 + t5898;
  t5902 = t5863*t1015;
  t5905 = 0.12*t160*t1015;
  t5906 = t1889 + t2037 + t5902 + t5905;
  t6555 = 1.142857*t2077*t6554;
  t6569 = 1.142857*t2993*t4346;
  t5967 = t5953*t1076;
  t5974 = t1181*t5973;
  t5983 = t5215 + t5228 + t5967 + t5329 + t5974;
  t5996 = -1.*t5953*t1181;
  t5998 = -1.*t2102*t5973;
  t6011 = t5421 + t2523 + t5996 + t5998 + t5451;
  t6579 = 1.142857*t2750*t6554;
  t6586 = 2.285714*t3256*t4398;
  t6587 = 2.285714*t4346*t3347;
  t6588 = 2.285714*t3256*t6554;
  t6589 = 2.285714*t4346*t5642;
  t6590 = t6586 + t6587 + t6588 + t6589;
  t6593 = 0.5*var2[0]*t6590;
  t6599 = 1.142857*t3256*t3945;
  t6601 = 1.142857*t3173*t4398;
  t6603 = 1.142857*t4063*t3347;
  t6605 = 1.142857*t4346*t3385;
  t6608 = t1451*t6546;
  t6609 = t5508 + t6608;
  t6612 = 1.142857*t3256*t6609;
  t6614 = 1.142857*t3173*t6554;
  t6617 = 1.142857*t4063*t5642;
  t6628 = 1.142857*t4346*t5187;
  t6632 = t6599 + t6601 + t6603 + t6605 + t6612 + t6614 + t6617 + t6628;
  t6635 = 0.5*var2[1]*t6632;
  t6636 = 1.142857*t3256*t4928;
  t6640 = 1.142857*t4346*t3802;
  t6645 = t3796*t4022;
  t6646 = t4843*t2107;
  t6665 = t4906*t2142;
  t6667 = t3750*t2142;
  t6055 = t1208*t6054;
  t6070 = t1651*t6069;
  t6075 = t5743 + t5763 + t6055 + t6070;
  t6684 = 1.142857*t3877*t6554;
  t6686 = 1.142857*t5010*t5642;
  t6083 = -1.*t2142*t6054;
  t6095 = -1.*t2107*t6069;
  t6096 = t6083 + t6095 + t5820 + t5822;
  t6764 = -1.*t1131*t5953;
  t6765 = -1.*t139*t5973;
  t6766 = t6764 + t6765;
  t6705 = -1.*t4906*t5128;
  t6706 = -1.*t3750*t5128;
  t6710 = -1.*t3796*t6546;
  t6711 = -1.*t4843*t5157;
  t6859 = 1.142857*t4346*t3173;
  t6861 = 1.142857*t4063*t3256;
  t6867 = 1.142857*t3945*t3347;
  t6868 = 1.142857*t4398*t3385;
  t6874 = t6859 + t6861 + t6867 + t6868;
  t6876 = 1.142857*t3802*t4398;
  t6880 = 1.142857*t4928*t3347;
  t6881 = 1.142857*t4346*t3877;
  t6884 = 1.142857*t3256*t5010;
  t6886 = t6876 + t6880 + t6881 + t6884;
  t6826 = 1.142857*t2750*t4346;
  t6827 = 1.142857*t2993*t4398;
  t6829 = t6826 + t6827;
  t6818 = 1.142857*t2077*t4346;
  t6820 = 1.142857*t2351*t4398;
  t6824 = t6818 + t6820;
  t5211 = t5092 + t5191;
  t5213 = 0.5*var2[4]*t5211;
  t5377 = 1.142857*t5360*t3173;
  t5463 = 1.142857*t5458*t3385;
  t5467 = t5214 + t5377 + t5463 + t5465;
  t5473 = 0.5*var2[3]*t5467;
  t5788 = 1.142857*t3173*t5780;
  t5824 = 1.142857*t3385*t5823;
  t5829 = t5734 + t5788 + t5805 + t5824;
  t5838 = 0.5*var2[2]*t5829;
  t5842 = t5088 + t5213 + t5473 + t5668 + t5723 + t5838;
  t5845 = var2[0]*t5842;
  t6557 = t6541 + t6555;
  t6566 = 0.5*var2[4]*t6557;
  t6573 = 1.142857*t5360*t4346;
  t6576 = 1.142857*t5458*t4398;
  t6584 = t6569 + t6573 + t6576 + t6579;
  t6585 = 0.5*var2[3]*t6584;
  t6656 = t6653*t1208;
  t6657 = t5770*t1208;
  t6672 = t5758*t3922;
  t6673 = t5758*t1651;
  t6674 = t6645 + t6646 + t6656 + t6657 + t6665 + t6667 + t6672 + t6673;
  t6678 = 1.142857*t3256*t6674;
  t6681 = 1.142857*t4346*t5780;
  t6687 = 1.142857*t4398*t5823;
  t6688 = -1.*t5758*t4022;
  t6690 = -1.*t5758*t2107;
  t6697 = -1.*t6653*t2142;
  t6704 = -1.*t5770*t2142;
  t6712 = t6688 + t6690 + t6697 + t6704 + t6705 + t6706 + t6710 + t6711;
  t6715 = 1.142857*t3347*t6712;
  t6718 = t6636 + t6640 + t6678 + t6681 + t6684 + t6686 + t6687 + t6715;
  t6719 = 0.5*var2[2]*t6718;
  t6726 = t6540 + t6566 + t6585 + t6593 + t6635 + t6719;
  t6727 = var2[0]*t6726;
  t6951 = -0.9063*t906;
  t6952 = 0.06*t160*t297;
  t6954 = -1.*t906*t2036;
  t6957 = t6951 + t6952 + t6954;
  t6915 = t6310 + t5114;
  t6918 = t1451*t6915;
  t6920 = t1589 + t6545;
  t6925 = t38*t6920;
  t6931 = t6918 + t6925;
  t6183 = 2.285714*t3173*t3256;
  t7041 = t1131*t6957;
  t7044 = t7041 + t6649;
  t7034 = t139*t6957;
  t7035 = t7034 + t5757;
  t6904 = -0.03428571*var2[5]*t5642;
  t6933 = 1.142857*t2077*t6931;
  t6934 = 1.142857*t2351*t5642;
  t6948 = t2474*t2102;
  t6960 = 0.4999*t5110;
  t6961 = t2707*t5110;
  t7122 = -1.*t5863*t297;
  t7123 = 0.06*t906*t1015;
  t7125 = t7122 + t7123;
  t6974 = -1.*t2707*t1076;
  t6980 = -1.*t2474*t5110;
  t6987 = 1.142857*t2750*t6931;
  t6988 = 1.142857*t2993*t5642;
  t6996 = Power(t3256,2);
  t6997 = 2.285714*t6996;
  t6999 = 2.285714*t3256*t6931;
  t7001 = 2.285714*t3347*t5642;
  t7002 = Power(t5642,2);
  t7003 = 2.285714*t7002;
  t7004 = t6997 + t6999 + t7001 + t7003;
  t7006 = 0.5*var2[0]*t7004;
  t7007 = -1.*t38*t6915;
  t7010 = t1451*t6920;
  t7011 = t7007 + t7010;
  t7012 = 1.142857*t3256*t7011;
  t7013 = 1.142857*t3173*t6931;
  t7014 = 1.142857*t3385*t5642;
  t7015 = 1.142857*t3347*t5187;
  t7017 = 2.285714*t5642*t5187;
  t7024 = t6183 + t7012 + t7013 + t7014 + t7015 + t7017;
  t7025 = 0.5*var2[1]*t7024;
  t7026 = 1.142857*t3877*t6931;
  t7027 = 1.142857*t3802*t5642;
  t7078 = t3796*t5128;
  t7079 = t3750*t5157;
  t7173 = t139*t7125;
  t7175 = t7173 + t6048;
  t7178 = t1131*t7125;
  t7179 = t7178 + t6765;
  t7049 = -1.*t3750*t6915;
  t7050 = -1.*t3796*t6920;
  t7247 = 1.142857*t3173*t3347;
  t7249 = 1.142857*t3256*t3385;
  t7250 = 1.142857*t3173*t5642;
  t7253 = 1.142857*t3256*t5187;
  t7255 = t7247 + t7249 + t7250 + t7253;
  t7257 = 1.142857*t3256*t3802;
  t7260 = 1.142857*t3256*t5780;
  t7265 = 1.142857*t3877*t5642;
  t7266 = 1.142857*t3347*t5823;
  t7268 = t7257 + t7260 + t7265 + t7266;
  t7227 = 1.142857*t2993*t3256;
  t7232 = 1.142857*t5360*t3256;
  t7233 = 1.142857*t5458*t3347;
  t7234 = 1.142857*t2750*t5642;
  t7235 = t7227 + t7232 + t7233 + t7234;
  t7223 = 1.142857*t2351*t3256;
  t7224 = 1.142857*t2077*t5642;
  t7225 = t7223 + t7224;
  t7287 = t2609 + t5934;
  t7289 = t5248 + t5972;
  t7305 = -1.*t139*t7287;
  t7306 = t1131*t7289;
  t7308 = t7305 + t7306;
  t7312 = t1131*t7287;
  t7314 = t139*t7289;
  t7321 = t7312 + t7314;
  t7278 = 0. + t5879 + t5889 + t5898;
  t7288 = t7287*t1076;
  t7290 = t1181*t7289;
  t7291 = t5215 + t5228 + t7288 + t5329 + t7290;
  t7294 = -1.*t7287*t1181;
  t7295 = -1.*t2102*t7289;
  t7296 = t5421 + t2523 + t7294 + t7295 + t5451;
  t7311 = t1208*t7308;
  t7324 = t1651*t7321;
  t7325 = t5743 + t5763 + t7311 + t7324;
  t7327 = -1.*t2142*t7308;
  t7328 = -1.*t2107*t7321;
  t7329 = t7327 + t7328 + t5820 + t5822;
  t7354 = -1.*t1131*t7287;
  t7355 = -1.*t139*t7289;
  t7356 = t7354 + t7355;
  t7109 = 1.142857*t5458*t3256;
  t7111 = t5310*t2102;
  t7115 = t5238*t1181;
  t7133 = -1.*t5238*t2102;
  t7394 = t6952 + t7123;
  t7142 = -1.*t5310*t5110;
  t7148 = 1.142857*t5360*t5642;
  t7154 = 1.142857*t5780*t5642;
  t7156 = 1.142857*t3256*t5823;
  t7159 = t5770*t2107;
  t7163 = t5758*t2142;
  t7423 = t139*t7394;
  t7424 = t7423 + t7306;
  t7427 = t1131*t7394;
  t7429 = t7427 + t7355;
  t7199 = -1.*t5758*t5128;
  t7203 = -1.*t5770*t5157;
  t7385 = 1.142857*t2077*t3256;
  t7091 = 1.142857*t5906*t3256;
  t7387 = 1.142857*t7278*t5642;
  t7094 = 1.142857*t5899*t5642;
  t7110 = 1.142857*t6011*t3256;
  t7392 = 1.142857*t7296*t3256;
  t7121 = t5953*t1181;
  t7393 = t7287*t1181;
  t7397 = t7394*t1181;
  t7127 = t2102*t5973;
  t7400 = t2102*t7289;
  t7402 = t1076*t7289;
  t7135 = -1.*t2102*t5953;
  t7408 = -1.*t2102*t7287;
  t7410 = -1.*t2102*t7394;
  t7411 = -1.*t1181*t7289;
  t7143 = -1.*t5973*t5110;
  t7413 = -1.*t7289*t5110;
  t7150 = 1.142857*t5983*t5642;
  t7416 = 1.142857*t7291*t5642;
  t7155 = 1.142857*t6075*t5642;
  t7420 = 1.142857*t7325*t5642;
  t7158 = 1.142857*t3256*t6096;
  t7421 = 1.142857*t3256*t7329;
  t7165 = t2142*t6054;
  t7184 = t2107*t6069;
  t7422 = t2142*t7308;
  t7426 = t1651*t7424;
  t7431 = t1208*t7429;
  t7432 = t2107*t7321;
  t7435 = -1.*t2107*t7424;
  t7436 = -1.*t2142*t7429;
  t7200 = -1.*t6054*t5128;
  t7437 = -1.*t7308*t5128;
  t7207 = -1.*t6069*t5157;
  t7439 = -1.*t7321*t5157;
  t7219 = -0.03428571*var2[5]*t3256;
  t7237 = 2.285714*t3256*t3347;
  t7238 = 2.285714*t3256*t5642;
  t7239 = t7237 + t7238;
  t7241 = var2[0]*t7239;
  t7256 = 0.5*var2[1]*t7255;
  t7271 = 0.5*var2[0]*t7255;
  t7499 = 1.142857*t3256*t7325;
  t7500 = 1.142857*t3347*t7329;
  t7502 = t7257 + t7499 + t7265 + t7500;
  t7493 = 1.142857*t7291*t3256;
  t7494 = 1.142857*t7296*t3347;
  t7497 = t7227 + t7493 + t7494 + t7234;
  t7483 = 1.142857*t7278*t3256;
  t7484 = 1.142857*t2077*t3347;
  t7490 = t7223 + t7483 + t7484 + t7224;
  t7276 = -0.03428571*var2[0]*t3256;
  p_output1[0]=var2[0]*(0.5*(2.285714*t3175 + 2.285714*t2206*t3256 + 2.285714*t1875*t3347 + 2.285714*t3395)*var2[0] + 0.5*(3.428571*t2206*t3173 + 3.428571*t1875*t3385 + 1.142857*t3347*(t3632 + t1651*t38) + 1.142857*t3256*(t3481 + t2107*t38))*var2[1] + 0.5*(1.142857*t1875*t3802 + 1.142857*t2206*t3877)*var2[2] + 0.5*(1.142857*t2206*t2750 + 1.142857*t1875*t2993)*var2[3] + 0.5*(1.142857*t2077*t2206 + 1.142857*t1875*t2351)*var2[4] - 0.03428571*t1875*var2[5]);
  p_output1[1]=t5080;
  p_output1[2]=t5845;
  p_output1[3]=var2[0]*(t5088 + t5668 + t5723 + 0.5*(t5734 + t5805 + 1.142857*t3173*t6075 + 1.142857*t3385*t6096)*var2[2] + 0.5*(t5214 + t5465 + 1.142857*t3173*t5983 + 1.142857*t3385*t6011)*var2[3] + 0.5*(t5092 + t5191 + 1.142857*t3173*t5899 + 1.142857*t3385*t5906)*var2[4]);
  p_output1[4]=(2.285714*t3347*t3385 + t6183)*var2[0] + 0.5*t6221*var2[1] + 0.5*t6242*var2[2] + 0.5*t6177*var2[3] + 0.5*t6158*var2[4] - 0.03428571*t3385*var2[5];
  p_output1[5]=0.5*t6221*var2[0];
  p_output1[6]=0.5*t6242*var2[0];
  p_output1[7]=0.5*t6177*var2[0];
  p_output1[8]=0.5*t6158*var2[0];
  p_output1[9]=-0.03428571*t3385*var2[0];
  p_output1[10]=t5080;
  p_output1[11]=var2[0]*(0.5*(2.285714*Power(t4346,2) + 2.285714*Power(t4398,2) + 2.285714*t3347*t6316 + 2.285714*t3256*t6343)*var2[0] + 0.5*(2.285714*t4063*t4346 + 2.285714*t3945*t4398 + 1.142857*t3347*(t4519 + t1451*t6312) + 1.142857*t3385*t6316 + 1.142857*t3256*(t4370 + t1451*t6337) + 1.142857*t3173*t6343)*var2[1] + 0.5*(2.285714*t4398*t4928 + 2.285714*t4346*t5010 + 1.142857*t3802*t6316 + 1.142857*t3877*t6343 + 1.142857*t3256*(t3750*t3922 + 2.*t1208*t4843 + t1651*t4906 + 2.*t3922*t4906 + t3796*t6312 + t1208*t6472) + 1.142857*t3347*(-1.*t3750*t4022 - 2.*t2142*t4843 - 1.*t2107*t4906 - 2.*t4022*t4906 - 1.*t3796*t6337 - 1.*t2142*t6472))*var2[2] + 0.5*(1.142857*t2993*t6316 + 1.142857*t2750*t6343)*var2[3] + 0.5*(1.142857*t2351*t6316 + 1.142857*t2077*t6343)*var2[4] - 0.03428571*t6316*var2[5]);
  p_output1[12]=t6727;
  p_output1[13]=var2[0]*(t6540 + t6593 + t6635 + 0.5*(1.142857*t4346*t6075 + 1.142857*t4398*t6096 + t6636 + t6640 + t6684 + t6686 + 1.142857*t3256*(t1651*t6054 + t3922*t6054 + t1208*t6069 + t6645 + t6646 + t6665 + t6667 + t1208*t6766) + 1.142857*t3347*(-1.*t2107*t6054 - 1.*t4022*t6054 - 1.*t2142*t6069 + t6705 + t6706 + t6710 + t6711 - 1.*t2142*t6766))*var2[2] + 0.5*(1.142857*t4346*t5983 + 1.142857*t4398*t6011 + t6569 + t6579)*var2[3] + 0.5*(1.142857*t4346*t5899 + 1.142857*t4398*t5906 + t6541 + t6555)*var2[4]);
  p_output1[14]=(2.285714*t3256*t4346 + 2.285714*t3347*t4398)*var2[0] + 0.5*t6874*var2[1] + 0.5*t6886*var2[2] + 0.5*t6829*var2[3] + 0.5*t6824*var2[4] - 0.03428571*t4398*var2[5];
  p_output1[15]=0.5*t6874*var2[0];
  p_output1[16]=0.5*t6886*var2[0];
  p_output1[17]=0.5*t6829*var2[0];
  p_output1[18]=0.5*t6824*var2[0];
  p_output1[19]=-0.03428571*t4398*var2[0];
  p_output1[20]=t5845;
  p_output1[21]=t6727;
  p_output1[22]=var2[0]*(t6904 + t7006 + t7025 + 0.5*(2.285714*t5642*t5780 + 2.285714*t3256*t5823 + t7026 + t7027 + 1.142857*t3347*(-2.*t5128*t5758 - 2.*t5157*t5770 - 1.*t2107*t7035 - 1.*t2142*t7044 + t7049 + t7050) + 1.142857*t3256*(2.*t2142*t5758 + 2.*t2107*t5770 + t1651*t7035 + t1208*t7044 + t7078 + t7079))*var2[2] + 0.5*(2.285714*t3256*t5458 + 2.285714*t5360*t5642 + 1.142857*t3256*(2.*t1181*t5238 + t1076*t5310 + 2.*t2102*t5310 + t6948 + t1181*t6957 + t6960 + t6961) + 1.142857*t3347*(t5215 - 2.*t2102*t5238 - 1.*t1181*t5310 - 2.*t5110*t5310 - 1.*t2102*t6957 + t6974 + t6980) + t6987 + t6988)*var2[3] + 0.5*(t6933 + t6934)*var2[4]);
  p_output1[23]=var2[0]*(t6904 + t7006 + t7025 + 0.5*(t7026 + t7027 + t7154 + t7155 + t7156 + t7158 + 1.142857*t3256*(t7078 + t7079 + t7159 + t7163 + t7165 + t1651*t7175 + t1208*t7179 + t7184) + 1.142857*t3347*(t7049 + t7050 - 1.*t2107*t7175 - 1.*t2142*t7179 + t7199 + t7200 + t7203 + t7207))*var2[2] + 0.5*(t6987 + t6988 + t7109 + t7110 + 1.142857*t3256*(t1076*t5973 + t6948 + t6960 + t6961 + t7111 + t7115 + t7121 + t1181*t7125 + t7127) + 1.142857*t3347*(t5215 - 1.*t1181*t5973 + t6974 + t6980 - 1.*t2102*t7125 + t7133 + t7135 + t7142 + t7143) + t7148 + t7150)*var2[3] + 0.5*(t6933 + t6934 + t7091 + t7094)*var2[4]);
  p_output1[24]=t7219 + t7241 + t7256 + 0.5*t7268*var2[2] + 0.5*t7235*var2[3] + 0.5*t7225*var2[4];
  p_output1[25]=t7271;
  p_output1[26]=0.5*t7268*var2[0];
  p_output1[27]=0.5*t7235*var2[0];
  p_output1[28]=0.5*t7225*var2[0];
  p_output1[29]=t7276;
  p_output1[30]=var2[0]*(t5088 + t5668 + t5723 + 0.5*(t5734 + t5805 + 1.142857*t3173*t7325 + 1.142857*t3385*t7329)*var2[2] + 0.5*(t5214 + t5465 + 1.142857*t3173*t7291 + 1.142857*t3385*t7296)*var2[3] + 0.5*(1.142857*t2077*t3385 + t5092 + t5191 + 1.142857*t3173*t7278)*var2[4]);
  p_output1[31]=var2[0]*(t6540 + t6593 + t6635 + 0.5*(t6636 + t6640 + t6684 + t6686 + 1.142857*t4346*t7325 + 1.142857*t4398*t7329 + 1.142857*t3256*(t6645 + t6646 + t6665 + t6667 + t1651*t7308 + t3922*t7308 + t1208*t7321 + t1208*t7356) + 1.142857*t3347*(t6705 + t6706 + t6710 + t6711 - 1.*t2107*t7308 - 1.*t4022*t7308 - 1.*t2142*t7321 - 1.*t2142*t7356))*var2[2] + 0.5*(t6569 + t6579 + 1.142857*t4346*t7291 + 1.142857*t4398*t7296)*var2[3] + 0.5*(1.142857*t2077*t4398 + t6541 + t6555 + 1.142857*t4346*t7278)*var2[4]);
  p_output1[32]=var2[0]*(t6904 + t7006 + t7025 + 0.5*(t7026 + t7027 + t7154 + t7156 + t7420 + t7421 + 1.142857*t3256*(t7078 + t7079 + t7159 + t7163 + t7422 + t7426 + t7431 + t7432) + 1.142857*t3347*(t7049 + t7050 + t7199 + t7203 + t7435 + t7436 + t7437 + t7439))*var2[2] + 0.5*(t6987 + t6988 + t7109 + t7148 + t7392 + 1.142857*t3256*(t6948 + t6960 + t6961 + t7111 + t7115 + t7393 + t7397 + t7400 + t7402) + 1.142857*t3347*(t5215 + t6974 + t6980 + t7133 + t7142 + t7408 + t7410 + t7411 + t7413) + t7416)*var2[3] + 0.5*(t6933 + t6934 + t7385 + t7387)*var2[4]);
  p_output1[33]=var2[0]*(t6904 + t7006 + t7025 + 0.5*(t7026 + t7027 + t7155 + t7158 + t7420 + t7421 + 1.142857*t3256*(t7078 + t7079 + t7165 + t7184 + t7422 + t7426 + t7431 + t7432) + 1.142857*t3347*(t7049 + t7050 + t7200 + t7207 + t7435 + t7436 + t7437 + t7439))*var2[2] + 0.5*(t6987 + t6988 + t7110 + t7150 + t7392 + 1.142857*t3256*(t6948 + t6960 + t6961 + t7121 + t7127 + t7393 + t7397 + t7400 + t7402) + 1.142857*t3347*(t5215 + t6974 + t6980 + t7135 + t7143 + t7408 + t7410 + t7411 + t7413) + t7416)*var2[3] + 0.5*(1.142857*t3256*(-0.9063*t160 - 0.12*t1015*t160 - 1.*t160*t2036 - 1.*t1015*t5863) + 1.142857*t3347*t5899 + t6933 + t6934 + t7091 + t7094 + t7385 + t7387)*var2[4]);
  p_output1[34]=t7219 + t7241 + t7256 + 0.5*t7502*var2[2] + 0.5*t7497*var2[3] + 0.5*t7490*var2[4];
  p_output1[35]=t7271;
  p_output1[36]=0.5*t7502*var2[0];
  p_output1[37]=0.5*t7497*var2[0];
  p_output1[38]=0.5*t7490*var2[0];
  p_output1[39]=t7276;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 9 && ncols == 1) && 
      !(mrows == 1 && ncols == 9))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 9 && ncols == 1) && 
      !(mrows == 1 && ncols == 9))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 40, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_Ce3_vec_L4_J1_amber3_feet.hh"

namespace RightSS1
{

void J_Ce3_vec_L4_J1_amber3_feet_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
