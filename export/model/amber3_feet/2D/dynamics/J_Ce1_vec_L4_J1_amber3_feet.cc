/*
 * Automatically Generated from Mathematica.
 * Wed 1 Mar 2023 13:24:46 GMT-08:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t553;
  double t467;
  double t490;
  double t607;
  double t657;
  double t545;
  double t615;
  double t633;
  double t456;
  double t658;
  double t671;
  double t718;
  double t388;
  double t986;
  double t1051;
  double t1106;
  double t1331;
  double t1340;
  double t647;
  double t934;
  double t956;
  double t1357;
  double t1410;
  double t1412;
  double t1623;
  double t1648;
  double t1695;
  double t1712;
  double t1714;
  double t1791;
  double t1865;
  double t2084;
  double t1980;
  double t1988;
  double t2017;
  double t1439;
  double t1444;
  double t1507;
  double t1535;
  double t1558;
  double t1612;
  double t1718;
  double t1938;
  double t2031;
  double t2057;
  double t2214;
  double t2231;
  double t2853;
  double t2858;
  double t2912;
  double t2925;
  double t2950;
  double t2992;
  double t3042;
  double t2735;
  double t2746;
  double t2962;
  double t3048;
  double t3083;
  double t3084;
  double t3119;
  double t3172;
  double t3180;
  double t3181;
  double t3211;
  double t981;
  double t1353;
  double t2097;
  double t2123;
  double t1476;
  double t1911;
  double t1474;
  double t1525;
  double t1619;
  double t1921;
  double t2083;
  double t2271;
  double t2275;
  double t3407;
  double t3543;
  double t3545;
  double t3546;
  double t3548;
  double t3551;
  double t3554;
  double t3563;
  double t3577;
  double t3587;
  double t3440;
  double t3696;
  double t3721;
  double t3760;
  double t3774;
  double t3784;
  double t3791;
  double t3830;
  double t3843;
  double t3882;
  double t3895;
  double t3995;
  double t4000;
  double t3689;
  double t4001;
  double t4007;
  double t4016;
  double t4017;
  double t4025;
  double t4142;
  double t4148;
  double t4149;
  double t4078;
  double t4081;
  double t4134;
  double t4026;
  double t4047;
  double t4048;
  double t4237;
  double t2441;
  double t2501;
  double t2510;
  double t2530;
  double t4383;
  double t4423;
  double t4830;
  double t4834;
  double t4880;
  double t4884;
  double t4911;
  double t4940;
  double t4951;
  double t4982;
  double t5002;
  double t5014;
  double t4366;
  double t3416;
  double t3429;
  double t3437;
  double t3448;
  double t4439;
  double t3471;
  double t3486;
  double t4246;
  double t4307;
  double t4387;
  double t4403;
  double t4418;
  double t4440;
  double t4446;
  double t4470;
  double t4504;
  double t5406;
  double t5410;
  double t5432;
  double t5458;
  double t5495;
  double t5498;
  double t5516;
  double t5583;
  double t5592;
  double t5596;
  double t5601;
  double t5721;
  double t5744;
  double t5751;
  double t5758;
  double t5781;
  double t5797;
  double t5812;
  double t5827;
  double t5852;
  double t5662;
  double t5693;
  double t5862;
  double t5867;
  double t5870;
  double t5893;
  double t2310;
  double t2564;
  double t6119;
  double t6123;
  double t6127;
  double t6139;
  double t6144;
  double t6086;
  double t6097;
  double t6099;
  double t6101;
  double t6103;
  double t5935;
  double t5952;
  double t6016;
  double t6042;
  double t6057;
  double t6175;
  double t6210;
  double t6229;
  double t6231;
  double t6242;
  double t6246;
  double t6254;
  double t6197;
  double t6204;
  double t6207;
  double t6208;
  double t6258;
  double t6261;
  double t6263;
  double t6266;
  double t6274;
  double t6275;
  double t6312;
  double t6313;
  double t6315;
  double t6319;
  double t6322;
  double t6324;
  double t6176;
  double t6262;
  double t6277;
  double t6299;
  double t6306;
  double t6338;
  double t6356;
  double t6385;
  double t6405;
  double t6451;
  double t6613;
  double t6627;
  double t6643;
  double t6646;
  double t6495;
  double t6572;
  double t6862;
  double t6900;
  double t6925;
  double t6944;
  double t6953;
  double t6958;
  double t6992;
  double t7037;
  double t7082;
  double t6913;
  double t6970;
  double t6976;
  double t6852;
  double t6856;
  double t6982;
  double t7169;
  double t7181;
  double t7191;
  double t7195;
  double t7127;
  double t7182;
  double t7197;
  double t7198;
  double t7205;
  double t7231;
  double t7253;
  double t7143;
  double t7146;
  double t6475;
  double t6608;
  double t6648;
  double t6661;
  double t6667;
  double t7407;
  double t7413;
  double t7414;
  double t7422;
  double t6701;
  double t6717;
  double t6784;
  double t6790;
  double t6791;
  double t6472;
  double t6672;
  double t6682;
  double t6797;
  double t6833;
  double t6981;
  double t7114;
  double t7119;
  double t7128;
  double t7129;
  double t7157;
  double t7703;
  double t7714;
  double t7715;
  double t7635;
  double t7636;
  double t7688;
  double t7696;
  double t7764;
  double t7768;
  double t7200;
  double t7262;
  double t7263;
  double t7836;
  double t7837;
  double t7275;
  double t7276;
  double t7283;
  double t8178;
  double t8203;
  double t8271;
  double t7935;
  double t7957;
  double t7959;
  double t7982;
  double t7124;
  double t7160;
  double t7162;
  double t8695;
  double t8696;
  double t8701;
  double t8704;
  double t8712;
  double t8714;
  double t8705;
  double t8707;
  double t7716;
  double t7732;
  double t7801;
  double t7805;
  double t7811;
  double t7813;
  double t7820;
  double t7865;
  double t7866;
  double t7912;
  double t7922;
  double t7926;
  double t7985;
  double t8086;
  double t8095;
  double t8677;
  double t8681;
  double t8766;
  double t8767;
  double t8744;
  double t8747;
  double t8768;
  double t8770;
  double t8772;
  double t8773;
  double t8724;
  double t8728;
  double t8801;
  double t8803;
  double t8804;
  double t8807;
  double t8809;
  double t8810;
  double t8808;
  double t8813;
  double t8814;
  double t8820;
  double t8821;
  double t8824;
  double t8818;
  double t8826;
  double t8827;
  double t8830;
  double t8831;
  double t8833;
  double t8843;
  double t8844;
  double t8845;
  double t8756;
  double t8758;
  double t8761;
  double t8762;
  double t8869;
  double t8870;
  double t8871;
  double t8872;
  double t8875;
  double t8876;
  double t8783;
  double t8787;
  double t8865;
  double t8757;
  double t8866;
  double t8759;
  double t8868;
  double t8878;
  double t8763;
  double t8771;
  double t8774;
  double t8775;
  double t8780;
  double t8782;
  double t8886;
  double t8786;
  double t8887;
  double t8789;
  double t8914;
  double t8916;
  double t8903;
  double t8904;
  double t8906;
  double t8908;
  double t8909;
  double t8910;
  double t8911;
  double t8912;
  double t8915;
  double t8917;
  double t8918;
  double t8920;
  double t8921;
  double t8922;
  double t8929;
  double t8930;
  double t8931;
  double t8932;
  double t8934;
  double t8936;
  double t8938;
  double t8939;
  double t8949;
  double t8950;
  double t8951;
  double t8957;
  double t8961;
  double t8963;
  double t8966;
  double t8933;
  double t8942;
  double t8943;
  double t8952;
  double t8956;
  double t8958;
  double t8960;
  double t8962;
  double t8964;
  double t8986;
  double t8969;
  double t8970;
  double t8971;
  double t8973;
  double t8974;
  double t8975;
  double t8989;
  double t8987;
  double t8988;
  double t8990;
  double t9001;
  double t9005;
  double t9006;
  double t9011;
  double t9015;
  double t9018;
  double t9019;
  double t8959;
  double t8965;
  double t8967;
  double t9023;
  double t9053;
  double t9054;
  double t9055;
  double t9025;
  double t9026;
  double t9034;
  double t9038;
  double t9042;
  double t9049;
  double t9050;
  double t9051;
  double t9059;
  double t9024;
  double t9060;
  double t9027;
  double t9028;
  double t9062;
  double t9029;
  double t9031;
  double t9066;
  double t9035;
  double t9036;
  double t9037;
  double t9069;
  double t9039;
  double t9072;
  double t9043;
  double t9095;
  double t9098;
  double t9091;
  double t9092;
  double t9093;
  double t9087;
  double t9088;
  double t9089;
  double t9096;
  double t9097;
  double t9099;
  double t9101;
  double t9102;
  double t9103;
  double t9110;
  double t9111;
  double t9112;
  double t9113;
  double t9115;
  double t9116;
  double t9117;
  double t9118;
  double t9119;
  double t9127;
  double t9128;
  double t9114;
  double t9120;
  double t9121;
  double t9147;
  double t9131;
  double t9132;
  double t9133;
  double t9134;
  double t9135;
  double t9148;
  double t9149;
  double t9159;
  double t9160;
  double t9129;
  double t9174;
  double t9175;
  double t9176;
  double t9170;
  double t9171;
  double t9172;
  double t9163;
  double t9180;
  double t9164;
  double t9181;
  double t9209;
  double t9210;
  double t9205;
  double t9206;
  double t9207;
  double t9201;
  double t9202;
  double t9203;
  double t9211;
  double t9213;
  double t9214;
  double t9215;
  double t9234;
  double t9235;
  double t9236;
  double t9237;
  double t9238;
  double t9239;
  double t9247;
  t553 = Cos(var1[4]);
  t467 = Cos(var1[5]);
  t490 = Sin(var1[4]);
  t607 = Sin(var1[5]);
  t657 = Cos(var1[3]);
  t545 = -1.*t467*t490;
  t615 = -1.*t553*t607;
  t633 = t545 + t615;
  t456 = Sin(var1[3]);
  t658 = t553*t467;
  t671 = -1.*t490*t607;
  t718 = t658 + t671;
  t388 = Sin(var1[2]);
  t986 = Cos(var1[2]);
  t1051 = t657*t633;
  t1106 = -1.*t456*t718;
  t1331 = t1051 + t1106;
  t1340 = t986*t1331;
  t647 = -1.*t456*t633;
  t934 = -1.*t657*t718;
  t956 = t647 + t934;
  t1357 = t456*t633;
  t1410 = t657*t718;
  t1412 = t1357 + t1410;
  t1623 = t467*t490;
  t1648 = t553*t607;
  t1695 = t1623 + t1648;
  t1712 = -1.*t456*t1695;
  t1714 = t1712 + t1410;
  t1791 = -1.*t657*t1695;
  t1865 = t1791 + t1106;
  t2084 = t986*t1714;
  t1980 = t657*t1695;
  t1988 = t456*t718;
  t2017 = t1980 + t1988;
  t1439 = -1.*t388*t1412;
  t1444 = t1439 + t1340;
  t1507 = -1.*t388*t1331;
  t1535 = t986*t1412;
  t1558 = t388*t1331;
  t1612 = t1535 + t1558;
  t1718 = -1.*t388*t1714;
  t1938 = t388*t1714;
  t2031 = t986*t2017;
  t2057 = t1938 + t2031;
  t2214 = -1.*t388*t2017;
  t2231 = t2084 + t2214;
  t2853 = -1.*t553*t467;
  t2858 = t490*t607;
  t2912 = t2853 + t2858;
  t2925 = t657*t2912;
  t2950 = t647 + t2925;
  t2992 = t456*t2912;
  t3042 = t1051 + t2992;
  t2735 = 2.285714*t1444*t2057;
  t2746 = 2.285714*t1612*t2231;
  t2962 = t388*t2950;
  t3048 = t986*t3042;
  t3083 = t2962 + t3048;
  t3084 = 2.285714*t1444*t3083;
  t3119 = t986*t2950;
  t3172 = -1.*t388*t3042;
  t3180 = t3119 + t3172;
  t3181 = 2.285714*t1612*t3180;
  t3211 = t2735 + t2746 + t3084 + t3181;
  t981 = t388*t956;
  t1353 = t981 + t1340;
  t2097 = t388*t1865;
  t2123 = t2084 + t2097;
  t1476 = t986*t956;
  t1911 = t986*t1865;
  t1474 = 2.285714*t1353*t1444;
  t1525 = t1476 + t1507;
  t1619 = 2.285714*t1525*t1612;
  t1921 = t1718 + t1911;
  t2083 = 2.285714*t1921*t2057;
  t2271 = 2.285714*t2123*t2231;
  t2275 = t1474 + t1619 + t2083 + t2271;
  t3407 = -1.*t657*t633;
  t3543 = 2.285714*t1612*t2123;
  t3545 = 2.285714*t1353*t2057;
  t3546 = -1.*t456*t2912;
  t3548 = t3407 + t3546;
  t3551 = t388*t3548;
  t3554 = t3119 + t3551;
  t3563 = 2.285714*t1612*t3554;
  t3577 = 2.285714*t1353*t3083;
  t3587 = t3543 + t3545 + t3563 + t3577;
  t3440 = t456*t1695;
  t3696 = Power(t1612,2);
  t3721 = 2.285714*t3696;
  t3760 = t3440 + t2925;
  t3774 = t986*t3760;
  t3784 = t1980 + t3546;
  t3791 = t388*t3784;
  t3830 = t3774 + t3791;
  t3843 = 2.285714*t1612*t3830;
  t3882 = 2.285714*t2057*t3083;
  t3895 = Power(t3083,2);
  t3995 = 2.285714*t3895;
  t4000 = t3721 + t3843 + t3882 + t3995;
  t3689 = -0.5*var2[3]*t3587;
  t4001 = -0.5*var2[4]*t4000;
  t4007 = -0.5*var2[5]*t4000;
  t4016 = -0.5*var2[2]*t3211;
  t4017 = t3689 + t4001 + t4007 + t4016;
  t4025 = var2[0]*t4017;
  t4142 = 2.285714*t1612*t2057;
  t4148 = 2.285714*t1612*t3083;
  t4149 = t4142 + t4148;
  t4078 = 2.285714*t1444*t1612;
  t4081 = 2.285714*t2057*t2231;
  t4134 = t4078 + t4081;
  t4026 = 2.285714*t1353*t1612;
  t4047 = 2.285714*t2123*t2057;
  t4048 = t4026 + t4047;
  t4237 = -0.5*var2[0]*t4149;
  t2441 = -1.*t986*t1412;
  t2501 = t2441 + t1507;
  t2510 = -1.*t986*t2017;
  t2530 = t1718 + t2510;
  t4383 = -1.*t986*t1331;
  t4423 = -1.*t986*t1714;
  t4830 = 1.142857*t1612*t2530;
  t4834 = 1.142857*t2501*t2057;
  t4880 = 2.285714*t1444*t2231;
  t4884 = -1.*t388*t2950;
  t4911 = -1.*t986*t3042;
  t4940 = t4884 + t4911;
  t4951 = 1.142857*t1612*t4940;
  t4982 = 1.142857*t2501*t3083;
  t5002 = 2.285714*t1444*t3180;
  t5014 = t4830 + t4834 + t4880 + t4951 + t4982 + t5002;
  t4366 = -1.*t388*t956;
  t3416 = t3407 + t1988;
  t3429 = t388*t3416;
  t3437 = t1476 + t3429;
  t3448 = t3440 + t934;
  t4439 = -1.*t388*t1865;
  t3471 = t388*t3448;
  t3486 = t3471 + t1911;
  t4246 = 2.285714*t1444*t1525;
  t4307 = 1.142857*t1353*t2501;
  t4387 = t4366 + t4383;
  t4403 = 1.142857*t4387*t1612;
  t4418 = 1.142857*t2123*t2530;
  t4440 = t4423 + t4439;
  t4446 = 1.142857*t4440*t2057;
  t4470 = 2.285714*t1921*t2231;
  t4504 = t4246 + t4307 + t4403 + t4418 + t4446 + t4470;
  t5406 = 1.142857*t1612*t1921;
  t5410 = 1.142857*t1444*t2123;
  t5432 = 1.142857*t1525*t2057;
  t5458 = 1.142857*t1353*t2231;
  t5495 = t986*t3548;
  t5498 = t4884 + t5495;
  t5516 = 1.142857*t1612*t5498;
  t5583 = 1.142857*t1444*t3554;
  t5592 = 1.142857*t1525*t3083;
  t5596 = 1.142857*t1353*t3180;
  t5601 = t5406 + t5410 + t5432 + t5458 + t5516 + t5583 + t5592 + t5596;
  t5721 = -1.*t388*t3760;
  t5744 = t986*t3784;
  t5751 = t5721 + t5744;
  t5758 = 1.142857*t1612*t5751;
  t5781 = 1.142857*t1444*t3830;
  t5797 = 1.142857*t2231*t3083;
  t5812 = 1.142857*t2057*t3180;
  t5827 = 2.285714*t3083*t3180;
  t5852 = t4078 + t5758 + t5781 + t5797 + t5812 + t5827;
  t5662 = -0.5*var2[3]*t5601;
  t5693 = -0.5*var2[2]*t5014;
  t5862 = -0.5*var2[4]*t5852;
  t5867 = -0.5*var2[5]*t5852;
  t5870 = t5662 + t5693 + t5862 + t5867;
  t5893 = var2[0]*t5870;
  t2310 = Power(t1444,2);
  t2564 = Power(t2231,2);
  t6119 = 1.142857*t1444*t2057;
  t6123 = 1.142857*t1612*t2231;
  t6127 = 1.142857*t1444*t3083;
  t6139 = 1.142857*t1612*t3180;
  t6144 = t6119 + t6123 + t6127 + t6139;
  t6086 = 1.142857*t2310;
  t6097 = 1.142857*t2501*t1612;
  t6099 = 1.142857*t2530*t2057;
  t6101 = 1.142857*t2564;
  t6103 = t6086 + t6097 + t6099 + t6101;
  t5935 = 1.142857*t1353*t1444;
  t5952 = 1.142857*t1525*t1612;
  t6016 = 1.142857*t1921*t2057;
  t6042 = 1.142857*t2123*t2231;
  t6057 = t5935 + t5952 + t6016 + t6042;
  t6175 = -0.5*var2[0]*t6144;
  t6210 = -1.*t467;
  t6229 = 1. + t6210;
  t6231 = -1.3127*t6229;
  t6242 = -1.3127*t467;
  t6246 = -0.06*t607;
  t6254 = t6231 + t6242 + t6246;
  t6197 = -1.*t553;
  t6204 = 1. + t6197;
  t6207 = -0.9063*t6204;
  t6208 = -0.06*t467*t490;
  t6258 = t553*t6254;
  t6261 = t6207 + t6208 + t6258;
  t6263 = 0.06*t553*t467;
  t6266 = 0.9063*t490;
  t6274 = t490*t6254;
  t6275 = t6263 + t6266 + t6274;
  t6312 = -1.*t657;
  t6313 = 1. + t6312;
  t6315 = -0.4999*t6313;
  t6319 = t657*t6261;
  t6322 = -1.*t456*t6275;
  t6324 = t6315 + t6319 + t6322;
  t6176 = 0.4999*t456;
  t6262 = t456*t6261;
  t6277 = t657*t6275;
  t6299 = t6176 + t6262 + t6277;
  t6306 = -1.*t6299*t1412;
  t6338 = -1.*t6324*t1331;
  t6356 = t6306 + t6338;
  t6385 = t6324*t1714;
  t6405 = t6299*t2017;
  t6451 = t6385 + t6405;
  t6613 = -0.4999*t456;
  t6627 = -1.*t456*t6261;
  t6643 = -1.*t657*t6275;
  t6646 = t6613 + t6627 + t6643;
  t6495 = 0.4999*t657;
  t6572 = t6495 + t6319 + t6322;
  t6862 = 0.9063*t553;
  t6900 = t6862 + t6208 + t6258;
  t6925 = -0.06*t553*t467;
  t6944 = -0.9063*t490;
  t6953 = -1.*t490*t6254;
  t6958 = t6925 + t6944 + t6953;
  t6992 = t657*t6900;
  t7037 = t456*t6958;
  t7082 = t6992 + t7037;
  t6913 = -1.*t456*t6900;
  t6970 = t657*t6958;
  t6976 = t6913 + t6970;
  t6852 = 1.142857*t1444*t6356;
  t6856 = t6299*t1412;
  t6982 = t6324*t1331;
  t7169 = -0.06*t553*t607;
  t7181 = t6208 + t7169;
  t7191 = 0.06*t490*t607;
  t7195 = t6925 + t7191;
  t7127 = 1.142857*t6451*t3180;
  t7182 = -1.*t456*t7181;
  t7197 = t657*t7195;
  t7198 = t7182 + t7197;
  t7205 = t657*t7181;
  t7231 = t456*t7195;
  t7253 = t7205 + t7231;
  t7143 = -1.*t6324*t2950;
  t7146 = -1.*t6299*t3042;
  t6475 = -1.*t6324*t956;
  t6608 = -1.*t6572*t1412;
  t6648 = -1.*t6646*t1331;
  t6661 = -1.*t6299*t1331;
  t6667 = t6475 + t6608 + t6648 + t6661;
  t7407 = -0.4999*t657;
  t7413 = -1.*t657*t6261;
  t7414 = t456*t6275;
  t7422 = t7407 + t7413 + t7414;
  t6701 = t6646*t1714;
  t6717 = t6299*t1714;
  t6784 = t6324*t1865;
  t6790 = t6572*t2017;
  t6791 = t6701 + t6717 + t6784 + t6790;
  t6472 = 1.142857*t6356*t1921;
  t6672 = 1.142857*t6667*t2231;
  t6682 = 1.142857*t1525*t6451;
  t6797 = 1.142857*t1444*t6791;
  t6833 = t6472 + t6672 + t6682 + t6797;
  t6981 = t6976*t1714;
  t7114 = t7082*t2017;
  t7119 = t6856 + t6981 + t6982 + t7114;
  t7128 = -1.*t7082*t1412;
  t7129 = -1.*t6976*t1331;
  t7157 = t7128 + t7129 + t7143 + t7146;
  t7703 = -1.*t657*t6900;
  t7714 = -1.*t456*t6958;
  t7715 = t7703 + t7714;
  t7635 = 1.142857*t1612*t6667;
  t7636 = 1.142857*t1353*t6356;
  t7688 = t6324*t956;
  t7696 = t6572*t1412;
  t7764 = t6646*t1331;
  t7768 = t6299*t1331;
  t7200 = t1714*t7198;
  t7262 = t2017*t7253;
  t7263 = t6856 + t6982 + t7200 + t7262;
  t7836 = 1.142857*t6451*t3554;
  t7837 = 1.142857*t6791*t3083;
  t7275 = -1.*t1331*t7198;
  t7276 = -1.*t1412*t7253;
  t7283 = t7275 + t7276 + t7143 + t7146;
  t8178 = -1.*t657*t7181;
  t8203 = -1.*t456*t7195;
  t8271 = t8178 + t8203;
  t7935 = -1.*t6646*t2950;
  t7957 = -1.*t6299*t2950;
  t7959 = -1.*t6324*t3548;
  t7982 = -1.*t6572*t3042;
  t7124 = 1.142857*t1444*t7119;
  t7160 = 1.142857*t2231*t7157;
  t7162 = t6852 + t7124 + t7127 + t7160;
  t8695 = -0.9063*t553;
  t8696 = 0.06*t467*t490;
  t8701 = -1.*t553*t6254;
  t8704 = t8695 + t8696 + t8701;
  t8712 = t657*t8704;
  t8714 = t8712 + t7714;
  t8705 = t456*t8704;
  t8707 = t8705 + t6970;
  t7716 = t7715*t1714;
  t7732 = t7082*t1714;
  t7801 = t6976*t1865;
  t7805 = t6976*t2017;
  t7811 = t7688 + t7696 + t7716 + t7732 + t7764 + t7768 + t7801 + t7805;
  t7813 = 1.142857*t1612*t7811;
  t7820 = 1.142857*t1353*t7119;
  t7865 = 1.142857*t2123*t7157;
  t7866 = -1.*t6976*t956;
  t7912 = -1.*t6976*t1412;
  t7922 = -1.*t7715*t1331;
  t7926 = -1.*t7082*t1331;
  t7985 = t7866 + t7912 + t7922 + t7926 + t7935 + t7957 + t7959 + t7982;
  t8086 = 1.142857*t2057*t7985;
  t8095 = t7635 + t7636 + t7813 + t7820 + t7836 + t7837 + t7865 + t8086;
  t8677 = 1.142857*t6451*t3830;
  t8681 = 1.142857*t6356*t3083;
  t8766 = 0.06*t553*t607;
  t8767 = t8696 + t8766;
  t8744 = t6324*t2950;
  t8747 = t6299*t3042;
  t8768 = t456*t8767;
  t8770 = t8768 + t7197;
  t8772 = t657*t8767;
  t8773 = t8772 + t8203;
  t8724 = -1.*t6299*t3760;
  t8728 = -1.*t6324*t3784;
  t8801 = -0.06*t467;
  t8803 = 0. + t8801;
  t8804 = t8803*t490;
  t8807 = t8804 + t7169;
  t8809 = t553*t8803;
  t8810 = t8809 + t7191;
  t8808 = -1.*t456*t8807;
  t8813 = t657*t8810;
  t8814 = t8808 + t8813;
  t8820 = t657*t8807;
  t8821 = t456*t8810;
  t8824 = t8820 + t8821;
  t8818 = t1714*t8814;
  t8826 = t2017*t8824;
  t8827 = t6856 + t6982 + t8818 + t8826;
  t8830 = -1.*t1331*t8814;
  t8831 = -1.*t1412*t8824;
  t8833 = t8830 + t8831 + t7143 + t7146;
  t8843 = -1.*t657*t8807;
  t8844 = -1.*t456*t8810;
  t8845 = t8843 + t8844;
  t8756 = 1.142857*t7119*t3083;
  t8758 = 1.142857*t1612*t7157;
  t8761 = t7082*t1412;
  t8762 = t6976*t1331;
  t8869 = -1.*t8803*t490;
  t8870 = t8869 + t8766;
  t8871 = t456*t8870;
  t8872 = t8871 + t8813;
  t8875 = t657*t8870;
  t8876 = t8875 + t8844;
  t8783 = -1.*t6976*t2950;
  t8787 = -1.*t7082*t3042;
  t8865 = 1.142857*t8827*t3083;
  t8757 = 1.142857*t7263*t3083;
  t8866 = 1.142857*t1612*t8833;
  t8759 = 1.142857*t1612*t7283;
  t8868 = t1331*t8814;
  t8878 = t1412*t8824;
  t8763 = t1331*t7198;
  t8771 = t2017*t8770;
  t8774 = t1714*t8773;
  t8775 = t1412*t7253;
  t8780 = -1.*t1412*t8770;
  t8782 = -1.*t1331*t8773;
  t8886 = -1.*t8814*t2950;
  t8786 = -1.*t7198*t2950;
  t8887 = -1.*t8824*t3042;
  t8789 = -1.*t7253*t3042;
  t8914 = 1.142857*t1612*t6356;
  t8916 = 1.142857*t6451*t3083;
  t8903 = 1.142857*t6356*t2231;
  t8904 = 1.142857*t1444*t6451;
  t8906 = t8903 + t8904;
  t8908 = 1.142857*t6356*t2123;
  t8909 = 1.142857*t6667*t2057;
  t8910 = 1.142857*t1353*t6451;
  t8911 = 1.142857*t1612*t6791;
  t8912 = t8908 + t8909 + t8910 + t8911;
  t8915 = 1.142857*t1612*t7119;
  t8917 = 1.142857*t2057*t7157;
  t8918 = t8914 + t8915 + t8916 + t8917;
  t8920 = 1.142857*t1612*t7263;
  t8921 = 1.142857*t2057*t7283;
  t8922 = t8914 + t8920 + t8916 + t8921;
  t8929 = t6275*t1695;
  t8930 = 0.4999*t718;
  t8931 = t6261*t718;
  t8932 = t8929 + t8930 + t8931;
  t8934 = -1.*t6261*t633;
  t8936 = 0.4999*t1695;
  t8938 = -1.*t6275*t718;
  t8939 = t8934 + t8936 + t8938;
  t8949 = 1.142857*t8939*t1444;
  t8950 = 0.4999*t633;
  t8951 = t6261*t633;
  t8957 = t6275*t718;
  t8961 = -1.*t6275*t633;
  t8963 = -1.*t6261*t2912;
  t8966 = 1.142857*t8932*t3180;
  t8933 = 1.142857*t8932*t1525;
  t8942 = 1.142857*t8939*t1921;
  t8943 = t8933 + t8942;
  t8952 = t6900*t1695;
  t8956 = t6958*t718;
  t8958 = t8950 + t8951 + t8952 + t8956 + t8957;
  t8960 = -1.*t6958*t633;
  t8962 = -1.*t6900*t718;
  t8964 = t8960 + t8961 + t8930 + t8962 + t8963;
  t8986 = 1.142857*t8939*t1353;
  t8969 = t7181*t1695;
  t8970 = t718*t7195;
  t8971 = t8950 + t8951 + t8969 + t8957 + t8970;
  t8973 = -1.*t7181*t718;
  t8974 = -1.*t633*t7195;
  t8975 = t8961 + t8930 + t8973 + t8974 + t8963;
  t8989 = 1.142857*t8932*t3554;
  t8987 = 1.142857*t8958*t1353;
  t8988 = 1.142857*t8964*t2123;
  t8990 = t8986 + t8987 + t8988 + t8989;
  t9001 = t6275*t633;
  t9005 = 0.4999*t2912;
  t9006 = t6261*t2912;
  t9011 = -1.*t6261*t1695;
  t9015 = -1.*t6275*t2912;
  t9018 = 1.142857*t8932*t3830;
  t9019 = 1.142857*t8939*t3083;
  t8959 = 1.142857*t8958*t1444;
  t8965 = 1.142857*t8964*t2231;
  t8967 = t8949 + t8959 + t8965 + t8966;
  t9023 = 1.142857*t8964*t1612;
  t9053 = -1.*t8807*t718;
  t9054 = -1.*t633*t8810;
  t9055 = t8961 + t8930 + t9053 + t9054 + t8963;
  t9025 = t6958*t633;
  t9026 = t6900*t718;
  t9034 = -1.*t6900*t633;
  t9038 = -1.*t6958*t2912;
  t9042 = 1.142857*t8958*t3083;
  t9049 = t8807*t1695;
  t9050 = t718*t8810;
  t9051 = t8950 + t8951 + t9049 + t8957 + t9050;
  t9059 = 1.142857*t9055*t1612;
  t9024 = 1.142857*t8975*t1612;
  t9060 = t8807*t718;
  t9027 = t7181*t718;
  t9028 = t8767*t718;
  t9062 = t633*t8810;
  t9029 = t633*t7195;
  t9031 = t1695*t7195;
  t9066 = -1.*t633*t8807;
  t9035 = -1.*t633*t7181;
  t9036 = -1.*t633*t8767;
  t9037 = -1.*t718*t7195;
  t9069 = -1.*t8810*t2912;
  t9039 = -1.*t7195*t2912;
  t9072 = 1.142857*t9051*t3083;
  t9043 = 1.142857*t8971*t3083;
  t9095 = 1.142857*t8939*t1612;
  t9098 = 1.142857*t8932*t3083;
  t9091 = 1.142857*t8932*t1444;
  t9092 = 1.142857*t8939*t2231;
  t9093 = t9091 + t9092;
  t9087 = 1.142857*t8932*t1353;
  t9088 = 1.142857*t8939*t2123;
  t9089 = t9087 + t9088;
  t9096 = 1.142857*t8958*t1612;
  t9097 = 1.142857*t8964*t2057;
  t9099 = t9095 + t9096 + t9097 + t9098;
  t9101 = 1.142857*t8971*t1612;
  t9102 = 1.142857*t8975*t2057;
  t9103 = t9095 + t9101 + t9102 + t9098;
  t9110 = 0.9063*t467;
  t9111 = t467*t6254;
  t9112 = 0.06*t467*t607;
  t9113 = t9110 + t9111 + t9112;
  t9115 = Power(t467,2);
  t9116 = -0.06*t9115;
  t9117 = 0.9063*t607;
  t9118 = t6254*t607;
  t9119 = t9116 + t9117 + t9118;
  t9127 = 1.142857*t9119*t1444;
  t9128 = 1.142857*t9113*t3180;
  t9114 = 1.142857*t9113*t1525;
  t9120 = 1.142857*t9119*t1921;
  t9121 = t9114 + t9120;
  t9147 = 1.142857*t9119*t1353;
  t9131 = -0.9063*t607;
  t9132 = -1.*t6254*t607;
  t9133 = Power(t607,2);
  t9134 = -0.06*t9133;
  t9135 = 0. + t9131 + t9132 + t9134;
  t9148 = 1.142857*t9113*t3554;
  t9149 = t9147 + t9148;
  t9159 = 1.142857*t9113*t3830;
  t9160 = 1.142857*t9119*t3083;
  t9129 = t9127 + t9128;
  t9174 = t8803*t607;
  t9175 = 0.12*t467*t607;
  t9176 = t9110 + t9111 + t9174 + t9175;
  t9170 = t8803*t467;
  t9171 = 0.06*t9115;
  t9172 = t9170 + t9171 + t9131 + t9132 + t9134;
  t9163 = 1.142857*t9113*t1612;
  t9180 = 1.142857*t9176*t1612;
  t9164 = 1.142857*t9135*t3083;
  t9181 = 1.142857*t9172*t3083;
  t9209 = 1.142857*t9119*t1612;
  t9210 = 1.142857*t9113*t3083;
  t9205 = 1.142857*t9113*t1444;
  t9206 = 1.142857*t9119*t2231;
  t9207 = t9205 + t9206;
  t9201 = 1.142857*t9113*t1353;
  t9202 = 1.142857*t9119*t2123;
  t9203 = t9201 + t9202;
  t9211 = t9209 + t9210;
  t9213 = 1.142857*t9135*t1612;
  t9214 = 1.142857*t9113*t2057;
  t9215 = t9209 + t9213 + t9214 + t9210;
  t9234 = 0.03428571*var2[3]*t1353;
  t9235 = 0.03428571*var2[2]*t1444;
  t9236 = 0.03428571*var2[4]*t3083;
  t9237 = 0.03428571*var2[5]*t3083;
  t9238 = t9234 + t9235 + t9236 + t9237;
  t9239 = var2[0]*t9238;
  t9247 = 0.03428571*var2[0]*t1612;
  p_output1[0]=var2[0]*(-0.5*(2.285714*t2310 + 2.285714*t1612*t2501 + 2.285714*t2057*t2530 + 2.285714*t2564)*var2[2] - 0.5*t2275*var2[3] - 0.5*t3211*var2[4] - 0.5*t3211*var2[5]);
  p_output1[1]=var2[0]*(-0.5*t2275*var2[2] - 0.5*(2.285714*Power(t1353,2) + 2.285714*Power(t2123,2) + 2.285714*t1612*t3437 + 2.285714*t2057*t3486)*var2[3] - 0.5*t3587*var2[4] - 0.5*t3587*var2[5]);
  p_output1[2]=t4025;
  p_output1[3]=t4025;
  p_output1[4]=-0.5*t4134*var2[2] - 0.5*t4048*var2[3] - 0.5*t4149*var2[4] - 0.5*t4149*var2[5];
  p_output1[5]=-0.5*t4134*var2[0];
  p_output1[6]=-0.5*t4048*var2[0];
  p_output1[7]=t4237;
  p_output1[8]=t4237;
  p_output1[9]=var2[0]*(-0.5*(3.428571*t1444*t2501 + 3.428571*t2231*t2530 + 1.142857*t1612*(t1412*t388 + t4383) + 1.142857*t2057*(t2017*t388 + t4423))*var2[2] - 0.5*t4504*var2[3] - 0.5*t5014*var2[4] - 0.5*t5014*var2[5]);
  p_output1[10]=var2[0]*(-0.5*t4504*var2[2] - 0.5*(2.285714*t1353*t1525 + 2.285714*t1921*t2123 + 1.142857*t1444*t3437 + 1.142857*t2231*t3486 + 1.142857*t1612*(t4366 + t3416*t986) + 1.142857*t2057*(t4439 + t3448*t986))*var2[3] - 0.5*t5601*var2[4] - 0.5*t5601*var2[5]);
  p_output1[11]=t5893;
  p_output1[12]=t5893;
  p_output1[13]=-0.5*t6103*var2[2] - 0.5*t6057*var2[3] - 0.5*t6144*var2[4] - 0.5*t6144*var2[5];
  p_output1[14]=-0.5*t6103*var2[0];
  p_output1[15]=-0.5*t6057*var2[0];
  p_output1[16]=t6175;
  p_output1[17]=t6175;
  p_output1[18]=var2[0]*(-0.5*(1.142857*t2530*t6356 + 1.142857*t2501*t6451)*var2[2] - 0.5*t6833*var2[3] - 0.5*t7162*var2[4] - 0.5*(t6852 + t7127 + 1.142857*t1444*t7263 + 1.142857*t2231*t7283)*var2[5]);
  p_output1[19]=var2[0]*(-0.5*t6833*var2[2] - 0.5*(1.142857*t3486*t6356 + 1.142857*t3437*t6451 + 2.285714*t2123*t6667 + 2.285714*t1353*t6791 + 1.142857*t1612*(t1865*t6299 + t3448*t6324 + 2.*t1714*t6572 + 2.*t1865*t6646 + t2017*t6646 + t1714*t7422) + 1.142857*t2057*(-1.*t3416*t6324 - 2.*t1331*t6572 - 1.*t1412*t6646 - 1.*t1331*t7422 - 1.*t6299*t956 - 2.*t6646*t956))*var2[3] - 0.5*t8095*var2[4] - 0.5*(1.142857*t1353*t7263 + 1.142857*t2123*t7283 + t7635 + t7636 + t7836 + t7837 + 1.142857*t1612*(t1865*t7198 + t2017*t7198 + t1714*t7253 + t7688 + t7696 + t7764 + t7768 + t1714*t8271) + 1.142857*t2057*(-1.*t1412*t7198 - 1.*t1331*t7253 + t7935 + t7957 + t7959 + t7982 - 1.*t1331*t8271 - 1.*t7198*t956))*var2[5]);
  p_output1[20]=var2[0]*(-0.5*t7162*var2[2] - 0.5*t8095*var2[3] - 0.5*(2.285714*t3083*t7119 + 2.285714*t1612*t7157 + t8677 + t8681 + 1.142857*t2057*(-2.*t2950*t6976 - 2.*t3042*t7082 - 1.*t1412*t8707 - 1.*t1331*t8714 + t8724 + t8728) + 1.142857*t1612*(2.*t1331*t6976 + 2.*t1412*t7082 + t2017*t8707 + t1714*t8714 + t8744 + t8747))*var2[4] - 0.5*(t8677 + t8681 + t8756 + t8757 + t8758 + t8759 + 1.142857*t1612*(t8744 + t8747 + t8761 + t8762 + t8763 + t8771 + t8774 + t8775) + 1.142857*t2057*(t8724 + t8728 + t8780 + t8782 + t8783 + t8786 + t8787 + t8789))*var2[5]);
  p_output1[21]=var2[0]*(-0.5*(t6852 + t7127 + 1.142857*t1444*t8827 + 1.142857*t2231*t8833)*var2[2] - 0.5*(t7635 + t7636 + t7836 + t7837 + 1.142857*t1353*t8827 + 1.142857*t2123*t8833 + 1.142857*t1612*(t7688 + t7696 + t7764 + t7768 + t1865*t8814 + t2017*t8814 + t1714*t8824 + t1714*t8845) + 1.142857*t2057*(t7935 + t7957 + t7959 + t7982 - 1.*t1412*t8814 - 1.*t1331*t8824 - 1.*t1331*t8845 - 1.*t8814*t956))*var2[3] - 0.5*(t8677 + t8681 + t8756 + t8758 + t8865 + t8866 + 1.142857*t1612*(t8744 + t8747 + t8761 + t8762 + t8868 + t2017*t8872 + t1714*t8876 + t8878) + 1.142857*t2057*(t8724 + t8728 + t8783 + t8787 - 1.*t1412*t8872 - 1.*t1331*t8876 + t8886 + t8887))*var2[4] - 0.5*(t8677 + t8681 + t8757 + t8759 + t8865 + t8866 + 1.142857*t1612*(t8744 + t8747 + t8763 + t8771 + t8774 + t8775 + t8868 + t8878) + 1.142857*t2057*(t8724 + t8728 + t8780 + t8782 + t8786 + t8789 + t8886 + t8887))*var2[5]);
  p_output1[22]=-0.5*t8906*var2[2] - 0.5*t8912*var2[3] - 0.5*t8918*var2[4] - 0.5*t8922*var2[5];
  p_output1[23]=-0.5*t8906*var2[0];
  p_output1[24]=-0.5*t8912*var2[0];
  p_output1[25]=-0.5*t8918*var2[0];
  p_output1[26]=-0.5*t8922*var2[0];
  p_output1[27]=var2[0]*(-0.5*(1.142857*t2501*t8932 + 1.142857*t2530*t8939)*var2[2] - 0.5*t8943*var2[3] - 0.5*t8967*var2[4] - 0.5*(t8949 + t8966 + 1.142857*t1444*t8971 + 1.142857*t2231*t8975)*var2[5]);
  p_output1[28]=var2[0]*(-0.5*t8943*var2[2] - 0.5*(1.142857*t3437*t8932 + 1.142857*t3486*t8939)*var2[3] - 0.5*t8990*var2[4] - 0.5*(1.142857*t1353*t8971 + 1.142857*t2123*t8975 + t8986 + t8989)*var2[5]);
  p_output1[29]=var2[0]*(-0.5*t8967*var2[2] - 0.5*t8990*var2[3] - 0.5*(2.285714*t3083*t8958 + 2.285714*t1612*t8964 + 1.142857*t1612*(t1695*t6958 + 2.*t633*t6958 + 2.*t6900*t718 + t718*t8704 + t9001 + t9005 + t9006) + 1.142857*t2057*(-2.*t633*t6900 - 2.*t2912*t6958 - 1.*t6958*t718 - 1.*t633*t8704 + t8950 + t9011 + t9015) + t9018 + t9019)*var2[4] - 0.5*(t9018 + t9019 + t9023 + t9024 + 1.142857*t1612*(t9001 + t9005 + t9006 + t9025 + t9026 + t9027 + t9028 + t9029 + t9031) + 1.142857*t2057*(t8950 + t9011 + t9015 + t9034 + t9035 + t9036 + t9037 + t9038 + t9039) + t9042 + t9043)*var2[5]);
  p_output1[30]=var2[0]*(-0.5*(t8949 + t8966 + 1.142857*t1444*t9051 + 1.142857*t2231*t9055)*var2[2] - 0.5*(t8986 + t8989 + 1.142857*t1353*t9051 + 1.142857*t2123*t9055)*var2[3] - 0.5*(t9018 + t9019 + t9023 + t9042 + t9059 + 1.142857*t1612*(t1695*t8810 + t718*t8870 + t9001 + t9005 + t9006 + t9025 + t9026 + t9060 + t9062) + 1.142857*t2057*(-1.*t718*t8810 - 1.*t633*t8870 + t8950 + t9011 + t9015 + t9034 + t9038 + t9066 + t9069) + t9072)*var2[4] - 0.5*(t9018 + t9019 + t9024 + t9043 + t9059 + 1.142857*t1612*(t9001 + t9005 + t9006 + t9027 + t9028 + t9029 + t9031 + t9060 + t9062) + 1.142857*t2057*(t8950 + t9011 + t9015 + t9035 + t9036 + t9037 + t9039 + t9066 + t9069) + t9072)*var2[5]);
  p_output1[31]=-0.5*t9093*var2[2] - 0.5*t9089*var2[3] - 0.5*t9099*var2[4] - 0.5*t9103*var2[5];
  p_output1[32]=-0.5*t9093*var2[0];
  p_output1[33]=-0.5*t9089*var2[0];
  p_output1[34]=-0.5*t9099*var2[0];
  p_output1[35]=-0.5*t9103*var2[0];
  p_output1[36]=var2[0]*(-0.5*(1.142857*t2501*t9113 + 1.142857*t2530*t9119)*var2[2] - 0.5*t9121*var2[3] - 0.5*t9129*var2[4] - 0.5*(1.142857*t2231*t9113 + t9127 + t9128 + 1.142857*t1444*t9135)*var2[5]);
  p_output1[37]=var2[0]*(-0.5*t9121*var2[2] - 0.5*(1.142857*t3437*t9113 + 1.142857*t3486*t9119)*var2[3] - 0.5*t9149*var2[4] - 0.5*(1.142857*t2123*t9113 + 1.142857*t1353*t9135 + t9147 + t9148)*var2[5]);
  p_output1[38]=var2[0]*(-0.5*t9129*var2[2] - 0.5*t9149*var2[3] - 0.5*(t9159 + t9160)*var2[4] - 0.5*(t9159 + t9160 + t9163 + t9164)*var2[5]);
  p_output1[39]=var2[0]*(-0.5*(t9127 + t9128 + 1.142857*t1444*t9172 + 1.142857*t2231*t9176)*var2[2] - 0.5*(t9147 + t9148 + 1.142857*t1353*t9172 + 1.142857*t2123*t9176)*var2[3] - 0.5*(t9159 + t9160 + t9180 + t9181)*var2[4] - 0.5*(1.142857*t1612*(-0.9063*t467 - 0.12*t467*t607 - 1.*t467*t6254 - 1.*t607*t8803) + t9159 + t9160 + t9163 + t9164 + 1.142857*t2057*t9172 + t9180 + t9181)*var2[5]);
  p_output1[40]=-0.5*t9207*var2[2] - 0.5*t9203*var2[3] - 0.5*t9211*var2[4] - 0.5*t9215*var2[5];
  p_output1[41]=-0.5*t9207*var2[0];
  p_output1[42]=-0.5*t9203*var2[0];
  p_output1[43]=-0.5*t9211*var2[0];
  p_output1[44]=-0.5*t9215*var2[0];
  p_output1[45]=var2[0]*(0.03428571*t2530*var2[2] + 0.03428571*t1921*var2[3] + 0.03428571*t1444*var2[4] + 0.03428571*t1444*var2[5]);
  p_output1[46]=var2[0]*(0.03428571*t1921*var2[2] + 0.03428571*t3486*var2[3] + 0.03428571*t1353*var2[4] + 0.03428571*t1353*var2[5]);
  p_output1[47]=t9239;
  p_output1[48]=t9239;
  p_output1[49]=0.03428571*t2231*var2[2] + 0.03428571*t2123*var2[3] + 0.03428571*t1612*var2[4] + 0.03428571*t1612*var2[5];
  p_output1[50]=0.03428571*t2231*var2[0];
  p_output1[51]=0.03428571*t2123*var2[0];
  p_output1[52]=t9247;
  p_output1[53]=t9247;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 9 && ncols == 1) && 
      !(mrows == 1 && ncols == 9))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 9 && ncols == 1) && 
      !(mrows == 1 && ncols == 9))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 54, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_Ce1_vec_L4_J1_amber3_feet.hh"

namespace RightSS1
{

void J_Ce1_vec_L4_J1_amber3_feet_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
