/*
 * Automatically Generated from Mathematica.
 * Wed 1 Mar 2023 13:25:30 GMT-08:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t19;
  double t95;
  double t323;
  double t333;
  double t370;
  double t389;
  double t392;
  double t399;
  double t401;
  double t412;
  double t440;
  double t476;
  double t161;
  double t296;
  double t309;
  double t346;
  double t442;
  double t447;
  double t477;
  double t484;
  double t487;
  double t507;
  double t552;
  double t571;
  double t580;
  double t593;
  double t599;
  double t604;
  double t612;
  double t820;
  double t828;
  double t891;
  double t969;
  double t588;
  double t616;
  double t791;
  double t731;
  double t733;
  double t745;
  double t621;
  double t653;
  double t691;
  double t705;
  double t724;
  double t727;
  double t906;
  double t920;
  double t26;
  double t459;
  double t521;
  double t543;
  double t974;
  double t1041;
  double t1052;
  double t619;
  double t771;
  double t772;
  double t935;
  double t1403;
  double t1406;
  double t1416;
  double t1126;
  double t1168;
  double t1169;
  double t1191;
  double t1499;
  double t1501;
  double t1510;
  double t1555;
  double t1308;
  double t1312;
  double t1429;
  double t1448;
  double t1735;
  double t1743;
  double t1763;
  double t1946;
  double t1968;
  double t2007;
  double t2027;
  double t2052;
  double t2055;
  double t2133;
  double t2137;
  double t2151;
  double t1588;
  double t1594;
  double t1595;
  double t2083;
  double t2095;
  double t2119;
  double t1983;
  double t2064;
  double t2068;
  double t2183;
  double t2184;
  double t2207;
  double t2208;
  double t1904;
  double t1909;
  double t2072;
  double t2329;
  double t2344;
  double t2354;
  double t2390;
  double t2205;
  double t2224;
  double t2229;
  double t2233;
  double t2350;
  double t2392;
  double t2408;
  double t2410;
  double t2463;
  double t2470;
  double t2252;
  double t2256;
  double t1323;
  double t1422;
  double t1462;
  double t1556;
  double t1572;
  double t1586;
  double t2605;
  double t2616;
  double t2739;
  double t2743;
  double t2747;
  double t2758;
  double t1706;
  double t2807;
  double t2810;
  double t1776;
  double t1801;
  double t1803;
  double t1808;
  double t1824;
  double t1359;
  double t1368;
  double t1639;
  double t1720;
  double t1729;
  double t1860;
  double t1878;
  double t2881;
  double t2885;
  double t2893;
  double t3065;
  double t3068;
  double t2070;
  double t2122;
  double t2127;
  double t2668;
  double t2671;
  double t2241;
  double t2249;
  double t2259;
  double t2823;
  double t2833;
  double t2837;
  double t3149;
  double t3153;
  double t3163;
  double t3227;
  double t3228;
  double t3134;
  double t3137;
  double t3143;
  double t3144;
  double t3187;
  double t3191;
  double t2409;
  double t2483;
  double t2505;
  double t3253;
  double t3254;
  double t3262;
  double t3273;
  double t3278;
  double t3287;
  double t3288;
  double t2516;
  double t2529;
  double t2530;
  double t3466;
  double t3494;
  double t3497;
  double t3375;
  double t3381;
  double t3391;
  double t3393;
  double t2129;
  double t2296;
  double t2308;
  double t3707;
  double t3748;
  double t3755;
  double t3799;
  double t3647;
  double t3661;
  double t3867;
  double t3889;
  double t3809;
  double t3812;
  double t3182;
  double t3183;
  double t3196;
  double t3198;
  double t3199;
  double t3208;
  double t3226;
  double t3349;
  double t3351;
  double t3353;
  double t3362;
  double t3364;
  double t3411;
  double t3413;
  double t3420;
  double t3650;
  double t3671;
  double t3694;
  double t3699;
  double t3702;
  double t4184;
  double t4190;
  double t3999;
  double t4003;
  double t4217;
  double t4221;
  double t4253;
  double t4257;
  double t3905;
  double t3930;
  double t4455;
  double t4473;
  double t4490;
  double t4513;
  double t4558;
  double t4581;
  double t4553;
  double t4594;
  double t4601;
  double t4622;
  double t4630;
  double t4635;
  double t4603;
  double t4640;
  double t4641;
  double t4650;
  double t4651;
  double t4656;
  double t4682;
  double t4683;
  double t4707;
  double t4061;
  double t4113;
  double t4138;
  double t4178;
  double t4903;
  double t4919;
  double t4924;
  double t4933;
  double t4935;
  double t4945;
  double t4373;
  double t4391;
  double t4860;
  double t4111;
  double t4869;
  double t4130;
  double t4870;
  double t4950;
  double t4181;
  double t4241;
  double t4313;
  double t4330;
  double t4365;
  double t4372;
  double t4993;
  double t4388;
  double t4999;
  double t4393;
  double t5185;
  double t5223;
  double t5131;
  double t5135;
  double t5158;
  double t5162;
  double t5175;
  double t5222;
  double t5225;
  double t5229;
  double t5233;
  double t5240;
  double t5244;
  double t5258;
  double t1068;
  double t1071;
  double t5267;
  double t1094;
  double t1161;
  double t5382;
  double t5409;
  double t5412;
  double t5417;
  double t5418;
  double t5329;
  double t2715;
  double t2717;
  double t2720;
  double t2730;
  double t2785;
  double t2814;
  double t2818;
  double t2954;
  double t2958;
  double t2961;
  double t2979;
  double t2990;
  double t2994;
  double t2996;
  double t5340;
  double t5333;
  double t5335;
  double t5338;
  double t5346;
  double t5350;
  double t5364;
  double t5371;
  double t5570;
  double t5581;
  double t3458;
  double t3461;
  double t3506;
  double t3513;
  double t3514;
  double t5594;
  double t5610;
  double t5612;
  double t5615;
  double t3570;
  double t3578;
  double t3582;
  double t3589;
  double t3592;
  double t5407;
  double t5420;
  double t5435;
  double t3866;
  double t3893;
  double t3896;
  double t3938;
  double t3961;
  double t3975;
  double t3978;
  double t3983;
  double t3991;
  double t4006;
  double t5589;
  double t5591;
  double t5616;
  double t5625;
  double t5633;
  double t5687;
  double t5688;
  double t5696;
  double t5697;
  double t5698;
  double t4351;
  double t4402;
  double t4677;
  double t4681;
  double t4711;
  double t4728;
  double t4732;
  double t4748;
  double t4759;
  double t4761;
  double t4773;
  double t4777;
  double t5716;
  double t5725;
  double t4934;
  double t4949;
  double t4953;
  double t4980;
  double t4989;
  double t5006;
  double t5823;
  double t5717;
  double t5826;
  double t5727;
  double t5040;
  double t5059;
  double t1079;
  double t1201;
  double t1213;
  double t1881;
  double t2319;
  double t2514;
  double t2535;
  double t2538;
  double t2553;
  double t3102;
  double t3641;
  double t6016;
  double t6019;
  double t6020;
  double t6022;
  double t6024;
  double t6330;
  double t6333;
  double t6334;
  double t6367;
  double t6385;
  double t6391;
  double t6399;
  double t6400;
  double t6405;
  double t6473;
  double t6463;
  double t6474;
  double t6476;
  double t6440;
  double t6443;
  double t6449;
  double t6454;
  double t6485;
  double t6496;
  double t6512;
  double t6514;
  double t6541;
  double t6522;
  double t6539;
  double t6550;
  double t6484;
  double t6489;
  double t6498;
  double t6503;
  double t6507;
  double t6562;
  double t6571;
  double t6578;
  double t6644;
  double t6659;
  double t6604;
  double t6605;
  double t6609;
  double t6690;
  double t6705;
  double t6706;
  double t6584;
  double t6596;
  double t6599;
  double t6776;
  double t6785;
  double t6893;
  double t6894;
  double t6896;
  double t6814;
  double t6815;
  double t6870;
  double t6872;
  double t6889;
  double t6936;
  double t6779;
  double t6781;
  double t6784;
  double t6949;
  double t6792;
  double t6965;
  double t6817;
  double t6824;
  double t6978;
  double t6835;
  double t6840;
  double t7098;
  double t7102;
  double t7104;
  double t7109;
  double t7110;
  double t7111;
  double t7123;
  double t7132;
  double t7139;
  double t7142;
  double t7150;
  double t7155;
  double t7157;
  double t7200;
  double t7202;
  double t7203;
  double t7204;
  double t7185;
  double t7186;
  double t7188;
  double t7191;
  double t7193;
  double t7224;
  double t7227;
  double t7229;
  double t7241;
  double t7244;
  double t7247;
  double t7257;
  double t7263;
  double t7350;
  double t7363;
  double t7368;
  double t7336;
  double t7341;
  double t7342;
  double t7467;
  double t7471;
  double t7478;
  double t7484;
  double t7492;
  double t7496;
  double t7505;
  double t7506;
  double t7521;
  double t7524;
  double t7532;
  t19 = Sin(var1[6]);
  t95 = Cos(var1[7]);
  t323 = Cos(var1[8]);
  t333 = Sin(var1[7]);
  t370 = -1.*t323;
  t389 = 1. + t370;
  t392 = -1.3127*t389;
  t399 = -1.3127*t323;
  t401 = Sin(var1[8]);
  t412 = -0.06*t401;
  t440 = t392 + t399 + t412;
  t476 = Cos(var1[6]);
  t161 = -1.*t95;
  t296 = 1. + t161;
  t309 = -0.9063*t296;
  t346 = -0.06*t323*t333;
  t442 = t95*t440;
  t447 = t309 + t346 + t442;
  t477 = 0.06*t95*t323;
  t484 = 0.9063*t333;
  t487 = t333*t440;
  t507 = t477 + t484 + t487;
  t552 = -1.*t323*t333;
  t571 = -1.*t95*t401;
  t580 = t552 + t571;
  t593 = t95*t323;
  t599 = -1.*t333*t401;
  t604 = t593 + t599;
  t612 = t476*t604;
  t820 = t323*t333;
  t828 = t95*t401;
  t891 = t820 + t828;
  t969 = Cos(var1[2]);
  t588 = t19*t580;
  t616 = t588 + t612;
  t791 = Sin(var1[2]);
  t731 = t476*t580;
  t733 = -1.*t19*t604;
  t745 = t731 + t733;
  t621 = -1.*t476;
  t653 = 1. + t621;
  t691 = -0.4999*t653;
  t705 = t476*t447;
  t724 = -1.*t19*t507;
  t727 = t691 + t705 + t724;
  t906 = -1.*t19*t891;
  t920 = t906 + t612;
  t26 = 0.4999*t19;
  t459 = t19*t447;
  t521 = t476*t507;
  t543 = t26 + t459 + t521;
  t974 = t476*t891;
  t1041 = t19*t604;
  t1052 = t974 + t1041;
  t619 = -1.*t543*t616;
  t771 = -1.*t727*t745;
  t772 = t619 + t771;
  t935 = -1.*t791*t920;
  t1403 = -1.*t19*t580;
  t1406 = -1.*t476*t604;
  t1416 = t1403 + t1406;
  t1126 = -1.*t791*t745;
  t1168 = t727*t920;
  t1169 = t543*t1052;
  t1191 = t1168 + t1169;
  t1499 = -0.4999*t19;
  t1501 = -1.*t19*t447;
  t1510 = -1.*t476*t507;
  t1555 = t1499 + t1501 + t1510;
  t1308 = -1.*t476*t891;
  t1312 = t1308 + t733;
  t1429 = 0.4999*t476;
  t1448 = t1429 + t705 + t724;
  t1735 = -1.*t791*t616;
  t1743 = t969*t745;
  t1763 = t1735 + t1743;
  t1946 = 0.9063*t95;
  t1968 = t1946 + t346 + t442;
  t2007 = -0.06*t95*t323;
  t2027 = -0.9063*t333;
  t2052 = -1.*t333*t440;
  t2055 = t2007 + t2027 + t2052;
  t2133 = -1.*t95*t323;
  t2137 = t333*t401;
  t2151 = t2133 + t2137;
  t1588 = t969*t920;
  t1594 = -1.*t791*t1052;
  t1595 = t1588 + t1594;
  t2083 = t476*t1968;
  t2095 = t19*t2055;
  t2119 = t2083 + t2095;
  t1983 = -1.*t19*t1968;
  t2064 = t476*t2055;
  t2068 = t1983 + t2064;
  t2183 = t476*t2151;
  t2184 = t1403 + t2183;
  t2207 = t19*t2151;
  t2208 = t731 + t2207;
  t1904 = 1.142857*t1763*t772;
  t1909 = t543*t616;
  t2072 = t727*t745;
  t2329 = -0.06*t95*t401;
  t2344 = t346 + t2329;
  t2354 = 0.06*t333*t401;
  t2390 = t2007 + t2354;
  t2205 = t969*t2184;
  t2224 = -1.*t791*t2208;
  t2229 = t2205 + t2224;
  t2233 = 1.142857*t1191*t2229;
  t2350 = -1.*t19*t2344;
  t2392 = t476*t2390;
  t2408 = t2350 + t2392;
  t2410 = t476*t2344;
  t2463 = t19*t2390;
  t2470 = t2410 + t2463;
  t2252 = -1.*t727*t2184;
  t2256 = -1.*t543*t2208;
  t1323 = t969*t1312;
  t1422 = -1.*t727*t1416;
  t1462 = -1.*t1448*t616;
  t1556 = -1.*t1555*t745;
  t1572 = -1.*t543*t745;
  t1586 = t1422 + t1462 + t1556 + t1572;
  t2605 = t19*t891;
  t2616 = t2605 + t1406;
  t2739 = -0.4999*t476;
  t2743 = -1.*t476*t447;
  t2747 = t19*t507;
  t2758 = t2739 + t2743 + t2747;
  t1706 = t969*t1416;
  t2807 = -1.*t476*t580;
  t2810 = t2807 + t1041;
  t1776 = t1555*t920;
  t1801 = t543*t920;
  t1803 = t727*t1312;
  t1808 = t1448*t1052;
  t1824 = t1776 + t1801 + t1803 + t1808;
  t1359 = t935 + t1323;
  t1368 = 1.142857*t772*t1359;
  t1639 = 1.142857*t1586*t1595;
  t1720 = t1706 + t1126;
  t1729 = 1.142857*t1720*t1191;
  t1860 = 1.142857*t1763*t1824;
  t1878 = t1368 + t1639 + t1729 + t1860;
  t2881 = t969*t616;
  t2885 = t791*t745;
  t2893 = t2881 + t2885;
  t3065 = t791*t1416;
  t3068 = t3065 + t1743;
  t2070 = t2068*t920;
  t2122 = t2119*t1052;
  t2127 = t1909 + t2070 + t2072 + t2122;
  t2668 = t791*t1312;
  t2671 = t1588 + t2668;
  t2241 = -1.*t2119*t616;
  t2249 = -1.*t2068*t745;
  t2259 = t2241 + t2249 + t2252 + t2256;
  t2823 = t791*t920;
  t2833 = t969*t1052;
  t2837 = t2823 + t2833;
  t3149 = -1.*t476*t1968;
  t3153 = -1.*t19*t2055;
  t3163 = t3149 + t3153;
  t3227 = -1.*t19*t2151;
  t3228 = t2807 + t3227;
  t3134 = 1.142857*t2893*t1586;
  t3137 = 1.142857*t3068*t772;
  t3143 = t727*t1416;
  t3144 = t1448*t616;
  t3187 = t1555*t745;
  t3191 = t543*t745;
  t2409 = t920*t2408;
  t2483 = t1052*t2470;
  t2505 = t1909 + t2072 + t2409 + t2483;
  t3253 = t791*t3228;
  t3254 = t2205 + t3253;
  t3262 = 1.142857*t1191*t3254;
  t3273 = t791*t2184;
  t3278 = t969*t2208;
  t3287 = t3273 + t3278;
  t3288 = 1.142857*t1824*t3287;
  t2516 = -1.*t745*t2408;
  t2529 = -1.*t616*t2470;
  t2530 = t2516 + t2529 + t2252 + t2256;
  t3466 = -1.*t476*t2344;
  t3494 = -1.*t19*t2390;
  t3497 = t3466 + t3494;
  t3375 = -1.*t1555*t2184;
  t3381 = -1.*t543*t2184;
  t3391 = -1.*t727*t3228;
  t3393 = -1.*t1448*t2208;
  t2129 = 1.142857*t1763*t2127;
  t2296 = 1.142857*t1595*t2259;
  t2308 = t1904 + t2129 + t2233 + t2296;
  t3707 = -0.9063*t95;
  t3748 = 0.06*t323*t333;
  t3755 = -1.*t95*t440;
  t3799 = t3707 + t3748 + t3755;
  t3647 = t2605 + t2183;
  t3661 = t974 + t3227;
  t3867 = t476*t3799;
  t3889 = t3867 + t3153;
  t3809 = t19*t3799;
  t3812 = t3809 + t2064;
  t3182 = t3163*t920;
  t3183 = t2119*t920;
  t3196 = t2068*t1312;
  t3198 = t2068*t1052;
  t3199 = t3143 + t3144 + t3182 + t3183 + t3187 + t3191 + t3196 + t3198;
  t3208 = 1.142857*t2893*t3199;
  t3226 = 1.142857*t3068*t2127;
  t3349 = 1.142857*t2671*t2259;
  t3351 = -1.*t2068*t1416;
  t3353 = -1.*t2068*t616;
  t3362 = -1.*t3163*t745;
  t3364 = -1.*t2119*t745;
  t3411 = t3351 + t3353 + t3362 + t3364 + t3375 + t3381 + t3391 + t3393;
  t3413 = 1.142857*t2837*t3411;
  t3420 = t3134 + t3137 + t3208 + t3226 + t3262 + t3288 + t3349 + t3413;
  t3650 = t969*t3647;
  t3671 = t791*t3661;
  t3694 = t3650 + t3671;
  t3699 = 1.142857*t1191*t3694;
  t3702 = 1.142857*t772*t3287;
  t4184 = 0.06*t95*t401;
  t4190 = t3748 + t4184;
  t3999 = t727*t2184;
  t4003 = t543*t2208;
  t4217 = t19*t4190;
  t4221 = t4217 + t2392;
  t4253 = t476*t4190;
  t4257 = t4253 + t3494;
  t3905 = -1.*t543*t3647;
  t3930 = -1.*t727*t3661;
  t4455 = -0.06*t323;
  t4473 = 0. + t4455;
  t4490 = t4473*t333;
  t4513 = t4490 + t2329;
  t4558 = t95*t4473;
  t4581 = t4558 + t2354;
  t4553 = -1.*t19*t4513;
  t4594 = t476*t4581;
  t4601 = t4553 + t4594;
  t4622 = t476*t4513;
  t4630 = t19*t4581;
  t4635 = t4622 + t4630;
  t4603 = t920*t4601;
  t4640 = t1052*t4635;
  t4641 = t1909 + t2072 + t4603 + t4640;
  t4650 = -1.*t745*t4601;
  t4651 = -1.*t616*t4635;
  t4656 = t4650 + t4651 + t2252 + t2256;
  t4682 = -1.*t476*t4513;
  t4683 = -1.*t19*t4581;
  t4707 = t4682 + t4683;
  t4061 = 1.142857*t2127*t3287;
  t4113 = 1.142857*t2893*t2259;
  t4138 = t2119*t616;
  t4178 = t2068*t745;
  t4903 = -1.*t4473*t333;
  t4919 = t4903 + t4184;
  t4924 = t19*t4919;
  t4933 = t4924 + t4594;
  t4935 = t476*t4919;
  t4945 = t4935 + t4683;
  t4373 = -1.*t2068*t2184;
  t4391 = -1.*t2119*t2208;
  t4860 = 1.142857*t4641*t3287;
  t4111 = 1.142857*t2505*t3287;
  t4869 = 1.142857*t2893*t4656;
  t4130 = 1.142857*t2893*t2530;
  t4870 = t745*t4601;
  t4950 = t616*t4635;
  t4181 = t745*t2408;
  t4241 = t1052*t4221;
  t4313 = t920*t4257;
  t4330 = t616*t2470;
  t4365 = -1.*t616*t4221;
  t4372 = -1.*t745*t4257;
  t4993 = -1.*t4601*t2184;
  t4388 = -1.*t2408*t2184;
  t4999 = -1.*t4635*t2208;
  t4393 = -1.*t2470*t2208;
  t5185 = 1.142857*t2893*t772;
  t5223 = 1.142857*t1191*t3287;
  t5131 = 1.142857*t772*t2671;
  t5135 = 1.142857*t1586*t2837;
  t5158 = 1.142857*t3068*t1191;
  t5162 = 1.142857*t2893*t1824;
  t5175 = t5131 + t5135 + t5158 + t5162;
  t5222 = 1.142857*t2893*t2127;
  t5225 = 1.142857*t2837*t2259;
  t5229 = t5185 + t5222 + t5223 + t5225;
  t5233 = 1.142857*t2893*t2505;
  t5240 = 1.142857*t2837*t2530;
  t5244 = t5185 + t5233 + t5223 + t5240;
  t5258 = -1.*t969*t920;
  t1068 = -1.*t969*t1052;
  t1071 = t935 + t1068;
  t5267 = -1.*t969*t745;
  t1094 = -1.*t969*t616;
  t1161 = t1094 + t1126;
  t5382 = 1.142857*t1161*t772;
  t5409 = -1.*t791*t2184;
  t5412 = -1.*t969*t2208;
  t5417 = t5409 + t5412;
  t5418 = 1.142857*t1191*t5417;
  t5329 = -1.*t791*t1312;
  t2715 = -2.*t1555*t1416;
  t2717 = -1.*t543*t1416;
  t2720 = -1.*t1555*t616;
  t2730 = -2.*t1448*t745;
  t2785 = -1.*t2758*t745;
  t2814 = -1.*t727*t2810;
  t2818 = t2715 + t2717 + t2720 + t2730 + t2785 + t2814;
  t2954 = t727*t2616;
  t2958 = 2.*t1448*t920;
  t2961 = t2758*t920;
  t2979 = 2.*t1555*t1312;
  t2990 = t543*t1312;
  t2994 = t1555*t1052;
  t2996 = t2954 + t2958 + t2961 + t2979 + t2990 + t2994;
  t5340 = -1.*t791*t1416;
  t5333 = t5258 + t5329;
  t5335 = 1.142857*t772*t5333;
  t5338 = 1.142857*t1586*t1071;
  t5346 = t5340 + t5267;
  t5350 = 1.142857*t5346*t1191;
  t5364 = 1.142857*t1161*t1824;
  t5371 = t5335 + t5338 + t5350 + t5364;
  t5570 = 1.142857*t1763*t1586;
  t5581 = 1.142857*t1720*t772;
  t3458 = t1312*t2408;
  t3461 = t1052*t2408;
  t3506 = t920*t3497;
  t3513 = t920*t2470;
  t3514 = t3143 + t3144 + t3187 + t3191 + t3458 + t3461 + t3506 + t3513;
  t5594 = t969*t3228;
  t5610 = t5409 + t5594;
  t5612 = 1.142857*t1191*t5610;
  t5615 = 1.142857*t1824*t2229;
  t3570 = -1.*t1416*t2408;
  t3578 = -1.*t616*t2408;
  t3582 = -1.*t745*t3497;
  t3589 = -1.*t745*t2470;
  t3592 = t3570 + t3578 + t3582 + t3589 + t3375 + t3381 + t3391 + t3393;
  t5407 = 1.142857*t1161*t2127;
  t5420 = 1.142857*t1071*t2259;
  t5435 = t5382 + t5407 + t5418 + t5420;
  t3866 = -1.*t3812*t616;
  t3893 = -1.*t3889*t745;
  t3896 = -2.*t2068*t2184;
  t3938 = -2.*t2119*t2208;
  t3961 = t3866 + t3893 + t3896 + t3905 + t3930 + t3938;
  t3975 = 2.*t2119*t616;
  t3978 = t3889*t920;
  t3983 = 2.*t2068*t745;
  t3991 = t3812*t1052;
  t4006 = t3975 + t3978 + t3983 + t3991 + t3999 + t4003;
  t5589 = 1.142857*t1763*t3199;
  t5591 = 1.142857*t1720*t2127;
  t5616 = 1.142857*t1359*t2259;
  t5625 = 1.142857*t1595*t3411;
  t5633 = t5570 + t5581 + t5589 + t5591 + t5612 + t5615 + t5616 + t5625;
  t5687 = -1.*t791*t3647;
  t5688 = t969*t3661;
  t5696 = t5687 + t5688;
  t5697 = 1.142857*t1191*t5696;
  t5698 = 1.142857*t772*t2229;
  t4351 = t4138 + t4178 + t4181 + t4241 + t4313 + t4330 + t3999 + t4003;
  t4402 = t4365 + t4372 + t4373 + t4388 + t3905 + t3930 + t4391 + t4393;
  t4677 = t1312*t4601;
  t4681 = t1052*t4601;
  t4711 = t920*t4707;
  t4728 = t920*t4635;
  t4732 = t3143 + t3144 + t3187 + t3191 + t4677 + t4681 + t4711 + t4728;
  t4748 = -1.*t1416*t4601;
  t4759 = -1.*t616*t4601;
  t4761 = -1.*t745*t4707;
  t4773 = -1.*t745*t4635;
  t4777 = t4748 + t4759 + t4761 + t4773 + t3375 + t3381 + t3391 + t3393;
  t5716 = 1.142857*t2127*t2229;
  t5725 = 1.142857*t1763*t2259;
  t4934 = t1052*t4933;
  t4949 = t920*t4945;
  t4953 = t4138 + t4178 + t4870 + t4934 + t4949 + t4950 + t3999 + t4003;
  t4980 = -1.*t616*t4933;
  t4989 = -1.*t745*t4945;
  t5006 = t4980 + t4989 + t4373 + t4993 + t3905 + t3930 + t4391 + t4999;
  t5823 = 1.142857*t4641*t2229;
  t5717 = 1.142857*t2505*t2229;
  t5826 = 1.142857*t1763*t4656;
  t5727 = 1.142857*t1763*t2530;
  t5040 = t4870 + t4950 + t4181 + t4241 + t4313 + t4330 + t3999 + t4003;
  t5059 = t4365 + t4372 + t4993 + t4388 + t3905 + t3930 + t4999 + t4393;
  t1079 = 1.142857*t772*t1071;
  t1201 = 1.142857*t1161*t1191;
  t1213 = t1079 + t1201;
  t1881 = -0.5*var2[6]*t1878;
  t2319 = -0.5*var2[7]*t2308;
  t2514 = 1.142857*t1763*t2505;
  t2535 = 1.142857*t1595*t2530;
  t2538 = t1904 + t2514 + t2233 + t2535;
  t2553 = -0.5*var2[8]*t2538;
  t3102 = -0.5*var2[2]*t1878;
  t3641 = -0.5*var2[2]*t2308;
  t6016 = 2.285714*t3199*t1191;
  t6019 = 2.285714*t2127*t1824;
  t6020 = 2.285714*t1586*t2259;
  t6022 = 2.285714*t772*t3411;
  t6024 = t6016 + t6019 + t6020 + t6022;
  t6330 = 2.285714*t1586*t772;
  t6333 = 2.285714*t1191*t1824;
  t6334 = t6330 + t6333;
  t6367 = 2.285714*t2127*t1191;
  t6385 = 2.285714*t772*t2259;
  t6391 = t6367 + t6385;
  t6399 = 2.285714*t1191*t2505;
  t6400 = 2.285714*t772*t2530;
  t6405 = t6399 + t6400;
  t6473 = 0.4999*t604;
  t6463 = t507*t891;
  t6474 = t447*t604;
  t6476 = t6463 + t6473 + t6474;
  t6440 = -1.*t447*t580;
  t6443 = 0.4999*t891;
  t6449 = -1.*t507*t604;
  t6454 = t6440 + t6443 + t6449;
  t6485 = -1.*t507*t580;
  t6496 = -1.*t447*t2151;
  t6512 = 0.4999*t580;
  t6514 = t447*t580;
  t6541 = t507*t604;
  t6522 = t1968*t891;
  t6539 = t2055*t604;
  t6550 = t6512 + t6514 + t6522 + t6539 + t6541;
  t6484 = -1.*t2055*t580;
  t6489 = -1.*t1968*t604;
  t6498 = t6484 + t6485 + t6473 + t6489 + t6496;
  t6503 = 1.142857*t6498*t1586;
  t6507 = 1.142857*t6476*t3199;
  t6562 = 1.142857*t6550*t1824;
  t6571 = 1.142857*t6454*t3411;
  t6578 = t6503 + t6507 + t6562 + t6571;
  t6644 = -1.*t447*t891;
  t6659 = -1.*t507*t2151;
  t6604 = t2344*t891;
  t6605 = t604*t2390;
  t6609 = t6512 + t6514 + t6604 + t6541 + t6605;
  t6690 = t507*t580;
  t6705 = 0.4999*t2151;
  t6706 = t447*t2151;
  t6584 = -1.*t2344*t604;
  t6596 = -1.*t580*t2390;
  t6599 = t6485 + t6473 + t6584 + t6596 + t6496;
  t6776 = -1.*t1968*t580;
  t6785 = -1.*t2055*t2151;
  t6893 = t4513*t891;
  t6894 = t604*t4581;
  t6896 = t6512 + t6514 + t6893 + t6541 + t6894;
  t6814 = t2055*t580;
  t6815 = t1968*t604;
  t6870 = -1.*t4513*t604;
  t6872 = -1.*t580*t4581;
  t6889 = t6485 + t6473 + t6870 + t6872 + t6496;
  t6936 = -1.*t580*t4513;
  t6779 = -1.*t580*t2344;
  t6781 = -1.*t580*t4190;
  t6784 = -1.*t604*t2390;
  t6949 = -1.*t4581*t2151;
  t6792 = -1.*t2390*t2151;
  t6965 = t4513*t604;
  t6817 = t2344*t604;
  t6824 = t4190*t604;
  t6978 = t580*t4581;
  t6835 = t580*t2390;
  t6840 = t891*t2390;
  t7098 = 1.142857*t6454*t1586;
  t7102 = 1.142857*t6476*t1824;
  t7104 = t7098 + t7102;
  t7109 = 1.142857*t6498*t772;
  t7110 = 1.142857*t6476*t2127;
  t7111 = 1.142857*t6550*t1191;
  t7123 = 1.142857*t6454*t2259;
  t7132 = t7109 + t7110 + t7111 + t7123;
  t7139 = 1.142857*t6599*t772;
  t7142 = 1.142857*t6609*t1191;
  t7150 = 1.142857*t6476*t2505;
  t7155 = 1.142857*t6454*t2530;
  t7157 = t7139 + t7142 + t7150 + t7155;
  t7200 = 0.9063*t323;
  t7202 = t323*t440;
  t7203 = 0.06*t323*t401;
  t7204 = t7200 + t7202 + t7203;
  t7185 = Power(t323,2);
  t7186 = -0.06*t7185;
  t7188 = 0.9063*t401;
  t7191 = t440*t401;
  t7193 = t7186 + t7188 + t7191;
  t7224 = 1.142857*t7204*t3199;
  t7227 = 1.142857*t7193*t3411;
  t7229 = t7224 + t7227;
  t7241 = -0.9063*t401;
  t7244 = -1.*t440*t401;
  t7247 = Power(t401,2);
  t7257 = -0.06*t7247;
  t7263 = 0. + t7241 + t7244 + t7257;
  t7350 = t4473*t323;
  t7363 = 0.06*t7185;
  t7368 = t7350 + t7363 + t7241 + t7244 + t7257;
  t7336 = t4473*t401;
  t7341 = 0.12*t323*t401;
  t7342 = t7200 + t7202 + t7336 + t7341;
  t7467 = 1.142857*t7193*t1586;
  t7471 = 1.142857*t7204*t1824;
  t7478 = t7467 + t7471;
  t7484 = 1.142857*t7204*t2127;
  t7492 = 1.142857*t7193*t2259;
  t7496 = t7484 + t7492;
  t7505 = 1.142857*t7204*t772;
  t7506 = 1.142857*t7263*t1191;
  t7521 = 1.142857*t7204*t2505;
  t7524 = 1.142857*t7193*t2530;
  t7532 = t7505 + t7506 + t7521 + t7524;
  p_output1[0]=var2[2]*(t1881 + t2319 + t2553 - 0.5*t1213*var2[2]);
  p_output1[1]=var2[2]*(t3102 - 0.5*(2.285714*t1586*t2671 + 1.142857*t2818*t2837 + 1.142857*t2893*t2996 + 2.285714*t1824*t3068 + 1.142857*t772*(t1323 + t2616*t791) + 1.142857*t1191*(t1706 + t2810*t791))*var2[6] - 0.5*t3420*var2[7] - 0.5*(1.142857*t2530*t2671 + 1.142857*t2505*t3068 + t3134 + t3137 + t3262 + t3288 + 1.142857*t2893*t3514 + 1.142857*t2837*t3592)*var2[8]);
  p_output1[2]=var2[2]*(t3641 - 0.5*t3420*var2[6] - 0.5*(2.285714*t2259*t2893 + 2.285714*t2127*t3287 + t3699 + t3702 + 1.142857*t2837*t3961 + 1.142857*t2893*t4006)*var2[7] - 0.5*(t3699 + t3702 + t4061 + t4111 + t4113 + t4130 + 1.142857*t2893*t4351 + 1.142857*t2837*t4402)*var2[8]);
  p_output1[3]=var2[2]*(-0.5*(t1904 + t2233 + 1.142857*t1763*t4641 + 1.142857*t1595*t4656)*var2[2] - 0.5*(t3134 + t3137 + t3262 + t3288 + 1.142857*t3068*t4641 + 1.142857*t2671*t4656 + 1.142857*t2893*t4732 + 1.142857*t2837*t4777)*var2[6] - 0.5*(t3699 + t3702 + t4061 + t4113 + t4860 + t4869 + 1.142857*t2893*t4953 + 1.142857*t2837*t5006)*var2[7] - 0.5*(t3699 + t3702 + t4111 + t4130 + t4860 + t4869 + 1.142857*t2893*t5040 + 1.142857*t2837*t5059)*var2[8]);
  p_output1[4]=-1.*(1.142857*t1191*t1763 + 1.142857*t1595*t772)*var2[2] - 0.5*t5175*var2[6] - 0.5*t5229*var2[7] - 0.5*t5244*var2[8];
  p_output1[5]=-0.5*t5175*var2[2];
  p_output1[6]=-0.5*t5229*var2[2];
  p_output1[7]=-0.5*t5244*var2[2];
  p_output1[8]=var2[2]*(-0.5*(1.142857*t772*(t5258 + t1052*t791) + 1.142857*t1191*(t5267 + t616*t791))*var2[2] - 0.5*t5371*var2[6] - 0.5*t5435*var2[7] - 0.5*(1.142857*t1161*t2505 + 1.142857*t1071*t2530 + t5382 + t5418)*var2[8]);
  p_output1[9]=var2[2]*(-0.5*t5371*var2[2] - 0.5*(2.285714*t1359*t1586 + 2.285714*t1720*t1824 + 1.142857*t1595*t2818 + 1.142857*t1763*t2996 + 1.142857*t772*(t5329 + t2616*t969) + 1.142857*t1191*(t5340 + t2810*t969))*var2[6] - 0.5*t5633*var2[7] - 0.5*(1.142857*t1720*t2505 + 1.142857*t1359*t2530 + 1.142857*t1763*t3514 + 1.142857*t1595*t3592 + t5570 + t5581 + t5612 + t5615)*var2[8]);
  p_output1[10]=var2[2]*(-0.5*t5435*var2[2] - 0.5*t5633*var2[6] - 0.5*(2.285714*t2127*t2229 + 2.285714*t1763*t2259 + 1.142857*t1595*t3961 + 1.142857*t1763*t4006 + t5697 + t5698)*var2[7] - 0.5*(1.142857*t1763*t4351 + 1.142857*t1595*t4402 + t5697 + t5698 + t5716 + t5717 + t5725 + t5727)*var2[8]);
  p_output1[11]=var2[2]*(-0.5*(1.142857*t1161*t4641 + 1.142857*t1071*t4656 + t5382 + t5418)*var2[2] - 0.5*(1.142857*t1720*t4641 + 1.142857*t1359*t4656 + 1.142857*t1763*t4732 + 1.142857*t1595*t4777 + t5570 + t5581 + t5612 + t5615)*var2[6] - 0.5*(1.142857*t1763*t4953 + 1.142857*t1595*t5006 + t5697 + t5698 + t5716 + t5725 + t5823 + t5826)*var2[7] - 0.5*(1.142857*t1763*t5040 + 1.142857*t1595*t5059 + t5697 + t5698 + t5717 + t5727 + t5823 + t5826)*var2[8]);
  p_output1[12]=t1881 + t2319 + t2553 - 1.*t1213*var2[2];
  p_output1[13]=t3102;
  p_output1[14]=t3641;
  p_output1[15]=-0.5*t2538*var2[2];
  p_output1[16]=var2[2]*(-0.5*(2.285714*Power(t1586,2) + 2.285714*Power(t1824,2) + 2.285714*t1191*t2996 + 2.285714*t2818*t772)*var2[6] - 0.5*t6024*var2[7] - 0.5*(2.285714*t1824*t2505 + 2.285714*t1586*t2530 + 2.285714*t1191*t3514 + 2.285714*t3592*t772)*var2[8]);
  p_output1[17]=var2[2]*(-0.5*t6024*var2[6] - 0.5*(2.285714*Power(t2127,2) + 2.285714*Power(t2259,2) + 2.285714*t1191*t4006 + 2.285714*t3961*t772)*var2[7] - 0.5*(2.285714*t2127*t2505 + 2.285714*t2259*t2530 + 2.285714*t1191*t4351 + 2.285714*t4402*t772)*var2[8]);
  p_output1[18]=var2[2]*(-0.5*(2.285714*t1824*t4641 + 2.285714*t1586*t4656 + 2.285714*t1191*t4732 + 2.285714*t4777*t772)*var2[6] - 0.5*(2.285714*t2127*t4641 + 2.285714*t2259*t4656 + 2.285714*t1191*t4953 + 2.285714*t5006*t772)*var2[7] - 0.5*(2.285714*t2505*t4641 + 2.285714*t2530*t4656 + 2.285714*t1191*t5040 + 2.285714*t5059*t772)*var2[8]);
  p_output1[19]=-0.5*t6334*var2[6] - 0.5*t6391*var2[7] - 0.5*t6405*var2[8];
  p_output1[20]=-0.5*t6334*var2[2];
  p_output1[21]=-0.5*t6391*var2[2];
  p_output1[22]=-0.5*t6405*var2[2];
  p_output1[23]=var2[2]*(-0.5*(1.142857*t2818*t6454 + 1.142857*t2996*t6476)*var2[6] - 0.5*t6578*var2[7] - 0.5*(1.142857*t3592*t6454 + 1.142857*t3514*t6476 + 1.142857*t1586*t6599 + 1.142857*t1824*t6609)*var2[8]);
  p_output1[24]=var2[2]*(-0.5*t6578*var2[6] - 0.5*(1.142857*t3961*t6454 + 1.142857*t4006*t6476 + 2.285714*t2259*t6498 + 2.285714*t2127*t6550 + 1.142857*(-2.*t2055*t2151 - 2.*t1968*t580 - 1.*t3799*t580 - 1.*t2055*t604 + t6512 + t6644 + t6659)*t772 + 1.142857*t1191*(2.*t2055*t580 + 2.*t1968*t604 + t3799*t604 + t6690 + t6705 + t6706 + t2055*t891))*var2[7] - 0.5*(1.142857*t4402*t6454 + 1.142857*t4351*t6476 + 1.142857*t2530*t6498 + 1.142857*t2505*t6550 + 1.142857*t2259*t6599 + 1.142857*t2127*t6609 + 1.142857*t1191*(t6690 + t6705 + t6706 + t6814 + t6815 + t6817 + t6824 + t6835 + t6840) + 1.142857*(t6512 + t6644 + t6659 + t6776 + t6779 + t6781 + t6784 + t6785 + t6792)*t772)*var2[8]);
  p_output1[25]=var2[2]*(-0.5*(1.142857*t4777*t6454 + 1.142857*t4732*t6476 + 1.142857*t1586*t6889 + 1.142857*t1824*t6896)*var2[6] - 0.5*(1.142857*t5006*t6454 + 1.142857*t4953*t6476 + 1.142857*t4656*t6498 + 1.142857*t4641*t6550 + 1.142857*t2259*t6889 + 1.142857*t2127*t6896 + 1.142857*(-1.*t4919*t580 - 1.*t4581*t604 + t6512 + t6644 + t6659 + t6776 + t6785 + t6936 + t6949)*t772 + 1.142857*t1191*(t4919*t604 + t6690 + t6705 + t6706 + t6814 + t6815 + t6965 + t6978 + t4581*t891))*var2[7] - 0.5*(1.142857*t5059*t6454 + 1.142857*t5040*t6476 + 1.142857*t4656*t6599 + 1.142857*t4641*t6609 + 1.142857*t2530*t6889 + 1.142857*t2505*t6896 + 1.142857*t1191*(t6690 + t6705 + t6706 + t6817 + t6824 + t6835 + t6840 + t6965 + t6978) + 1.142857*(t6512 + t6644 + t6659 + t6779 + t6781 + t6784 + t6792 + t6936 + t6949)*t772)*var2[8]);
  p_output1[26]=-0.5*t7104*var2[6] - 0.5*t7132*var2[7] - 0.5*t7157*var2[8];
  p_output1[27]=-0.5*t7104*var2[2];
  p_output1[28]=-0.5*t7132*var2[2];
  p_output1[29]=-0.5*t7157*var2[2];
  p_output1[30]=var2[2]*(-0.5*(1.142857*t2818*t7193 + 1.142857*t2996*t7204)*var2[6] - 0.5*t7229*var2[7] - 0.5*(1.142857*t3592*t7193 + 1.142857*t1586*t7204 + 1.142857*t3514*t7204 + 1.142857*t1824*t7263)*var2[8]);
  p_output1[31]=var2[2]*(-0.5*t7229*var2[6] - 0.5*(1.142857*t3961*t7193 + 1.142857*t4006*t7204)*var2[7] - 0.5*(1.142857*t4402*t7193 + 1.142857*t2259*t7204 + 1.142857*t4351*t7204 + 1.142857*t2127*t7263)*var2[8]);
  p_output1[32]=var2[2]*(-0.5*(1.142857*t4777*t7193 + 1.142857*t4732*t7204 + 1.142857*t1586*t7342 + 1.142857*t1824*t7368)*var2[6] - 0.5*(1.142857*t5006*t7193 + 1.142857*t4953*t7204 + 1.142857*t2259*t7342 + 1.142857*t2127*t7368)*var2[7] - 0.5*(1.142857*t1191*(-0.9063*t323 - 0.12*t323*t401 - 1.*t323*t440 - 1.*t401*t4473) + 1.142857*t5059*t7193 + 1.142857*t4656*t7204 + 1.142857*t5040*t7204 + 1.142857*t4641*t7263 + 1.142857*t2530*t7342 + 1.142857*t2505*t7368 + 1.142857*t7368*t772)*var2[8]);
  p_output1[33]=-0.5*t7478*var2[6] - 0.5*t7496*var2[7] - 0.5*t7532*var2[8];
  p_output1[34]=-0.5*t7478*var2[2];
  p_output1[35]=-0.5*t7496*var2[2];
  p_output1[36]=-0.5*t7532*var2[2];
  p_output1[37]=var2[2]*(0.03428571*t2818*var2[6] + 0.03428571*t3411*var2[7] + 0.03428571*t3592*var2[8]);
  p_output1[38]=var2[2]*(0.03428571*t3411*var2[6] + 0.03428571*t3961*var2[7] + 0.03428571*t4402*var2[8]);
  p_output1[39]=var2[2]*(0.03428571*t4777*var2[6] + 0.03428571*t5006*var2[7] + 0.03428571*t5059*var2[8]);
  p_output1[40]=0.03428571*t1586*var2[6] + 0.03428571*t2259*var2[7] + 0.03428571*t2530*var2[8];
  p_output1[41]=0.03428571*t1586*var2[2];
  p_output1[42]=0.03428571*t2259*var2[2];
  p_output1[43]=0.03428571*t2530*var2[2];
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 9 && ncols == 1) && 
      !(mrows == 1 && ncols == 9))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 9 && ncols == 1) && 
      !(mrows == 1 && ncols == 9))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 44, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_Ce1_vec_L7_J3_amber3_feet.hh"

namespace RightSS1
{

void J_Ce1_vec_L7_J3_amber3_feet_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
