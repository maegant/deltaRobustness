/*
 * Automatically Generated from Mathematica.
 * Wed 1 Mar 2023 13:25:27 GMT-08:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t1132;
  double t748;
  double t961;
  double t1230;
  double t1411;
  double t1124;
  double t1297;
  double t1299;
  double t462;
  double t1416;
  double t1456;
  double t1472;
  double t82;
  double t1540;
  double t1544;
  double t1547;
  double t1580;
  double t1586;
  double t1399;
  double t1483;
  double t1506;
  double t1594;
  double t1772;
  double t1845;
  double t2229;
  double t2256;
  double t2260;
  double t2282;
  double t2286;
  double t2322;
  double t2389;
  double t2588;
  double t2505;
  double t2530;
  double t2533;
  double t1895;
  double t1909;
  double t2013;
  double t2070;
  double t2083;
  double t2183;
  double t2309;
  double t2494;
  double t2535;
  double t2538;
  double t2644;
  double t2671;
  double t3109;
  double t3116;
  double t3133;
  double t3168;
  double t3185;
  double t3199;
  double t3220;
  double t3063;
  double t3102;
  double t3187;
  double t3254;
  double t3262;
  double t3278;
  double t3287;
  double t3294;
  double t3349;
  double t3353;
  double t3360;
  double t1510;
  double t1588;
  double t2615;
  double t2616;
  double t2003;
  double t2410;
  double t1983;
  double t2027;
  double t2205;
  double t2483;
  double t2553;
  double t2674;
  double t2699;
  double t3476;
  double t3630;
  double t3755;
  double t3762;
  double t3770;
  double t3809;
  double t3866;
  double t3867;
  double t3893;
  double t3948;
  double t3518;
  double t3991;
  double t3999;
  double t4013;
  double t4061;
  double t4171;
  double t4174;
  double t4178;
  double t4184;
  double t4190;
  double t4198;
  double t4201;
  double t4215;
  double t3985;
  double t4225;
  double t4227;
  double t4239;
  double t4241;
  double t4253;
  double t4391;
  double t4404;
  double t4405;
  double t4296;
  double t4313;
  double t4324;
  double t4257;
  double t4285;
  double t4288;
  double t4457;
  double t2817;
  double t2818;
  double t2828;
  double t2901;
  double t4498;
  double t4605;
  double t4773;
  double t4777;
  double t4782;
  double t4783;
  double t4786;
  double t4792;
  double t4799;
  double t4800;
  double t4810;
  double t4815;
  double t4491;
  double t3477;
  double t3482;
  double t3494;
  double t3552;
  double t4615;
  double t3559;
  double t3570;
  double t4463;
  double t4490;
  double t4546;
  double t4588;
  double t4594;
  double t4639;
  double t4640;
  double t4650;
  double t4657;
  double t5017;
  double t5018;
  double t5020;
  double t5021;
  double t5034;
  double t5035;
  double t5040;
  double t5059;
  double t5065;
  double t5067;
  double t5076;
  double t5115;
  double t5122;
  double t5123;
  double t5124;
  double t5131;
  double t5135;
  double t5137;
  double t5138;
  double t5140;
  double t5092;
  double t5095;
  double t5143;
  double t5144;
  double t5158;
  double t5160;
  double t2785;
  double t2961;
  double t5246;
  double t5249;
  double t5251;
  double t5252;
  double t5253;
  double t5225;
  double t5226;
  double t5227;
  double t5233;
  double t5237;
  double t5162;
  double t5166;
  double t5175;
  double t5176;
  double t5201;
  double t5265;
  double t5277;
  double t5281;
  double t5285;
  double t5291;
  double t5320;
  double t5328;
  double t5270;
  double t5274;
  double t5275;
  double t5276;
  double t5329;
  double t5331;
  double t5335;
  double t5338;
  double t5340;
  double t5344;
  double t5402;
  double t5406;
  double t5407;
  double t5409;
  double t5420;
  double t5432;
  double t5267;
  double t5333;
  double t5364;
  double t5367;
  double t5385;
  double t5434;
  double t5435;
  double t5444;
  double t5448;
  double t5452;
  double t5489;
  double t5491;
  double t5495;
  double t5496;
  double t5469;
  double t5472;
  double t5565;
  double t5566;
  double t5570;
  double t5571;
  double t5578;
  double t5580;
  double t5596;
  double t5607;
  double t5609;
  double t5567;
  double t5581;
  double t5584;
  double t5556;
  double t5560;
  double t5591;
  double t5659;
  double t5661;
  double t5669;
  double t5672;
  double t5633;
  double t5668;
  double t5673;
  double t5674;
  double t5677;
  double t5681;
  double t5682;
  double t5640;
  double t5641;
  double t5468;
  double t5487;
  double t5498;
  double t5504;
  double t5516;
  double t5709;
  double t5710;
  double t5712;
  double t5713;
  double t5525;
  double t5532;
  double t5535;
  double t5539;
  double t5544;
  double t5465;
  double t5518;
  double t5522;
  double t5545;
  double t5547;
  double t5589;
  double t5610;
  double t5615;
  double t5638;
  double t5639;
  double t5645;
  double t5833;
  double t5837;
  double t5838;
  double t5820;
  double t5821;
  double t5823;
  double t5827;
  double t5847;
  double t5851;
  double t5676;
  double t5683;
  double t5687;
  double t5874;
  double t5886;
  double t5691;
  double t5694;
  double t5696;
  double t5968;
  double t5975;
  double t5979;
  double t5930;
  double t5932;
  double t5935;
  double t5952;
  double t5616;
  double t5646;
  double t5648;
  double t6118;
  double t6119;
  double t6126;
  double t6128;
  double t6151;
  double t6153;
  double t6129;
  double t6132;
  double t5840;
  double t5841;
  double t5859;
  double t5860;
  double t5861;
  double t5865;
  double t5870;
  double t5887;
  double t5896;
  double t5914;
  double t5921;
  double t5928;
  double t5956;
  double t5957;
  double t5961;
  double t6090;
  double t6099;
  double t6354;
  double t6355;
  double t6279;
  double t6280;
  double t6367;
  double t6379;
  double t6391;
  double t6392;
  double t6185;
  double t6193;
  double t6481;
  double t6482;
  double t6485;
  double t6491;
  double t6500;
  double t6502;
  double t6499;
  double t6507;
  double t6509;
  double t6514;
  double t6528;
  double t6532;
  double t6512;
  double t6539;
  double t6541;
  double t6567;
  double t6590;
  double t6596;
  double t6613;
  double t6615;
  double t6618;
  double t6309;
  double t6319;
  double t6333;
  double t6334;
  double t6744;
  double t6746;
  double t6747;
  double t6749;
  double t6758;
  double t6767;
  double t6436;
  double t6444;
  double t6724;
  double t6311;
  double t6736;
  double t6330;
  double t6740;
  double t6776;
  double t6336;
  double t6385;
  double t6399;
  double t6405;
  double t6423;
  double t6432;
  double t6808;
  double t6439;
  double t6809;
  double t6448;
  double t6942;
  double t6949;
  double t6891;
  double t6893;
  double t6901;
  double t6907;
  double t6908;
  double t6922;
  double t6924;
  double t6938;
  double t6943;
  double t6957;
  double t6959;
  double t6965;
  double t6975;
  double t6977;
  double t7012;
  double t7018;
  double t7020;
  double t7029;
  double t7037;
  double t7043;
  double t7053;
  double t7054;
  double t7098;
  double t7101;
  double t7102;
  double t7109;
  double t7123;
  double t7130;
  double t7139;
  double t7033;
  double t7088;
  double t7090;
  double t7104;
  double t7107;
  double t7110;
  double t7114;
  double t7125;
  double t7132;
  double t7203;
  double t7157;
  double t7160;
  double t7163;
  double t7169;
  double t7176;
  double t7179;
  double t7209;
  double t7204;
  double t7206;
  double t7212;
  double t7263;
  double t7281;
  double t7289;
  double t7307;
  double t7316;
  double t7328;
  double t7331;
  double t7111;
  double t7134;
  double t7141;
  double t7343;
  double t7438;
  double t7439;
  double t7442;
  double t7362;
  double t7363;
  double t7376;
  double t7395;
  double t7413;
  double t7429;
  double t7431;
  double t7433;
  double t7453;
  double t7350;
  double t7459;
  double t7368;
  double t7369;
  double t7471;
  double t7370;
  double t7371;
  double t7487;
  double t7377;
  double t7385;
  double t7386;
  double t7504;
  double t7396;
  double t7512;
  double t7418;
  double t7626;
  double t7638;
  double t7601;
  double t7602;
  double t7605;
  double t7578;
  double t7582;
  double t7594;
  double t7629;
  double t7632;
  double t7643;
  double t7645;
  double t7647;
  double t7649;
  double t7683;
  double t7685;
  double t7687;
  double t7690;
  double t7692;
  double t7696;
  double t7697;
  double t7701;
  double t7708;
  double t7720;
  double t7721;
  double t7691;
  double t7709;
  double t7710;
  double t7770;
  double t7729;
  double t7730;
  double t7731;
  double t7732;
  double t7733;
  double t7771;
  double t7772;
  double t7808;
  double t7809;
  double t7722;
  double t7864;
  double t7868;
  double t7869;
  double t7847;
  double t7853;
  double t7861;
  double t7817;
  double t7883;
  double t7823;
  double t7886;
  double t8000;
  double t8004;
  double t7985;
  double t7986;
  double t7992;
  double t7974;
  double t7977;
  double t7978;
  double t8005;
  double t8007;
  double t8008;
  double t8015;
  double t8114;
  double t8124;
  double t8129;
  double t8130;
  double t8132;
  double t8143;
  double t8181;
  t1132 = Cos(var1[7]);
  t748 = Cos(var1[8]);
  t961 = Sin(var1[7]);
  t1230 = Sin(var1[8]);
  t1411 = Cos(var1[6]);
  t1124 = -1.*t748*t961;
  t1297 = -1.*t1132*t1230;
  t1299 = t1124 + t1297;
  t462 = Sin(var1[6]);
  t1416 = t1132*t748;
  t1456 = -1.*t961*t1230;
  t1472 = t1416 + t1456;
  t82 = Sin(var1[2]);
  t1540 = Cos(var1[2]);
  t1544 = t1411*t1299;
  t1547 = -1.*t462*t1472;
  t1580 = t1544 + t1547;
  t1586 = t1540*t1580;
  t1399 = -1.*t462*t1299;
  t1483 = -1.*t1411*t1472;
  t1506 = t1399 + t1483;
  t1594 = t462*t1299;
  t1772 = t1411*t1472;
  t1845 = t1594 + t1772;
  t2229 = t748*t961;
  t2256 = t1132*t1230;
  t2260 = t2229 + t2256;
  t2282 = -1.*t462*t2260;
  t2286 = t2282 + t1772;
  t2322 = -1.*t1411*t2260;
  t2389 = t2322 + t1547;
  t2588 = t1540*t2286;
  t2505 = t1411*t2260;
  t2530 = t462*t1472;
  t2533 = t2505 + t2530;
  t1895 = -1.*t82*t1845;
  t1909 = t1895 + t1586;
  t2013 = -1.*t82*t1580;
  t2070 = t1540*t1845;
  t2083 = t82*t1580;
  t2183 = t2070 + t2083;
  t2309 = -1.*t82*t2286;
  t2494 = t82*t2286;
  t2535 = t1540*t2533;
  t2538 = t2494 + t2535;
  t2644 = -1.*t82*t2533;
  t2671 = t2588 + t2644;
  t3109 = -1.*t1132*t748;
  t3116 = t961*t1230;
  t3133 = t3109 + t3116;
  t3168 = t1411*t3133;
  t3185 = t1399 + t3168;
  t3199 = t462*t3133;
  t3220 = t1544 + t3199;
  t3063 = 2.285714*t1909*t2538;
  t3102 = 2.285714*t2183*t2671;
  t3187 = t82*t3185;
  t3254 = t1540*t3220;
  t3262 = t3187 + t3254;
  t3278 = 2.285714*t1909*t3262;
  t3287 = t1540*t3185;
  t3294 = -1.*t82*t3220;
  t3349 = t3287 + t3294;
  t3353 = 2.285714*t2183*t3349;
  t3360 = t3063 + t3102 + t3278 + t3353;
  t1510 = t82*t1506;
  t1588 = t1510 + t1586;
  t2615 = t82*t2389;
  t2616 = t2588 + t2615;
  t2003 = t1540*t1506;
  t2410 = t1540*t2389;
  t1983 = 2.285714*t1588*t1909;
  t2027 = t2003 + t2013;
  t2205 = 2.285714*t2027*t2183;
  t2483 = t2309 + t2410;
  t2553 = 2.285714*t2483*t2538;
  t2674 = 2.285714*t2616*t2671;
  t2699 = t1983 + t2205 + t2553 + t2674;
  t3476 = -1.*t1411*t1299;
  t3630 = 2.285714*t2183*t2616;
  t3755 = 2.285714*t1588*t2538;
  t3762 = -1.*t462*t3133;
  t3770 = t3476 + t3762;
  t3809 = t82*t3770;
  t3866 = t3287 + t3809;
  t3867 = 2.285714*t2183*t3866;
  t3893 = 2.285714*t1588*t3262;
  t3948 = t3630 + t3755 + t3867 + t3893;
  t3518 = t462*t2260;
  t3991 = Power(t2183,2);
  t3999 = 2.285714*t3991;
  t4013 = t3518 + t3168;
  t4061 = t1540*t4013;
  t4171 = t2505 + t3762;
  t4174 = t82*t4171;
  t4178 = t4061 + t4174;
  t4184 = 2.285714*t2183*t4178;
  t4190 = 2.285714*t2538*t3262;
  t4198 = Power(t3262,2);
  t4201 = 2.285714*t4198;
  t4215 = t3999 + t4184 + t4190 + t4201;
  t3985 = -0.5*var2[6]*t3948;
  t4225 = -0.5*var2[7]*t4215;
  t4227 = -0.5*var2[8]*t4215;
  t4239 = -0.5*var2[2]*t3360;
  t4241 = t3985 + t4225 + t4227 + t4239;
  t4253 = var2[0]*t4241;
  t4391 = 2.285714*t2183*t2538;
  t4404 = 2.285714*t2183*t3262;
  t4405 = t4391 + t4404;
  t4296 = 2.285714*t1909*t2183;
  t4313 = 2.285714*t2538*t2671;
  t4324 = t4296 + t4313;
  t4257 = 2.285714*t1588*t2183;
  t4285 = 2.285714*t2616*t2538;
  t4288 = t4257 + t4285;
  t4457 = -0.5*var2[0]*t4405;
  t2817 = -1.*t1540*t1845;
  t2818 = t2817 + t2013;
  t2828 = -1.*t1540*t2533;
  t2901 = t2309 + t2828;
  t4498 = -1.*t1540*t1580;
  t4605 = -1.*t1540*t2286;
  t4773 = 1.142857*t2183*t2901;
  t4777 = 1.142857*t2818*t2538;
  t4782 = 2.285714*t1909*t2671;
  t4783 = -1.*t82*t3185;
  t4786 = -1.*t1540*t3220;
  t4792 = t4783 + t4786;
  t4799 = 1.142857*t2183*t4792;
  t4800 = 1.142857*t2818*t3262;
  t4810 = 2.285714*t1909*t3349;
  t4815 = t4773 + t4777 + t4782 + t4799 + t4800 + t4810;
  t4491 = -1.*t82*t1506;
  t3477 = t3476 + t2530;
  t3482 = t82*t3477;
  t3494 = t2003 + t3482;
  t3552 = t3518 + t1483;
  t4615 = -1.*t82*t2389;
  t3559 = t82*t3552;
  t3570 = t3559 + t2410;
  t4463 = 2.285714*t1909*t2027;
  t4490 = 1.142857*t1588*t2818;
  t4546 = t4491 + t4498;
  t4588 = 1.142857*t4546*t2183;
  t4594 = 1.142857*t2616*t2901;
  t4639 = t4605 + t4615;
  t4640 = 1.142857*t4639*t2538;
  t4650 = 2.285714*t2483*t2671;
  t4657 = t4463 + t4490 + t4588 + t4594 + t4640 + t4650;
  t5017 = 1.142857*t2183*t2483;
  t5018 = 1.142857*t1909*t2616;
  t5020 = 1.142857*t2027*t2538;
  t5021 = 1.142857*t1588*t2671;
  t5034 = t1540*t3770;
  t5035 = t4783 + t5034;
  t5040 = 1.142857*t2183*t5035;
  t5059 = 1.142857*t1909*t3866;
  t5065 = 1.142857*t2027*t3262;
  t5067 = 1.142857*t1588*t3349;
  t5076 = t5017 + t5018 + t5020 + t5021 + t5040 + t5059 + t5065 + t5067;
  t5115 = -1.*t82*t4013;
  t5122 = t1540*t4171;
  t5123 = t5115 + t5122;
  t5124 = 1.142857*t2183*t5123;
  t5131 = 1.142857*t1909*t4178;
  t5135 = 1.142857*t2671*t3262;
  t5137 = 1.142857*t2538*t3349;
  t5138 = 2.285714*t3262*t3349;
  t5140 = t4296 + t5124 + t5131 + t5135 + t5137 + t5138;
  t5092 = -0.5*var2[6]*t5076;
  t5095 = -0.5*var2[2]*t4815;
  t5143 = -0.5*var2[7]*t5140;
  t5144 = -0.5*var2[8]*t5140;
  t5158 = t5092 + t5095 + t5143 + t5144;
  t5160 = var2[0]*t5158;
  t2785 = Power(t1909,2);
  t2961 = Power(t2671,2);
  t5246 = 1.142857*t1909*t2538;
  t5249 = 1.142857*t2183*t2671;
  t5251 = 1.142857*t1909*t3262;
  t5252 = 1.142857*t2183*t3349;
  t5253 = t5246 + t5249 + t5251 + t5252;
  t5225 = 1.142857*t2785;
  t5226 = 1.142857*t2818*t2183;
  t5227 = 1.142857*t2901*t2538;
  t5233 = 1.142857*t2961;
  t5237 = t5225 + t5226 + t5227 + t5233;
  t5162 = 1.142857*t1588*t1909;
  t5166 = 1.142857*t2027*t2183;
  t5175 = 1.142857*t2483*t2538;
  t5176 = 1.142857*t2616*t2671;
  t5201 = t5162 + t5166 + t5175 + t5176;
  t5265 = -0.5*var2[0]*t5253;
  t5277 = -1.*t748;
  t5281 = 1. + t5277;
  t5285 = -1.3127*t5281;
  t5291 = -1.3127*t748;
  t5320 = -0.06*t1230;
  t5328 = t5285 + t5291 + t5320;
  t5270 = -1.*t1132;
  t5274 = 1. + t5270;
  t5275 = -0.9063*t5274;
  t5276 = -0.06*t748*t961;
  t5329 = t1132*t5328;
  t5331 = t5275 + t5276 + t5329;
  t5335 = 0.06*t1132*t748;
  t5338 = 0.9063*t961;
  t5340 = t961*t5328;
  t5344 = t5335 + t5338 + t5340;
  t5402 = -1.*t1411;
  t5406 = 1. + t5402;
  t5407 = -0.4999*t5406;
  t5409 = t1411*t5331;
  t5420 = -1.*t462*t5344;
  t5432 = t5407 + t5409 + t5420;
  t5267 = 0.4999*t462;
  t5333 = t462*t5331;
  t5364 = t1411*t5344;
  t5367 = t5267 + t5333 + t5364;
  t5385 = -1.*t5367*t1845;
  t5434 = -1.*t5432*t1580;
  t5435 = t5385 + t5434;
  t5444 = t5432*t2286;
  t5448 = t5367*t2533;
  t5452 = t5444 + t5448;
  t5489 = -0.4999*t462;
  t5491 = -1.*t462*t5331;
  t5495 = -1.*t1411*t5344;
  t5496 = t5489 + t5491 + t5495;
  t5469 = 0.4999*t1411;
  t5472 = t5469 + t5409 + t5420;
  t5565 = 0.9063*t1132;
  t5566 = t5565 + t5276 + t5329;
  t5570 = -0.06*t1132*t748;
  t5571 = -0.9063*t961;
  t5578 = -1.*t961*t5328;
  t5580 = t5570 + t5571 + t5578;
  t5596 = t1411*t5566;
  t5607 = t462*t5580;
  t5609 = t5596 + t5607;
  t5567 = -1.*t462*t5566;
  t5581 = t1411*t5580;
  t5584 = t5567 + t5581;
  t5556 = 1.142857*t1909*t5435;
  t5560 = t5367*t1845;
  t5591 = t5432*t1580;
  t5659 = -0.06*t1132*t1230;
  t5661 = t5276 + t5659;
  t5669 = 0.06*t961*t1230;
  t5672 = t5570 + t5669;
  t5633 = 1.142857*t5452*t3349;
  t5668 = -1.*t462*t5661;
  t5673 = t1411*t5672;
  t5674 = t5668 + t5673;
  t5677 = t1411*t5661;
  t5681 = t462*t5672;
  t5682 = t5677 + t5681;
  t5640 = -1.*t5432*t3185;
  t5641 = -1.*t5367*t3220;
  t5468 = -1.*t5432*t1506;
  t5487 = -1.*t5472*t1845;
  t5498 = -1.*t5496*t1580;
  t5504 = -1.*t5367*t1580;
  t5516 = t5468 + t5487 + t5498 + t5504;
  t5709 = -0.4999*t1411;
  t5710 = -1.*t1411*t5331;
  t5712 = t462*t5344;
  t5713 = t5709 + t5710 + t5712;
  t5525 = t5496*t2286;
  t5532 = t5367*t2286;
  t5535 = t5432*t2389;
  t5539 = t5472*t2533;
  t5544 = t5525 + t5532 + t5535 + t5539;
  t5465 = 1.142857*t5435*t2483;
  t5518 = 1.142857*t5516*t2671;
  t5522 = 1.142857*t2027*t5452;
  t5545 = 1.142857*t1909*t5544;
  t5547 = t5465 + t5518 + t5522 + t5545;
  t5589 = t5584*t2286;
  t5610 = t5609*t2533;
  t5615 = t5560 + t5589 + t5591 + t5610;
  t5638 = -1.*t5609*t1845;
  t5639 = -1.*t5584*t1580;
  t5645 = t5638 + t5639 + t5640 + t5641;
  t5833 = -1.*t1411*t5566;
  t5837 = -1.*t462*t5580;
  t5838 = t5833 + t5837;
  t5820 = 1.142857*t2183*t5516;
  t5821 = 1.142857*t1588*t5435;
  t5823 = t5432*t1506;
  t5827 = t5472*t1845;
  t5847 = t5496*t1580;
  t5851 = t5367*t1580;
  t5676 = t2286*t5674;
  t5683 = t2533*t5682;
  t5687 = t5560 + t5591 + t5676 + t5683;
  t5874 = 1.142857*t5452*t3866;
  t5886 = 1.142857*t5544*t3262;
  t5691 = -1.*t1580*t5674;
  t5694 = -1.*t1845*t5682;
  t5696 = t5691 + t5694 + t5640 + t5641;
  t5968 = -1.*t1411*t5661;
  t5975 = -1.*t462*t5672;
  t5979 = t5968 + t5975;
  t5930 = -1.*t5496*t3185;
  t5932 = -1.*t5367*t3185;
  t5935 = -1.*t5432*t3770;
  t5952 = -1.*t5472*t3220;
  t5616 = 1.142857*t1909*t5615;
  t5646 = 1.142857*t2671*t5645;
  t5648 = t5556 + t5616 + t5633 + t5646;
  t6118 = -0.9063*t1132;
  t6119 = 0.06*t748*t961;
  t6126 = -1.*t1132*t5328;
  t6128 = t6118 + t6119 + t6126;
  t6151 = t1411*t6128;
  t6153 = t6151 + t5837;
  t6129 = t462*t6128;
  t6132 = t6129 + t5581;
  t5840 = t5838*t2286;
  t5841 = t5609*t2286;
  t5859 = t5584*t2389;
  t5860 = t5584*t2533;
  t5861 = t5823 + t5827 + t5840 + t5841 + t5847 + t5851 + t5859 + t5860;
  t5865 = 1.142857*t2183*t5861;
  t5870 = 1.142857*t1588*t5615;
  t5887 = 1.142857*t2616*t5645;
  t5896 = -1.*t5584*t1506;
  t5914 = -1.*t5584*t1845;
  t5921 = -1.*t5838*t1580;
  t5928 = -1.*t5609*t1580;
  t5956 = t5896 + t5914 + t5921 + t5928 + t5930 + t5932 + t5935 + t5952;
  t5957 = 1.142857*t2538*t5956;
  t5961 = t5820 + t5821 + t5865 + t5870 + t5874 + t5886 + t5887 + t5957;
  t6090 = 1.142857*t5452*t4178;
  t6099 = 1.142857*t5435*t3262;
  t6354 = 0.06*t1132*t1230;
  t6355 = t6119 + t6354;
  t6279 = t5432*t3185;
  t6280 = t5367*t3220;
  t6367 = t462*t6355;
  t6379 = t6367 + t5673;
  t6391 = t1411*t6355;
  t6392 = t6391 + t5975;
  t6185 = -1.*t5367*t4013;
  t6193 = -1.*t5432*t4171;
  t6481 = -0.06*t748;
  t6482 = 0. + t6481;
  t6485 = t6482*t961;
  t6491 = t6485 + t5659;
  t6500 = t1132*t6482;
  t6502 = t6500 + t5669;
  t6499 = -1.*t462*t6491;
  t6507 = t1411*t6502;
  t6509 = t6499 + t6507;
  t6514 = t1411*t6491;
  t6528 = t462*t6502;
  t6532 = t6514 + t6528;
  t6512 = t2286*t6509;
  t6539 = t2533*t6532;
  t6541 = t5560 + t5591 + t6512 + t6539;
  t6567 = -1.*t1580*t6509;
  t6590 = -1.*t1845*t6532;
  t6596 = t6567 + t6590 + t5640 + t5641;
  t6613 = -1.*t1411*t6491;
  t6615 = -1.*t462*t6502;
  t6618 = t6613 + t6615;
  t6309 = 1.142857*t5615*t3262;
  t6319 = 1.142857*t2183*t5645;
  t6333 = t5609*t1845;
  t6334 = t5584*t1580;
  t6744 = -1.*t6482*t961;
  t6746 = t6744 + t6354;
  t6747 = t462*t6746;
  t6749 = t6747 + t6507;
  t6758 = t1411*t6746;
  t6767 = t6758 + t6615;
  t6436 = -1.*t5584*t3185;
  t6444 = -1.*t5609*t3220;
  t6724 = 1.142857*t6541*t3262;
  t6311 = 1.142857*t5687*t3262;
  t6736 = 1.142857*t2183*t6596;
  t6330 = 1.142857*t2183*t5696;
  t6740 = t1580*t6509;
  t6776 = t1845*t6532;
  t6336 = t1580*t5674;
  t6385 = t2533*t6379;
  t6399 = t2286*t6392;
  t6405 = t1845*t5682;
  t6423 = -1.*t1845*t6379;
  t6432 = -1.*t1580*t6392;
  t6808 = -1.*t6509*t3185;
  t6439 = -1.*t5674*t3185;
  t6809 = -1.*t6532*t3220;
  t6448 = -1.*t5682*t3220;
  t6942 = 1.142857*t2183*t5435;
  t6949 = 1.142857*t5452*t3262;
  t6891 = 1.142857*t5435*t2671;
  t6893 = 1.142857*t1909*t5452;
  t6901 = t6891 + t6893;
  t6907 = 1.142857*t5435*t2616;
  t6908 = 1.142857*t5516*t2538;
  t6922 = 1.142857*t1588*t5452;
  t6924 = 1.142857*t2183*t5544;
  t6938 = t6907 + t6908 + t6922 + t6924;
  t6943 = 1.142857*t2183*t5615;
  t6957 = 1.142857*t2538*t5645;
  t6959 = t6942 + t6943 + t6949 + t6957;
  t6965 = 1.142857*t2183*t5687;
  t6975 = 1.142857*t2538*t5696;
  t6977 = t6942 + t6965 + t6949 + t6975;
  t7012 = t5344*t2260;
  t7018 = 0.4999*t1472;
  t7020 = t5331*t1472;
  t7029 = t7012 + t7018 + t7020;
  t7037 = -1.*t5331*t1299;
  t7043 = 0.4999*t2260;
  t7053 = -1.*t5344*t1472;
  t7054 = t7037 + t7043 + t7053;
  t7098 = 1.142857*t7054*t1909;
  t7101 = 0.4999*t1299;
  t7102 = t5331*t1299;
  t7109 = t5344*t1472;
  t7123 = -1.*t5344*t1299;
  t7130 = -1.*t5331*t3133;
  t7139 = 1.142857*t7029*t3349;
  t7033 = 1.142857*t7029*t2027;
  t7088 = 1.142857*t7054*t2483;
  t7090 = t7033 + t7088;
  t7104 = t5566*t2260;
  t7107 = t5580*t1472;
  t7110 = t7101 + t7102 + t7104 + t7107 + t7109;
  t7114 = -1.*t5580*t1299;
  t7125 = -1.*t5566*t1472;
  t7132 = t7114 + t7123 + t7018 + t7125 + t7130;
  t7203 = 1.142857*t7054*t1588;
  t7157 = t5661*t2260;
  t7160 = t1472*t5672;
  t7163 = t7101 + t7102 + t7157 + t7109 + t7160;
  t7169 = -1.*t5661*t1472;
  t7176 = -1.*t1299*t5672;
  t7179 = t7123 + t7018 + t7169 + t7176 + t7130;
  t7209 = 1.142857*t7029*t3866;
  t7204 = 1.142857*t7110*t1588;
  t7206 = 1.142857*t7132*t2616;
  t7212 = t7203 + t7204 + t7206 + t7209;
  t7263 = t5344*t1299;
  t7281 = 0.4999*t3133;
  t7289 = t5331*t3133;
  t7307 = -1.*t5331*t2260;
  t7316 = -1.*t5344*t3133;
  t7328 = 1.142857*t7029*t4178;
  t7331 = 1.142857*t7054*t3262;
  t7111 = 1.142857*t7110*t1909;
  t7134 = 1.142857*t7132*t2671;
  t7141 = t7098 + t7111 + t7134 + t7139;
  t7343 = 1.142857*t7132*t2183;
  t7438 = -1.*t6491*t1472;
  t7439 = -1.*t1299*t6502;
  t7442 = t7123 + t7018 + t7438 + t7439 + t7130;
  t7362 = t5580*t1299;
  t7363 = t5566*t1472;
  t7376 = -1.*t5566*t1299;
  t7395 = -1.*t5580*t3133;
  t7413 = 1.142857*t7110*t3262;
  t7429 = t6491*t2260;
  t7431 = t1472*t6502;
  t7433 = t7101 + t7102 + t7429 + t7109 + t7431;
  t7453 = 1.142857*t7442*t2183;
  t7350 = 1.142857*t7179*t2183;
  t7459 = t6491*t1472;
  t7368 = t5661*t1472;
  t7369 = t6355*t1472;
  t7471 = t1299*t6502;
  t7370 = t1299*t5672;
  t7371 = t2260*t5672;
  t7487 = -1.*t1299*t6491;
  t7377 = -1.*t1299*t5661;
  t7385 = -1.*t1299*t6355;
  t7386 = -1.*t1472*t5672;
  t7504 = -1.*t6502*t3133;
  t7396 = -1.*t5672*t3133;
  t7512 = 1.142857*t7433*t3262;
  t7418 = 1.142857*t7163*t3262;
  t7626 = 1.142857*t7054*t2183;
  t7638 = 1.142857*t7029*t3262;
  t7601 = 1.142857*t7029*t1909;
  t7602 = 1.142857*t7054*t2671;
  t7605 = t7601 + t7602;
  t7578 = 1.142857*t7029*t1588;
  t7582 = 1.142857*t7054*t2616;
  t7594 = t7578 + t7582;
  t7629 = 1.142857*t7110*t2183;
  t7632 = 1.142857*t7132*t2538;
  t7643 = t7626 + t7629 + t7632 + t7638;
  t7645 = 1.142857*t7163*t2183;
  t7647 = 1.142857*t7179*t2538;
  t7649 = t7626 + t7645 + t7647 + t7638;
  t7683 = 0.9063*t748;
  t7685 = t748*t5328;
  t7687 = 0.06*t748*t1230;
  t7690 = t7683 + t7685 + t7687;
  t7692 = Power(t748,2);
  t7696 = -0.06*t7692;
  t7697 = 0.9063*t1230;
  t7701 = t5328*t1230;
  t7708 = t7696 + t7697 + t7701;
  t7720 = 1.142857*t7708*t1909;
  t7721 = 1.142857*t7690*t3349;
  t7691 = 1.142857*t7690*t2027;
  t7709 = 1.142857*t7708*t2483;
  t7710 = t7691 + t7709;
  t7770 = 1.142857*t7708*t1588;
  t7729 = -0.9063*t1230;
  t7730 = -1.*t5328*t1230;
  t7731 = Power(t1230,2);
  t7732 = -0.06*t7731;
  t7733 = 0. + t7729 + t7730 + t7732;
  t7771 = 1.142857*t7690*t3866;
  t7772 = t7770 + t7771;
  t7808 = 1.142857*t7690*t4178;
  t7809 = 1.142857*t7708*t3262;
  t7722 = t7720 + t7721;
  t7864 = t6482*t1230;
  t7868 = 0.12*t748*t1230;
  t7869 = t7683 + t7685 + t7864 + t7868;
  t7847 = t6482*t748;
  t7853 = 0.06*t7692;
  t7861 = t7847 + t7853 + t7729 + t7730 + t7732;
  t7817 = 1.142857*t7690*t2183;
  t7883 = 1.142857*t7869*t2183;
  t7823 = 1.142857*t7733*t3262;
  t7886 = 1.142857*t7861*t3262;
  t8000 = 1.142857*t7708*t2183;
  t8004 = 1.142857*t7690*t3262;
  t7985 = 1.142857*t7690*t1909;
  t7986 = 1.142857*t7708*t2671;
  t7992 = t7985 + t7986;
  t7974 = 1.142857*t7690*t1588;
  t7977 = 1.142857*t7708*t2616;
  t7978 = t7974 + t7977;
  t8005 = t8000 + t8004;
  t8007 = 1.142857*t7733*t2183;
  t8008 = 1.142857*t7690*t2538;
  t8015 = t8000 + t8007 + t8008 + t8004;
  t8114 = 0.03428571*var2[6]*t1588;
  t8124 = 0.03428571*var2[2]*t1909;
  t8129 = 0.03428571*var2[7]*t3262;
  t8130 = 0.03428571*var2[8]*t3262;
  t8132 = t8114 + t8124 + t8129 + t8130;
  t8143 = var2[0]*t8132;
  t8181 = 0.03428571*var2[0]*t2183;
  p_output1[0]=var2[0]*(-0.5*(2.285714*t2785 + 2.285714*t2183*t2818 + 2.285714*t2538*t2901 + 2.285714*t2961)*var2[2] - 0.5*t2699*var2[6] - 0.5*t3360*var2[7] - 0.5*t3360*var2[8]);
  p_output1[1]=var2[0]*(-0.5*t2699*var2[2] - 0.5*(2.285714*Power(t1588,2) + 2.285714*Power(t2616,2) + 2.285714*t2183*t3494 + 2.285714*t2538*t3570)*var2[6] - 0.5*t3948*var2[7] - 0.5*t3948*var2[8]);
  p_output1[2]=t4253;
  p_output1[3]=t4253;
  p_output1[4]=-0.5*t4324*var2[2] - 0.5*t4288*var2[6] - 0.5*t4405*var2[7] - 0.5*t4405*var2[8];
  p_output1[5]=-0.5*t4324*var2[0];
  p_output1[6]=-0.5*t4288*var2[0];
  p_output1[7]=t4457;
  p_output1[8]=t4457;
  p_output1[9]=var2[0]*(-0.5*(3.428571*t1909*t2818 + 3.428571*t2671*t2901 + 1.142857*t2183*(t4498 + t1845*t82) + 1.142857*t2538*(t4605 + t2533*t82))*var2[2] - 0.5*t4657*var2[6] - 0.5*t4815*var2[7] - 0.5*t4815*var2[8]);
  p_output1[10]=var2[0]*(-0.5*t4657*var2[2] - 0.5*(2.285714*t1588*t2027 + 2.285714*t2483*t2616 + 1.142857*t1909*t3494 + 1.142857*t2671*t3570 + 1.142857*t2183*(t1540*t3477 + t4491) + 1.142857*t2538*(t1540*t3552 + t4615))*var2[6] - 0.5*t5076*var2[7] - 0.5*t5076*var2[8]);
  p_output1[11]=t5160;
  p_output1[12]=t5160;
  p_output1[13]=-0.5*t5237*var2[2] - 0.5*t5201*var2[6] - 0.5*t5253*var2[7] - 0.5*t5253*var2[8];
  p_output1[14]=-0.5*t5237*var2[0];
  p_output1[15]=-0.5*t5201*var2[0];
  p_output1[16]=t5265;
  p_output1[17]=t5265;
  p_output1[18]=var2[0]*(-0.5*(1.142857*t2901*t5435 + 1.142857*t2818*t5452)*var2[2] - 0.5*t5547*var2[6] - 0.5*t5648*var2[7] - 0.5*(t5556 + t5633 + 1.142857*t1909*t5687 + 1.142857*t2671*t5696)*var2[8]);
  p_output1[19]=var2[0]*(-0.5*t5547*var2[2] - 0.5*(1.142857*t3570*t5435 + 1.142857*t3494*t5452 + 2.285714*t2616*t5516 + 2.285714*t1588*t5544 + 1.142857*t2538*(-1.*t1506*t5367 - 1.*t3477*t5432 - 2.*t1580*t5472 - 2.*t1506*t5496 - 1.*t1845*t5496 - 1.*t1580*t5713) + 1.142857*t2183*(t2389*t5367 + t3552*t5432 + 2.*t2286*t5472 + 2.*t2389*t5496 + t2533*t5496 + t2286*t5713))*var2[6] - 0.5*t5961*var2[7] - 0.5*(1.142857*t1588*t5687 + 1.142857*t2616*t5696 + t5820 + t5821 + t5874 + t5886 + 1.142857*t2538*(-1.*t1506*t5674 - 1.*t1845*t5674 - 1.*t1580*t5682 + t5930 + t5932 + t5935 + t5952 - 1.*t1580*t5979) + 1.142857*t2183*(t2389*t5674 + t2533*t5674 + t2286*t5682 + t5823 + t5827 + t5847 + t5851 + t2286*t5979))*var2[8]);
  p_output1[20]=var2[0]*(-0.5*t5648*var2[2] - 0.5*t5961*var2[6] - 0.5*(2.285714*t3262*t5615 + 2.285714*t2183*t5645 + t6090 + t6099 + 1.142857*t2538*(-2.*t3185*t5584 - 2.*t3220*t5609 - 1.*t1845*t6132 - 1.*t1580*t6153 + t6185 + t6193) + 1.142857*t2183*(2.*t1580*t5584 + 2.*t1845*t5609 + t2533*t6132 + t2286*t6153 + t6279 + t6280))*var2[7] - 0.5*(t6090 + t6099 + t6309 + t6311 + t6319 + t6330 + 1.142857*t2183*(t6279 + t6280 + t6333 + t6334 + t6336 + t6385 + t6399 + t6405) + 1.142857*t2538*(t6185 + t6193 + t6423 + t6432 + t6436 + t6439 + t6444 + t6448))*var2[8]);
  p_output1[21]=var2[0]*(-0.5*(t5556 + t5633 + 1.142857*t1909*t6541 + 1.142857*t2671*t6596)*var2[2] - 0.5*(t5820 + t5821 + t5874 + t5886 + 1.142857*t1588*t6541 + 1.142857*t2616*t6596 + 1.142857*t2538*(t5930 + t5932 + t5935 + t5952 - 1.*t1506*t6509 - 1.*t1845*t6509 - 1.*t1580*t6532 - 1.*t1580*t6618) + 1.142857*t2183*(t5823 + t5827 + t5847 + t5851 + t2389*t6509 + t2533*t6509 + t2286*t6532 + t2286*t6618))*var2[6] - 0.5*(t6090 + t6099 + t6309 + t6319 + t6724 + t6736 + 1.142857*t2183*(t6279 + t6280 + t6333 + t6334 + t6740 + t2533*t6749 + t2286*t6767 + t6776) + 1.142857*t2538*(t6185 + t6193 + t6436 + t6444 - 1.*t1845*t6749 - 1.*t1580*t6767 + t6808 + t6809))*var2[7] - 0.5*(t6090 + t6099 + t6311 + t6330 + t6724 + t6736 + 1.142857*t2183*(t6279 + t6280 + t6336 + t6385 + t6399 + t6405 + t6740 + t6776) + 1.142857*t2538*(t6185 + t6193 + t6423 + t6432 + t6439 + t6448 + t6808 + t6809))*var2[8]);
  p_output1[22]=-0.5*t6901*var2[2] - 0.5*t6938*var2[6] - 0.5*t6959*var2[7] - 0.5*t6977*var2[8];
  p_output1[23]=-0.5*t6901*var2[0];
  p_output1[24]=-0.5*t6938*var2[0];
  p_output1[25]=-0.5*t6959*var2[0];
  p_output1[26]=-0.5*t6977*var2[0];
  p_output1[27]=var2[0]*(-0.5*(1.142857*t2818*t7029 + 1.142857*t2901*t7054)*var2[2] - 0.5*t7090*var2[6] - 0.5*t7141*var2[7] - 0.5*(t7098 + t7139 + 1.142857*t1909*t7163 + 1.142857*t2671*t7179)*var2[8]);
  p_output1[28]=var2[0]*(-0.5*t7090*var2[2] - 0.5*(1.142857*t3494*t7029 + 1.142857*t3570*t7054)*var2[6] - 0.5*t7212*var2[7] - 0.5*(1.142857*t1588*t7163 + 1.142857*t2616*t7179 + t7203 + t7209)*var2[8]);
  p_output1[29]=var2[0]*(-0.5*t7141*var2[2] - 0.5*t7212*var2[6] - 0.5*(2.285714*t3262*t7110 + 2.285714*t2183*t7132 + 1.142857*t2183*(2.*t1472*t5566 + 2.*t1299*t5580 + t2260*t5580 + t1472*t6128 + t7263 + t7281 + t7289) + 1.142857*t2538*(-2.*t1299*t5566 - 1.*t1472*t5580 - 2.*t3133*t5580 - 1.*t1299*t6128 + t7101 + t7307 + t7316) + t7328 + t7331)*var2[7] - 0.5*(t7328 + t7331 + t7343 + t7350 + 1.142857*t2183*(t7263 + t7281 + t7289 + t7362 + t7363 + t7368 + t7369 + t7370 + t7371) + 1.142857*t2538*(t7101 + t7307 + t7316 + t7376 + t7377 + t7385 + t7386 + t7395 + t7396) + t7413 + t7418)*var2[8]);
  p_output1[30]=var2[0]*(-0.5*(t7098 + t7139 + 1.142857*t1909*t7433 + 1.142857*t2671*t7442)*var2[2] - 0.5*(t7203 + t7209 + 1.142857*t1588*t7433 + 1.142857*t2616*t7442)*var2[6] - 0.5*(t7328 + t7331 + t7343 + t7413 + t7453 + 1.142857*t2183*(t2260*t6502 + t1472*t6746 + t7263 + t7281 + t7289 + t7362 + t7363 + t7459 + t7471) + 1.142857*t2538*(-1.*t1472*t6502 - 1.*t1299*t6746 + t7101 + t7307 + t7316 + t7376 + t7395 + t7487 + t7504) + t7512)*var2[7] - 0.5*(t7328 + t7331 + t7350 + t7418 + t7453 + 1.142857*t2183*(t7263 + t7281 + t7289 + t7368 + t7369 + t7370 + t7371 + t7459 + t7471) + 1.142857*t2538*(t7101 + t7307 + t7316 + t7377 + t7385 + t7386 + t7396 + t7487 + t7504) + t7512)*var2[8]);
  p_output1[31]=-0.5*t7605*var2[2] - 0.5*t7594*var2[6] - 0.5*t7643*var2[7] - 0.5*t7649*var2[8];
  p_output1[32]=-0.5*t7605*var2[0];
  p_output1[33]=-0.5*t7594*var2[0];
  p_output1[34]=-0.5*t7643*var2[0];
  p_output1[35]=-0.5*t7649*var2[0];
  p_output1[36]=var2[0]*(-0.5*(1.142857*t2818*t7690 + 1.142857*t2901*t7708)*var2[2] - 0.5*t7710*var2[6] - 0.5*t7722*var2[7] - 0.5*(1.142857*t2671*t7690 + t7720 + t7721 + 1.142857*t1909*t7733)*var2[8]);
  p_output1[37]=var2[0]*(-0.5*t7710*var2[2] - 0.5*(1.142857*t3494*t7690 + 1.142857*t3570*t7708)*var2[6] - 0.5*t7772*var2[7] - 0.5*(1.142857*t2616*t7690 + 1.142857*t1588*t7733 + t7770 + t7771)*var2[8]);
  p_output1[38]=var2[0]*(-0.5*t7722*var2[2] - 0.5*t7772*var2[6] - 0.5*(t7808 + t7809)*var2[7] - 0.5*(t7808 + t7809 + t7817 + t7823)*var2[8]);
  p_output1[39]=var2[0]*(-0.5*(t7720 + t7721 + 1.142857*t1909*t7861 + 1.142857*t2671*t7869)*var2[2] - 0.5*(t7770 + t7771 + 1.142857*t1588*t7861 + 1.142857*t2616*t7869)*var2[6] - 0.5*(t7808 + t7809 + t7883 + t7886)*var2[7] - 0.5*(1.142857*t2183*(-1.*t1230*t6482 - 0.9063*t748 - 0.12*t1230*t748 - 1.*t5328*t748) + t7808 + t7809 + t7817 + t7823 + 1.142857*t2538*t7861 + t7883 + t7886)*var2[8]);
  p_output1[40]=-0.5*t7992*var2[2] - 0.5*t7978*var2[6] - 0.5*t8005*var2[7] - 0.5*t8015*var2[8];
  p_output1[41]=-0.5*t7992*var2[0];
  p_output1[42]=-0.5*t7978*var2[0];
  p_output1[43]=-0.5*t8005*var2[0];
  p_output1[44]=-0.5*t8015*var2[0];
  p_output1[45]=var2[0]*(0.03428571*t2901*var2[2] + 0.03428571*t2483*var2[6] + 0.03428571*t1909*var2[7] + 0.03428571*t1909*var2[8]);
  p_output1[46]=var2[0]*(0.03428571*t2483*var2[2] + 0.03428571*t3570*var2[6] + 0.03428571*t1588*var2[7] + 0.03428571*t1588*var2[8]);
  p_output1[47]=t8143;
  p_output1[48]=t8143;
  p_output1[49]=0.03428571*t2671*var2[2] + 0.03428571*t2616*var2[6] + 0.03428571*t2183*var2[7] + 0.03428571*t2183*var2[8];
  p_output1[50]=0.03428571*t2671*var2[0];
  p_output1[51]=0.03428571*t2616*var2[0];
  p_output1[52]=t8181;
  p_output1[53]=t8181;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 9 && ncols == 1) && 
      !(mrows == 1 && ncols == 9))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 9 && ncols == 1) && 
      !(mrows == 1 && ncols == 9))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 54, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_Ce1_vec_L7_J1_amber3_feet.hh"

namespace RightSS1
{

void J_Ce1_vec_L7_J1_amber3_feet_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
