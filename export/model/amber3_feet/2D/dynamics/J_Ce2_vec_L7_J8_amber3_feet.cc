/*
 * Automatically Generated from Mathematica.
 * Wed 1 Mar 2023 13:27:32 GMT-08:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t142;
  double t115;
  double t119;
  double t244;
  double t376;
  double t131;
  double t263;
  double t265;
  double t53;
  double t394;
  double t433;
  double t452;
  double t44;
  double t304;
  double t498;
  double t502;
  double t561;
  double t623;
  double t637;
  double t650;
  double t664;
  double t698;
  double t722;
  double t831;
  double t832;
  double t847;
  double t848;
  double t871;
  double t931;
  double t1093;
  double t1104;
  double t1109;
  double t1421;
  double t1423;
  double t1428;
  double t1445;
  double t1449;
  double t1461;
  double t1482;
  double t1484;
  double t1489;
  double t1494;
  double t1496;
  double t1501;
  double t1520;
  double t1682;
  double t1696;
  double t1710;
  double t1724;
  double t1613;
  double t1627;
  double t1831;
  double t1086;
  double t1111;
  double t1121;
  double t1188;
  double t1190;
  double t1196;
  double t1197;
  double t1318;
  double t1923;
  double t1957;
  double t2020;
  double t2057;
  double t2065;
  double t1962;
  double t2066;
  double t2073;
  double t2180;
  double t2182;
  double t2193;
  double t2232;
  double t2233;
  double t2234;
  double t2303;
  double t2307;
  double t2309;
  double t2394;
  double t2415;
  double t2418;
  double t2581;
  double t2582;
  double t2584;
  double t2590;
  double t2602;
  double t2603;
  double t2630;
  double t2634;
  double t2641;
  double t2675;
  double t2896;
  double t2902;
  double t2989;
  double t2787;
  double t2822;
  double t2824;
  double t782;
  double t788;
  double t818;
  double t971;
  double t985;
  double t3212;
  double t3215;
  double t3232;
  double t3245;
  double t1019;
  double t1024;
  double t1073;
  double t1082;
  double t1471;
  double t1493;
  double t1544;
  double t1549;
  double t1557;
  double t1590;
  double t1657;
  double t1767;
  double t1777;
  double t1780;
  double t1807;
  double t1823;
  double t1842;
  double t1843;
  double t1895;
  double t2100;
  double t2105;
  double t2120;
  double t3301;
  double t3330;
  double t3358;
  double t3371;
  double t3416;
  double t3517;
  double t3527;
  double t3530;
  double t3547;
  double t2199;
  double t2343;
  double t3769;
  double t3775;
  double t2591;
  double t2686;
  double t2697;
  double t3877;
  double t3891;
  double t3988;
  double t3992;
  double t4025;
  double t4026;
  double t2753;
  double t2852;
  double t2879;
  double t2993;
  double t3009;
  double t3032;
  double t3033;
  double t3048;
  double t3058;
  double t3061;
  double t3081;
  double t3082;
  double t3107;
  double t4128;
  double t4145;
  double t4168;
  double t4754;
  double t4766;
  double t4767;
  double t4812;
  double t4564;
  double t4566;
  double t4577;
  double t4583;
  double t4595;
  double t4607;
  double t5366;
  double t5388;
  double t5339;
  double t5341;
  double t4548;
  double t4613;
  double t4649;
  double t5575;
  double t5608;
  double t4698;
  double t5777;
  double t5807;
  double t5816;
  double t5823;
  double t5828;
  double t5833;
  double t4840;
  double t4843;
  double t5862;
  double t5878;
  double t5883;
  double t4918;
  double t4967;
  double t4998;
  double t5010;
  double t5053;
  double t5063;
  double t5068;
  double t5079;
  double t5092;
  double t5115;
  double t5116;
  double t5117;
  double t5155;
  double t5177;
  double t5179;
  double t5211;
  double t5213;
  double t5215;
  double t5217;
  double t5228;
  double t5248;
  double t5266;
  double t5301;
  double t5306;
  double t5314;
  double t6040;
  double t6048;
  double t6049;
  double t6058;
  double t6059;
  double t6067;
  double t5493;
  double t5494;
  double t6177;
  double t6178;
  double t6186;
  double t6188;
  double t6206;
  double t5414;
  double t5439;
  double t6380;
  double t6383;
  double t6385;
  double t6395;
  double t6397;
  double t6316;
  double t6321;
  double t6322;
  double t6333;
  double t6337;
  double t6341;
  double t6343;
  double t6347;
  double t6359;
  double t6362;
  double t6365;
  double t6371;
  double t6373;
  double t2364;
  double t2382;
  double t2203;
  double t2221;
  double t2226;
  double t2316;
  double t2318;
  double t2386;
  double t2423;
  double t2436;
  double t2489;
  double t3798;
  double t3807;
  double t3708;
  double t3722;
  double t3744;
  double t3752;
  double t3789;
  double t3794;
  double t3811;
  double t3815;
  double t3817;
  double t3822;
  double t3829;
  double t3857;
  double t3982;
  double t4030;
  double t4045;
  double t4054;
  double t4105;
  double t4121;
  double t4179;
  double t4188;
  double t4209;
  double t4229;
  double t4233;
  double t4236;
  double t4238;
  double t4290;
  double t4309;
  double t4325;
  double t4341;
  double t4348;
  double t4366;
  double t4373;
  double t4410;
  double t4411;
  double t4417;
  double t4421;
  double t4441;
  double t4451;
  double t4456;
  double t4671;
  double t4735;
  double t4814;
  double t4833;
  double t4848;
  double t4911;
  double t4914;
  double t4934;
  double t4941;
  double t4986;
  double t5345;
  double t5403;
  double t5411;
  double t5441;
  double t5451;
  double t5475;
  double t5476;
  double t5478;
  double t5489;
  double t5506;
  double t6633;
  double t5619;
  double t5636;
  double t5642;
  double t6635;
  double t6636;
  double t5664;
  double t5666;
  double t5668;
  double t5679;
  double t5698;
  double t5699;
  double t5723;
  double t5821;
  double t5835;
  double t5839;
  double t5847;
  double t5848;
  double t5850;
  double t5889;
  double t5900;
  double t5909;
  double t5912;
  double t5920;
  double t5936;
  double t5940;
  double t5945;
  double t5954;
  double t5955;
  double t5969;
  double t6650;
  double t6656;
  double t5984;
  double t5993;
  double t5998;
  double t6666;
  double t6673;
  double t6674;
  double t6678;
  double t6684;
  double t6686;
  double t6687;
  double t6691;
  double t6692;
  double t6693;
  double t6697;
  double t6055;
  double t6077;
  double t6082;
  double t6137;
  double t6147;
  double t6154;
  double t6159;
  double t6161;
  double t6165;
  double t6181;
  double t6208;
  double t6213;
  double t6221;
  double t6238;
  double t6245;
  double t6276;
  double t6280;
  double t6282;
  double t6288;
  double t6292;
  double t6358;
  double t2707;
  double t3024;
  double t3051;
  double t3122;
  double t3131;
  double t1551;
  double t1798;
  double t2075;
  double t2144;
  double t2146;
  double t763;
  double t991;
  double t1348;
  double t1377;
  double t2149;
  double t6800;
  double t3136;
  double t6513;
  double t6514;
  double t6516;
  double t6521;
  double t6522;
  double t4083;
  double t4092;
  double t4244;
  double t4261;
  double t4265;
  double t4349;
  double t4355;
  double t4459;
  double t4503;
  double t6599;
  double t6601;
  double t6603;
  double t6605;
  double t6608;
  double t6612;
  double t6614;
  double t6617;
  double t6622;
  double t6700;
  double t6704;
  double t6711;
  double t6712;
  double t6713;
  double t5336;
  double t5465;
  double t5473;
  double t5509;
  double t5510;
  double t6015;
  double t6112;
  double t6129;
  double t6157;
  double t6223;
  double t6300;
  double t6301;
  double t6762;
  double t6764;
  double t6770;
  double t6775;
  double t6777;
  double t6782;
  double t6783;
  double t6378;
  double t6807;
  double t7044;
  double t7045;
  double t7049;
  double t7050;
  double t7051;
  double t7035;
  double t7039;
  double t7040;
  double t6464;
  double t6465;
  double t6467;
  double t6468;
  double t6476;
  double t6552;
  double t6554;
  double t6555;
  double t6557;
  double t6559;
  double t3493;
  double t3504;
  double t3550;
  double t3554;
  double t3569;
  double t6852;
  double t6853;
  double t6859;
  double t6861;
  double t6863;
  double t4667;
  double t4906;
  double t4990;
  double t5019;
  double t5033;
  double t6640;
  double t6647;
  double t6649;
  double t6657;
  double t6664;
  double t6925;
  double t6931;
  double t6933;
  double t6934;
  double t6937;
  double t6940;
  double t6942;
  double t5765;
  double t5845;
  double t5914;
  double t5974;
  double t5983;
  double t6001;
  double t6005;
  double t6728;
  double t6732;
  double t6733;
  double t6735;
  double t6743;
  double t6747;
  double t6755;
  double t6997;
  double t6999;
  double t7001;
  double t7002;
  double t7003;
  double t7004;
  double t7006;
  double t7007;
  double t7008;
  double t6401;
  double t6810;
  double t7052;
  double t7186;
  double t7187;
  double t7188;
  double t6446;
  double t6451;
  double t6456;
  double t6545;
  double t6546;
  double t6547;
  double t3288;
  double t3419;
  double t3434;
  double t6842;
  double t6846;
  double t6849;
  double t7099;
  double t7102;
  double t7106;
  double t4662;
  double t6638;
  double t6915;
  double t6916;
  double t6917;
  double t7142;
  double t7143;
  double t7144;
  double t7150;
  double t7151;
  double t5656;
  double t5734;
  double t5740;
  double t6721;
  double t6722;
  double t6725;
  double t6987;
  double t6989;
  double t6990;
  double t6992;
  double t6995;
  double t6414;
  double t6417;
  double t6420;
  double t1380;
  double t7059;
  double t7060;
  double t7063;
  double t7199;
  double t7200;
  double t7202;
  double t7291;
  double t7292;
  double t6442;
  double t6816;
  double t7079;
  double t7214;
  t142 = Cos(var1[7]);
  t115 = Cos(var1[8]);
  t119 = Sin(var1[7]);
  t244 = Sin(var1[8]);
  t376 = Cos(var1[6]);
  t131 = -1.*t115*t119;
  t263 = -1.*t142*t244;
  t265 = t131 + t263;
  t53 = Sin(var1[6]);
  t394 = t142*t115;
  t433 = -1.*t119*t244;
  t452 = t394 + t433;
  t44 = Sin(var1[2]);
  t304 = t53*t265;
  t498 = t376*t452;
  t502 = t304 + t498;
  t561 = -1.*t44*t502;
  t623 = Cos(var1[2]);
  t637 = t376*t265;
  t650 = -1.*t53*t452;
  t664 = t637 + t650;
  t698 = t623*t664;
  t722 = t561 + t698;
  t831 = -1.*t115;
  t832 = 1. + t831;
  t847 = -1.3127*t832;
  t848 = -1.3127*t115;
  t871 = -0.06*t244;
  t931 = t847 + t848 + t871;
  t1093 = -1.*t142*t115;
  t1104 = t119*t244;
  t1109 = t1093 + t1104;
  t1421 = -1.*t142;
  t1423 = 1. + t1421;
  t1428 = -0.9063*t1423;
  t1445 = -0.06*t115*t119;
  t1449 = t142*t931;
  t1461 = t1428 + t1445 + t1449;
  t1482 = t115*t119;
  t1484 = t142*t244;
  t1489 = t1482 + t1484;
  t1494 = 0.06*t142*t115;
  t1496 = 0.9063*t119;
  t1501 = t119*t931;
  t1520 = t1494 + t1496 + t1501;
  t1682 = -0.06*t142*t115;
  t1696 = -0.9063*t119;
  t1710 = -1.*t119*t931;
  t1724 = t1682 + t1696 + t1710;
  t1613 = 0.9063*t142;
  t1627 = t1613 + t1445 + t1449;
  t1831 = 0.4999*t452;
  t1086 = -1.*t53*t265;
  t1111 = t376*t1109;
  t1121 = t1086 + t1111;
  t1188 = t623*t1121;
  t1190 = t53*t1109;
  t1196 = t637 + t1190;
  t1197 = -1.*t44*t1196;
  t1318 = t1188 + t1197;
  t1923 = -1.*t53*t1489;
  t1957 = t1923 + t498;
  t2020 = t376*t1489;
  t2057 = t53*t452;
  t2065 = t2020 + t2057;
  t1962 = t623*t1957;
  t2066 = -1.*t44*t2065;
  t2073 = t1962 + t2066;
  t2180 = t623*t502;
  t2182 = t44*t664;
  t2193 = t2180 + t2182;
  t2232 = -1.*t623*t502;
  t2233 = -1.*t44*t664;
  t2234 = t2232 + t2233;
  t2303 = t44*t1957;
  t2307 = t623*t2065;
  t2309 = t2303 + t2307;
  t2394 = t44*t1121;
  t2415 = t623*t1196;
  t2418 = t2394 + t2415;
  t2581 = 0.4999*t53;
  t2582 = t53*t1461;
  t2584 = t376*t1520;
  t2590 = t2581 + t2582 + t2584;
  t2602 = -1.*t376;
  t2603 = 1. + t2602;
  t2630 = -0.4999*t2603;
  t2634 = t376*t1461;
  t2641 = -1.*t53*t1520;
  t2675 = t2630 + t2634 + t2641;
  t2896 = t376*t1627;
  t2902 = t53*t1724;
  t2989 = t2896 + t2902;
  t2787 = -1.*t53*t1627;
  t2822 = t376*t1724;
  t2824 = t2787 + t2822;
  t782 = Power(t115,2);
  t788 = -0.06*t782;
  t818 = 0.9063*t244;
  t971 = t931*t244;
  t985 = t788 + t818 + t971;
  t3212 = -1.*t376*t452;
  t3215 = t1086 + t3212;
  t3232 = t44*t3215;
  t3245 = t3232 + t698;
  t1019 = 0.9063*t115;
  t1024 = t115*t931;
  t1073 = 0.06*t115*t244;
  t1082 = t1019 + t1024 + t1073;
  t1471 = -1.*t1461*t265;
  t1493 = 0.4999*t1489;
  t1544 = -1.*t1520*t452;
  t1549 = t1471 + t1493 + t1544;
  t1557 = 0.4999*t265;
  t1590 = t1461*t265;
  t1657 = t1627*t1489;
  t1767 = t1724*t452;
  t1777 = t1520*t452;
  t1780 = t1557 + t1590 + t1657 + t1767 + t1777;
  t1807 = -1.*t1724*t265;
  t1823 = -1.*t1520*t265;
  t1842 = -1.*t1627*t452;
  t1843 = -1.*t1461*t1109;
  t1895 = t1807 + t1823 + t1831 + t1842 + t1843;
  t2100 = t1520*t1489;
  t2105 = t1461*t452;
  t2120 = t2100 + t1831 + t2105;
  t3301 = -1.*t376*t265;
  t3330 = -1.*t53*t1109;
  t3358 = t3301 + t3330;
  t3371 = t44*t3358;
  t3416 = t1188 + t3371;
  t3517 = -1.*t376*t1489;
  t3527 = t3517 + t650;
  t3530 = t44*t3527;
  t3547 = t1962 + t3530;
  t2199 = -1.*t44*t1957;
  t2343 = -1.*t44*t1121;
  t3769 = t623*t3215;
  t3775 = t3769 + t2233;
  t2591 = -1.*t2590*t502;
  t2686 = -1.*t2675*t664;
  t2697 = t2591 + t2686;
  t3877 = 0.4999*t376;
  t3891 = t3877 + t2634 + t2641;
  t3988 = -0.4999*t53;
  t3992 = -1.*t53*t1461;
  t4025 = -1.*t376*t1520;
  t4026 = t3988 + t3992 + t4025;
  t2753 = t2590*t502;
  t2852 = t2824*t1957;
  t2879 = t2675*t664;
  t2993 = t2989*t2065;
  t3009 = t2753 + t2852 + t2879 + t2993;
  t3032 = t2675*t1957;
  t3033 = t2590*t2065;
  t3048 = t3032 + t3033;
  t3058 = -1.*t2989*t502;
  t3061 = -1.*t2824*t664;
  t3081 = -1.*t2675*t1121;
  t3082 = -1.*t2590*t1196;
  t3107 = t3058 + t3061 + t3081 + t3082;
  t4128 = -1.*t376*t1627;
  t4145 = -1.*t53*t1724;
  t4168 = t4128 + t4145;
  t4754 = -0.9063*t142;
  t4766 = 0.06*t115*t119;
  t4767 = -1.*t142*t931;
  t4812 = t4754 + t4766 + t4767;
  t4564 = t53*t1489;
  t4566 = t4564 + t1111;
  t4577 = t623*t4566;
  t4583 = t2020 + t3330;
  t4595 = t44*t4583;
  t4607 = t4577 + t4595;
  t5366 = t376*t4812;
  t5388 = t5366 + t4145;
  t5339 = t53*t4812;
  t5341 = t5339 + t2822;
  t4548 = 0.03428571*var2[8]*t2418;
  t4613 = 1.142857*t1082*t4607;
  t4649 = 1.142857*t985*t2418;
  t5575 = -0.06*t115;
  t5608 = 0. + t5575;
  t4698 = t1520*t265;
  t5777 = t5608*t119;
  t5807 = -0.06*t142*t244;
  t5816 = t5777 + t5807;
  t5823 = t142*t5608;
  t5828 = 0.06*t119*t244;
  t5833 = t5823 + t5828;
  t4840 = 0.4999*t1109;
  t4843 = t1461*t1109;
  t5862 = -1.*t5608*t119;
  t5878 = 0.06*t142*t244;
  t5883 = t5862 + t5878;
  t4918 = -1.*t1461*t1489;
  t4967 = -1.*t1520*t1109;
  t4998 = 1.142857*t2120*t4607;
  t5010 = 1.142857*t1549*t2418;
  t5053 = Power(t2193,2);
  t5063 = 2.285714*t5053;
  t5068 = 2.285714*t2193*t4607;
  t5079 = 2.285714*t2309*t2418;
  t5092 = Power(t2418,2);
  t5115 = 2.285714*t5092;
  t5116 = t5063 + t5068 + t5079 + t5115;
  t5117 = -0.5*var2[0]*t5116;
  t5155 = 2.285714*t722*t2193;
  t5177 = -1.*t44*t4566;
  t5179 = t623*t4583;
  t5211 = t5177 + t5179;
  t5213 = 1.142857*t2193*t5211;
  t5215 = 1.142857*t722*t4607;
  t5217 = 1.142857*t2073*t2418;
  t5228 = 1.142857*t2309*t1318;
  t5248 = 2.285714*t2418*t1318;
  t5266 = t5155 + t5213 + t5215 + t5217 + t5228 + t5248;
  t5301 = -0.5*var2[1]*t5266;
  t5306 = 1.142857*t3048*t4607;
  t5314 = 1.142857*t2697*t2418;
  t6040 = -1.*t53*t5816;
  t6048 = t376*t5833;
  t6049 = t6040 + t6048;
  t6058 = t376*t5816;
  t6059 = t53*t5833;
  t6067 = t6058 + t6059;
  t5493 = t2675*t1121;
  t5494 = t2590*t1196;
  t6177 = t53*t5883;
  t6178 = t6177 + t6048;
  t6186 = t376*t5883;
  t6188 = -1.*t53*t5833;
  t6206 = t6186 + t6188;
  t5414 = -1.*t2590*t4566;
  t5439 = -1.*t2675*t4583;
  t6380 = 1.142857*t1549*t2193;
  t6383 = 1.142857*t1780*t2193;
  t6385 = 1.142857*t1895*t2309;
  t6395 = 1.142857*t2120*t2418;
  t6397 = t6380 + t6383 + t6385 + t6395;
  t6316 = 2.285714*t2193*t2309;
  t6321 = 2.285714*t2193*t2418;
  t6322 = t6316 + t6321;
  t6333 = 1.142857*t722*t2309;
  t6337 = 1.142857*t2193*t2073;
  t6341 = 1.142857*t722*t2418;
  t6343 = 1.142857*t2193*t1318;
  t6347 = t6333 + t6337 + t6341 + t6343;
  t6359 = 1.142857*t2193*t2697;
  t6362 = 1.142857*t2193*t3009;
  t6365 = 1.142857*t3048*t2418;
  t6371 = 1.142857*t2309*t3107;
  t6373 = t6359 + t6362 + t6365 + t6371;
  t2364 = -1.*t623*t1196;
  t2382 = t2343 + t2364;
  t2203 = -1.*t623*t2065;
  t2221 = t2199 + t2203;
  t2226 = 1.142857*t2193*t2221;
  t2316 = 1.142857*t2234*t2309;
  t2318 = 2.285714*t722*t2073;
  t2386 = 1.142857*t2193*t2382;
  t2423 = 1.142857*t2234*t2418;
  t2436 = 2.285714*t722*t1318;
  t2489 = t2226 + t2316 + t2318 + t2386 + t2423 + t2436;
  t3798 = t623*t3358;
  t3807 = t2343 + t3798;
  t3708 = t623*t3527;
  t3722 = t2199 + t3708;
  t3744 = 1.142857*t2193*t3722;
  t3752 = 1.142857*t722*t3547;
  t3789 = 1.142857*t3775*t2309;
  t3794 = 1.142857*t3245*t2073;
  t3811 = 1.142857*t2193*t3807;
  t3815 = 1.142857*t722*t3416;
  t3817 = 1.142857*t3775*t2418;
  t3822 = 1.142857*t3245*t1318;
  t3829 = t3744 + t3752 + t3789 + t3794 + t3811 + t3815 + t3817 + t3822;
  t3857 = -1.*t2675*t3215;
  t3982 = -1.*t3891*t502;
  t4030 = -1.*t4026*t664;
  t4045 = -1.*t2590*t664;
  t4054 = t3857 + t3982 + t4030 + t4045;
  t4105 = t2675*t3215;
  t4121 = t3891*t502;
  t4179 = t4168*t1957;
  t4188 = t2989*t1957;
  t4209 = t4026*t664;
  t4229 = t2590*t664;
  t4233 = t2824*t3527;
  t4236 = t2824*t2065;
  t4238 = t4105 + t4121 + t4179 + t4188 + t4209 + t4229 + t4233 + t4236;
  t4290 = t4026*t1957;
  t4309 = t2590*t1957;
  t4325 = t2675*t3527;
  t4341 = t3891*t2065;
  t4348 = t4290 + t4309 + t4325 + t4341;
  t4366 = -1.*t2824*t3215;
  t4373 = -1.*t2824*t502;
  t4410 = -1.*t4168*t664;
  t4411 = -1.*t2989*t664;
  t4417 = -1.*t4026*t1121;
  t4421 = -1.*t2590*t1121;
  t4441 = -1.*t2675*t3358;
  t4451 = -1.*t3891*t1196;
  t4456 = t4366 + t4373 + t4410 + t4411 + t4417 + t4421 + t4441 + t4451;
  t4671 = 2.*t1724*t265;
  t4735 = t1724*t1489;
  t4814 = t4812*t452;
  t4833 = 2.*t1627*t452;
  t4848 = t4671 + t4698 + t4735 + t4814 + t4833 + t4840 + t4843;
  t4911 = -1.*t4812*t265;
  t4914 = -2.*t1627*t265;
  t4934 = -1.*t1724*t452;
  t4941 = -2.*t1724*t1109;
  t4986 = t1557 + t4911 + t4914 + t4918 + t4934 + t4941 + t4967;
  t5345 = -1.*t5341*t502;
  t5403 = -1.*t5388*t664;
  t5411 = -2.*t2824*t1121;
  t5441 = -2.*t2989*t1196;
  t5451 = t5345 + t5403 + t5411 + t5414 + t5439 + t5441;
  t5475 = 2.*t2989*t502;
  t5476 = t5388*t1957;
  t5478 = 2.*t2824*t664;
  t5489 = t5341*t2065;
  t5506 = t5475 + t5476 + t5478 + t5489 + t5493 + t5494;
  t6633 = 0.03428571*var2[8]*t1318;
  t5619 = t5608*t244;
  t5636 = 0.12*t115*t244;
  t5642 = t1019 + t1024 + t5619 + t5636;
  t6635 = 1.142857*t1082*t5211;
  t6636 = 1.142857*t985*t1318;
  t5664 = t5608*t115;
  t5666 = 0.06*t782;
  t5668 = -0.9063*t244;
  t5679 = -1.*t931*t244;
  t5698 = Power(t244,2);
  t5699 = -0.06*t5698;
  t5723 = t5664 + t5666 + t5668 + t5679 + t5699;
  t5821 = -1.*t5816*t452;
  t5835 = -1.*t265*t5833;
  t5839 = t1823 + t1831 + t5821 + t5835 + t1843;
  t5847 = t1724*t265;
  t5848 = t1627*t452;
  t5850 = t5816*t452;
  t5889 = t5883*t452;
  t5900 = t265*t5833;
  t5909 = t1489*t5833;
  t5912 = t5847 + t4698 + t5848 + t5850 + t5889 + t5900 + t5909 + t4840 + t4843;
  t5920 = -1.*t1627*t265;
  t5936 = -1.*t265*t5816;
  t5940 = -1.*t265*t5883;
  t5945 = -1.*t452*t5833;
  t5954 = -1.*t1724*t1109;
  t5955 = -1.*t5833*t1109;
  t5969 = t1557 + t5920 + t5936 + t5940 + t4918 + t5945 + t5954 + t4967 + t5955;
  t6650 = 1.142857*t2120*t5211;
  t6656 = 1.142857*t1549*t1318;
  t5984 = t5816*t1489;
  t5993 = t452*t5833;
  t5998 = t1557 + t1590 + t5984 + t1777 + t5993;
  t6666 = -0.5*var2[0]*t5266;
  t6673 = Power(t722,2);
  t6674 = 2.285714*t6673;
  t6678 = 2.285714*t722*t5211;
  t6684 = 2.285714*t2073*t1318;
  t6686 = Power(t1318,2);
  t6687 = 2.285714*t6686;
  t6691 = t6674 + t6678 + t6684 + t6687;
  t6692 = -0.5*var2[1]*t6691;
  t6693 = 1.142857*t3048*t5211;
  t6697 = 1.142857*t2697*t1318;
  t6055 = t1957*t6049;
  t6077 = t2065*t6067;
  t6082 = t2753 + t2879 + t6055 + t6077;
  t6137 = -1.*t664*t6049;
  t6147 = -1.*t502*t6067;
  t6154 = t6137 + t6147 + t3081 + t3082;
  t6159 = t2989*t502;
  t6161 = t2824*t664;
  t6165 = t664*t6049;
  t6181 = t2065*t6178;
  t6208 = t1957*t6206;
  t6213 = t502*t6067;
  t6221 = t6159 + t6161 + t6165 + t6181 + t6208 + t6213 + t5493 + t5494;
  t6238 = -1.*t502*t6178;
  t6245 = -1.*t664*t6206;
  t6276 = -1.*t2824*t1121;
  t6280 = -1.*t6049*t1121;
  t6282 = -1.*t2989*t1196;
  t6288 = -1.*t6067*t1196;
  t6292 = t6238 + t6245 + t6276 + t6280 + t5414 + t5439 + t6282 + t6288;
  t6358 = -0.5*var2[7]*t6347;
  t2707 = 1.142857*t722*t2697;
  t3024 = 1.142857*t722*t3009;
  t3051 = 1.142857*t3048*t1318;
  t3122 = 1.142857*t2073*t3107;
  t3131 = t2707 + t3024 + t3051 + t3122;
  t1551 = 1.142857*t1549*t722;
  t1798 = 1.142857*t1780*t722;
  t2075 = 1.142857*t1895*t2073;
  t2144 = 1.142857*t2120*t1318;
  t2146 = t1551 + t1798 + t2075 + t2144;
  t763 = 0.03428571*var2[8]*t722;
  t991 = 1.142857*t985*t722;
  t1348 = 1.142857*t1082*t1318;
  t1377 = t991 + t1348;
  t2149 = -0.5*var2[6]*t2146;
  t6800 = t2318 + t2436;
  t3136 = -0.5*var2[2]*t3131;
  t6513 = 1.142857*t2234*t2697;
  t6514 = 1.142857*t2234*t3009;
  t6516 = 1.142857*t3048*t2382;
  t6521 = 1.142857*t2221*t3107;
  t6522 = t6513 + t6514 + t6516 + t6521;
  t4083 = 1.142857*t2193*t4054;
  t4092 = 1.142857*t3245*t2697;
  t4244 = 1.142857*t2193*t4238;
  t4261 = 1.142857*t3245*t3009;
  t4265 = 1.142857*t3048*t3416;
  t4349 = 1.142857*t4348*t2418;
  t4355 = 1.142857*t3547*t3107;
  t4459 = 1.142857*t2309*t4456;
  t4503 = t4083 + t4092 + t4244 + t4261 + t4265 + t4349 + t4355 + t4459;
  t6599 = 1.142857*t722*t4054;
  t6601 = 1.142857*t3775*t2697;
  t6603 = 1.142857*t722*t4238;
  t6605 = 1.142857*t3775*t3009;
  t6608 = 1.142857*t3048*t3807;
  t6612 = 1.142857*t4348*t1318;
  t6614 = 1.142857*t3722*t3107;
  t6617 = 1.142857*t2073*t4456;
  t6622 = t6599 + t6601 + t6603 + t6605 + t6608 + t6612 + t6614 + t6617;
  t6700 = 2.285714*t3009*t1318;
  t6704 = 1.142857*t2073*t5451;
  t6711 = 2.285714*t722*t3107;
  t6712 = 1.142857*t722*t5506;
  t6713 = t6693 + t6697 + t6700 + t6704 + t6711 + t6712;
  t5336 = 2.285714*t3009*t2418;
  t5465 = 1.142857*t2309*t5451;
  t5473 = 2.285714*t2193*t3107;
  t5509 = 1.142857*t2193*t5506;
  t5510 = t5306 + t5314 + t5336 + t5465 + t5473 + t5509;
  t6015 = 1.142857*t3009*t2418;
  t6112 = 1.142857*t6082*t2418;
  t6129 = 1.142857*t2193*t3107;
  t6157 = 1.142857*t2193*t6154;
  t6223 = 1.142857*t2193*t6221;
  t6300 = 1.142857*t2309*t6292;
  t6301 = t5306 + t5314 + t6015 + t6112 + t6129 + t6157 + t6223 + t6300;
  t6762 = 1.142857*t3009*t1318;
  t6764 = 1.142857*t6082*t1318;
  t6770 = 1.142857*t722*t3107;
  t6775 = 1.142857*t722*t6154;
  t6777 = 1.142857*t722*t6221;
  t6782 = 1.142857*t2073*t6292;
  t6783 = t6693 + t6697 + t6762 + t6764 + t6770 + t6775 + t6777 + t6782;
  t6378 = -0.5*var2[7]*t6373;
  t6807 = -0.5*var2[7]*t3131;
  t7044 = 1.142857*t1895*t2697;
  t7045 = 1.142857*t2120*t3009;
  t7049 = 1.142857*t1780*t3048;
  t7050 = 1.142857*t1549*t3107;
  t7051 = t7044 + t7045 + t7049 + t7050;
  t7035 = 2.285714*t3009*t3048;
  t7039 = 2.285714*t2697*t3107;
  t7040 = t7035 + t7039;
  t6464 = 1.142857*t1549*t2234;
  t6465 = 1.142857*t1780*t2234;
  t6467 = 1.142857*t1895*t2221;
  t6468 = 1.142857*t2120*t2382;
  t6476 = t6464 + t6465 + t6467 + t6468;
  t6552 = 1.142857*t1549*t3775;
  t6554 = 1.142857*t1780*t3775;
  t6555 = 1.142857*t1895*t3722;
  t6557 = 1.142857*t2120*t3807;
  t6559 = t6552 + t6554 + t6555 + t6557;
  t3493 = 1.142857*t1549*t3245;
  t3504 = 1.142857*t1780*t3245;
  t3550 = 1.142857*t1895*t3547;
  t3554 = 1.142857*t2120*t3416;
  t3569 = t3493 + t3504 + t3550 + t3554;
  t6852 = 1.142857*t1895*t4054;
  t6853 = 1.142857*t2120*t4238;
  t6859 = 1.142857*t1780*t4348;
  t6861 = 1.142857*t1549*t4456;
  t6863 = t6852 + t6853 + t6859 + t6861;
  t4667 = 2.285714*t1895*t2193;
  t4906 = 1.142857*t4848*t2193;
  t4990 = 1.142857*t4986*t2309;
  t5019 = 2.285714*t1780*t2418;
  t5033 = t4667 + t4906 + t4990 + t4998 + t5010 + t5019;
  t6640 = 2.285714*t1895*t722;
  t6647 = 1.142857*t4848*t722;
  t6649 = 1.142857*t4986*t2073;
  t6657 = 2.285714*t1780*t1318;
  t6664 = t6640 + t6647 + t6649 + t6650 + t6656 + t6657;
  t6925 = 1.142857*t4986*t2697;
  t6931 = 2.285714*t1780*t3009;
  t6933 = 1.142857*t4848*t3048;
  t6934 = 1.142857*t1549*t5451;
  t6937 = 2.285714*t1895*t3107;
  t6940 = 1.142857*t2120*t5506;
  t6942 = t6925 + t6931 + t6933 + t6934 + t6937 + t6940;
  t5765 = 1.142857*t1895*t2193;
  t5845 = 1.142857*t5839*t2193;
  t5914 = 1.142857*t5912*t2193;
  t5974 = 1.142857*t5969*t2309;
  t5983 = 1.142857*t1780*t2418;
  t6001 = 1.142857*t5998*t2418;
  t6005 = t5765 + t5845 + t5914 + t5974 + t4998 + t5010 + t5983 + t6001;
  t6728 = 1.142857*t1895*t722;
  t6732 = 1.142857*t5839*t722;
  t6733 = 1.142857*t5912*t722;
  t6735 = 1.142857*t5969*t2073;
  t6743 = 1.142857*t1780*t1318;
  t6747 = 1.142857*t5998*t1318;
  t6755 = t6728 + t6732 + t6733 + t6735 + t6650 + t6656 + t6743 + t6747;
  t6997 = 1.142857*t5969*t2697;
  t6999 = 1.142857*t5998*t3009;
  t7001 = 1.142857*t5912*t3048;
  t7002 = 1.142857*t1780*t6082;
  t7003 = 1.142857*t5839*t3107;
  t7004 = 1.142857*t1895*t6154;
  t7006 = 1.142857*t2120*t6221;
  t7007 = 1.142857*t1549*t6292;
  t7008 = t6997 + t6999 + t7001 + t7002 + t7003 + t7004 + t7006 + t7007;
  t6401 = -0.5*var2[7]*t6397;
  t6810 = -0.5*var2[7]*t2146;
  t7052 = -0.5*var2[7]*t7051;
  t7186 = 2.285714*t2120*t1780;
  t7187 = 2.285714*t1549*t1895;
  t7188 = t7186 + t7187;
  t6446 = 1.142857*t985*t2234;
  t6451 = 1.142857*t1082*t2382;
  t6456 = t6446 + t6451;
  t6545 = 1.142857*t985*t3775;
  t6546 = 1.142857*t1082*t3807;
  t6547 = t6545 + t6546;
  t3288 = 1.142857*t985*t3245;
  t3419 = 1.142857*t1082*t3416;
  t3434 = t3288 + t3419;
  t6842 = 1.142857*t1082*t4238;
  t6846 = 1.142857*t985*t4456;
  t6849 = t6842 + t6846;
  t7099 = 1.142857*t1082*t4848;
  t7102 = 1.142857*t985*t4986;
  t7106 = t7099 + t7102;
  t4662 = t4613 + t4649;
  t6638 = t6635 + t6636;
  t6915 = 1.142857*t985*t5451;
  t6916 = 1.142857*t1082*t5506;
  t6917 = t6915 + t6916;
  t7142 = 1.142857*t5723*t1780;
  t7143 = 1.142857*t5642*t1895;
  t7144 = 1.142857*t1082*t5912;
  t7150 = 1.142857*t985*t5969;
  t7151 = t7142 + t7143 + t7144 + t7150;
  t5656 = 1.142857*t5642*t2193;
  t5734 = 1.142857*t5723*t2418;
  t5740 = t5656 + t4613 + t4649 + t5734;
  t6721 = 1.142857*t5642*t722;
  t6722 = 1.142857*t5723*t1318;
  t6725 = t6721 + t6635 + t6636 + t6722;
  t6987 = 1.142857*t5723*t3009;
  t6989 = 1.142857*t5642*t3107;
  t6990 = 1.142857*t1082*t6221;
  t6992 = 1.142857*t985*t6292;
  t6995 = t6987 + t6989 + t6990 + t6992;
  t6414 = 1.142857*t985*t2193;
  t6417 = 1.142857*t1082*t2418;
  t6420 = t6414 + t6417;
  t1380 = -0.5*var2[7]*t1377;
  t7059 = 1.142857*t1082*t3009;
  t7060 = 1.142857*t985*t3107;
  t7063 = t7059 + t7060;
  t7199 = 1.142857*t1082*t1780;
  t7200 = 1.142857*t985*t1895;
  t7202 = t7199 + t7200;
  t7291 = 0.03428571*var2[0]*t2418;
  t7292 = 0.03428571*var2[1]*t1318;
  t6442 = 0.03428571*var2[7]*t2193;
  t6816 = 0.03428571*var2[7]*t722;
  t7079 = 0.03428571*var2[7]*t3107;
  t7214 = 0.03428571*var2[7]*t1895;
  p_output1[0]=(t1380 + t2149 + t3136 + t763 - 0.5*(2.285714*t1318*t2193 + 2.285714*t2073*t2193 + 2.285714*t2309*t722 + 2.285714*t2418*t722)*var2[0] - 0.5*t2489*var2[1])*var2[7];
  p_output1[1]=var2[7]*(-0.5*(2.285714*t2309*t3245 + 2.285714*t2418*t3245 + 2.285714*t2193*t3416 + 2.285714*t2193*t3547)*var2[0] - 0.5*t3829*var2[1] - 0.5*t4503*var2[2] - 0.5*t3569*var2[6] - 0.5*t3434*var2[7] + 0.03428571*t3245*var2[8]);
  p_output1[2]=var2[7]*(t4548 + t5117 + t5301 - 0.5*t5510*var2[2] - 0.5*t5033*var2[6] - 0.5*t4662*var2[7]);
  p_output1[3]=var2[7]*(t4548 + t5117 + t5301 - 0.5*t6301*var2[2] - 0.5*t6005*var2[6] - 0.5*t5740*var2[7]);
  p_output1[4]=-0.5*t6322*var2[7];
  p_output1[5]=t6358;
  p_output1[6]=t6378;
  p_output1[7]=t6401;
  p_output1[8]=-0.5*t6322*var2[0] - 0.5*t6347*var2[1] - 0.5*t6373*var2[2] - 0.5*t6397*var2[6] - 1.*t6420*var2[7] + 0.03428571*t2193*var2[8];
  p_output1[9]=t6442;
  p_output1[10]=var2[7]*(-0.5*t2489*var2[0] - 0.5*(2.285714*t1318*t2234 + 2.285714*t2073*t2234 + 2.285714*t2221*t722 + 2.285714*t2382*t722)*var2[1] - 0.5*t6522*var2[2] - 0.5*t6476*var2[6] - 0.5*t6456*var2[7] + 0.03428571*t2234*var2[8]);
  p_output1[11]=var2[7]*(-0.5*t3829*var2[0] - 0.5*(2.285714*t1318*t3775 + 2.285714*t2073*t3775 + 2.285714*t3722*t722 + 2.285714*t3807*t722)*var2[1] - 0.5*t6622*var2[2] - 0.5*t6559*var2[6] - 0.5*t6547*var2[7] + 0.03428571*t3775*var2[8]);
  p_output1[12]=var2[7]*(t6633 + t6666 + t6692 - 0.5*t6713*var2[2] - 0.5*t6664*var2[6] - 0.5*t6638*var2[7]);
  p_output1[13]=var2[7]*(t6633 + t6666 + t6692 - 0.5*t6783*var2[2] - 0.5*t6755*var2[6] - 0.5*t6725*var2[7]);
  p_output1[14]=t6358;
  p_output1[15]=-0.5*t6800*var2[7];
  p_output1[16]=t6807;
  p_output1[17]=t6810;
  p_output1[18]=t2149 + t3136 + t763 - 0.5*t6347*var2[0] - 0.5*t6800*var2[1] - 1.*t1377*var2[7];
  p_output1[19]=t6816;
  p_output1[20]=(-0.5*t3131*var2[0] - 0.5*t6522*var2[1])*var2[7];
  p_output1[21]=var2[7]*(-0.5*t4503*var2[0] - 0.5*t6622*var2[1] - 0.5*(2.285714*t3107*t4054 + 2.285714*t3048*t4238 + 2.285714*t3009*t4348 + 2.285714*t2697*t4456)*var2[2] - 0.5*t6863*var2[6] - 0.5*t6849*var2[7] + 0.03428571*t4456*var2[8]);
  p_output1[22]=var2[7]*(-0.5*t5510*var2[0] - 0.5*t6713*var2[1] - 0.5*(2.285714*Power(t3009,2) + 2.285714*Power(t3107,2) + 2.285714*t2697*t5451 + 2.285714*t3048*t5506)*var2[2] - 0.5*t6942*var2[6] - 0.5*t6917*var2[7] + 0.03428571*t5451*var2[8]);
  p_output1[23]=var2[7]*(-0.5*t6301*var2[0] - 0.5*t6783*var2[1] - 0.5*(2.285714*t3009*t6082 + 2.285714*t3107*t6154 + 2.285714*t3048*t6221 + 2.285714*t2697*t6292)*var2[2] - 0.5*t7008*var2[6] - 0.5*t6995*var2[7] + 0.03428571*t6292*var2[8]);
  p_output1[24]=t6378;
  p_output1[25]=t6807;
  p_output1[26]=-0.5*t7040*var2[7];
  p_output1[27]=t7052;
  p_output1[28]=-0.5*t6373*var2[0] - 0.5*t3131*var2[1] - 0.5*t7040*var2[2] - 0.5*t7051*var2[6] - 1.*t7063*var2[7] + 0.03428571*t3107*var2[8];
  p_output1[29]=t7079;
  p_output1[30]=(-0.5*t2146*var2[0] - 0.5*t6476*var2[1])*var2[7];
  p_output1[31]=(-0.5*t3569*var2[0] - 0.5*t6559*var2[1] - 0.5*t6863*var2[2])*var2[7];
  p_output1[32]=var2[7]*(-0.5*t5033*var2[0] - 0.5*t6664*var2[1] - 0.5*t6942*var2[2] - 0.5*(2.285714*Power(t1780,2) + 2.285714*Power(t1895,2) + 2.285714*t2120*t4848 + 2.285714*t1549*t4986)*var2[6] - 0.5*t7106*var2[7] + 0.03428571*t4986*var2[8]);
  p_output1[33]=var2[7]*(-0.5*t6005*var2[0] - 0.5*t6755*var2[1] - 0.5*t7008*var2[2] - 0.5*(2.285714*t1895*t5839 + 2.285714*t2120*t5912 + 2.285714*t1549*t5969 + 2.285714*t1780*t5998)*var2[6] - 0.5*t7151*var2[7] + 0.03428571*t5969*var2[8]);
  p_output1[34]=t6401;
  p_output1[35]=t6810;
  p_output1[36]=t7052;
  p_output1[37]=-0.5*t7188*var2[7];
  p_output1[38]=-0.5*t6397*var2[0] - 0.5*t2146*var2[1] - 0.5*t7051*var2[2] - 0.5*t7188*var2[6] - 1.*t7202*var2[7] + 0.03428571*t1895*var2[8];
  p_output1[39]=t7214;
  p_output1[40]=(-0.5*t1377*var2[0] - 0.5*t6456*var2[1])*var2[7];
  p_output1[41]=(-0.5*t3434*var2[0] - 0.5*t6547*var2[1] - 0.5*t6849*var2[2])*var2[7];
  p_output1[42]=(-0.5*t4662*var2[0] - 0.5*t6638*var2[1] - 0.5*t6917*var2[2] - 0.5*t7106*var2[6])*var2[7];
  p_output1[43]=(-0.5*t5740*var2[0] - 0.5*t6725*var2[1] - 0.5*t6995*var2[2] - 0.5*t7151*var2[6])*var2[7];
  p_output1[44]=-0.5*t6420*var2[7];
  p_output1[45]=t1380;
  p_output1[46]=-0.5*t7063*var2[7];
  p_output1[47]=-0.5*t7202*var2[7];
  p_output1[48]=-0.5*t6420*var2[0] - 0.5*t1377*var2[1] - 0.5*t7063*var2[2] - 0.5*t7202*var2[6];
  p_output1[49]=(0.03428571*t722*var2[0] + 0.03428571*t2234*var2[1])*var2[7];
  p_output1[50]=(0.03428571*t3245*var2[0] + 0.03428571*t3775*var2[1] + 0.03428571*t4456*var2[2])*var2[7];
  p_output1[51]=(t7291 + t7292 + 0.03428571*t5451*var2[2] + 0.03428571*t4986*var2[6])*var2[7];
  p_output1[52]=(t7291 + t7292 + 0.03428571*t6292*var2[2] + 0.03428571*t5969*var2[6])*var2[7];
  p_output1[53]=t6442;
  p_output1[54]=t6816;
  p_output1[55]=t7079;
  p_output1[56]=t7214;
  p_output1[57]=0.03428571*t2193*var2[0] + 0.03428571*t722*var2[1] + 0.03428571*t3107*var2[2] + 0.03428571*t1895*var2[6];
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 9 && ncols == 1) && 
      !(mrows == 1 && ncols == 9))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 9 && ncols == 1) && 
      !(mrows == 1 && ncols == 9))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 58, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_Ce2_vec_L7_J8_amber3_feet.hh"

namespace RightSS1
{

void J_Ce2_vec_L7_J8_amber3_feet_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
