/*
 * Automatically Generated from Mathematica.
 * Wed 1 Mar 2023 13:24:47 GMT-08:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t277;
  double t137;
  double t226;
  double t289;
  double t382;
  double t267;
  double t329;
  double t362;
  double t73;
  double t384;
  double t391;
  double t393;
  double t642;
  double t16;
  double t658;
  double t662;
  double t765;
  double t829;
  double t842;
  double t888;
  double t777;
  double t369;
  double t406;
  double t639;
  double t918;
  double t1357;
  double t1371;
  double t1385;
  double t1408;
  double t1410;
  double t1444;
  double t1474;
  double t1494;
  double t1525;
  double t1535;
  double t1493;
  double t1425;
  double t641;
  double t816;
  double t1006;
  double t1051;
  double t1204;
  double t1238;
  double t1241;
  double t1340;
  double t1558;
  double t1569;
  double t1796;
  double t1812;
  double t1619;
  double t1623;
  double t1629;
  double t1587;
  double t2123;
  double t2164;
  double t2169;
  double t2175;
  double t2181;
  double t2231;
  double t2239;
  double t2083;
  double t2084;
  double t2097;
  double t2203;
  double t2271;
  double t2282;
  double t2288;
  double t2310;
  double t2384;
  double t2447;
  double t2477;
  double t2501;
  double t2502;
  double t2530;
  double t2538;
  double t2564;
  double t987;
  double t1003;
  double t898;
  double t950;
  double t1752;
  double t1761;
  double t1476;
  double t1479;
  double t1092;
  double t2735;
  double t2746;
  double t1592;
  double t2992;
  double t3048;
  double t981;
  double t1054;
  double t1205;
  double t1353;
  double t1578;
  double t1612;
  double t1648;
  double t1820;
  double t1844;
  double t3303;
  double t3334;
  double t3250;
  double t3257;
  double t3277;
  double t3295;
  double t3345;
  double t3348;
  double t3429;
  double t3432;
  double t3437;
  double t3438;
  double t3440;
  double t3455;
  double t3471;
  double t3545;
  double t3554;
  double t3543;
  double t3551;
  double t3563;
  double t3577;
  double t3675;
  double t3681;
  double t3686;
  double t3687;
  double t3696;
  double t3721;
  double t3753;
  double t3774;
  double t3791;
  double t3530;
  double t3538;
  double t3815;
  double t3830;
  double t3843;
  double t3857;
  double t4038;
  double t4047;
  double t4068;
  double t4078;
  double t4081;
  double t3959;
  double t3960;
  double t3970;
  double t3984;
  double t3995;
  double t4017;
  double t4025;
  double t3882;
  double t3895;
  double t3934;
  double t3935;
  double t3951;
  double t4151;
  double t1911;
  double t1921;
  double t1988;
  double t2024;
  double t4323;
  double t4325;
  double t4328;
  double t4332;
  double t4387;
  double t2748;
  double t2782;
  double t3083;
  double t3084;
  double t4154;
  double t4159;
  double t4173;
  double t4185;
  double t4200;
  double t4595;
  double t4605;
  double t4615;
  double t4634;
  double t4647;
  double t4728;
  double t4743;
  double t4776;
  double t4830;
  double t4834;
  double t4845;
  double t4717;
  double t4727;
  double t4873;
  double t4880;
  double t4940;
  double t4941;
  double t5022;
  double t4974;
  double t4982;
  double t4996;
  double t4951;
  double t5129;
  double t5218;
  double t5220;
  double t5239;
  double t5241;
  double t5264;
  double t5269;
  double t5170;
  double t5190;
  double t5203;
  double t5212;
  double t5271;
  double t5279;
  double t5302;
  double t5325;
  double t5332;
  double t5334;
  double t5380;
  double t5381;
  double t5402;
  double t5406;
  double t5410;
  double t5419;
  double t5165;
  double t5287;
  double t5360;
  double t5365;
  double t5368;
  double t5424;
  double t5432;
  double t5495;
  double t5498;
  double t5516;
  double t5657;
  double t5678;
  double t5679;
  double t5744;
  double t5614;
  double t5624;
  double t6016;
  double t6032;
  double t6042;
  double t6073;
  double t6083;
  double t6086;
  double t6117;
  double t6119;
  double t6123;
  double t6034;
  double t6090;
  double t6097;
  double t5935;
  double t5952;
  double t6101;
  double t6208;
  double t6209;
  double t6231;
  double t6232;
  double t6153;
  double t6226;
  double t6237;
  double t6242;
  double t6258;
  double t6262;
  double t6263;
  double t6158;
  double t6167;
  double t5599;
  double t5637;
  double t5751;
  double t5758;
  double t5779;
  double t6480;
  double t6495;
  double t6501;
  double t6538;
  double t5797;
  double t5807;
  double t5812;
  double t5827;
  double t5830;
  double t5596;
  double t5781;
  double t5796;
  double t5870;
  double t5893;
  double t6099;
  double t6127;
  double t6139;
  double t6156;
  double t6157;
  double t6170;
  double t6856;
  double t6857;
  double t6862;
  double t6799;
  double t6837;
  double t6852;
  double t6855;
  double t6866;
  double t6873;
  double t6246;
  double t6266;
  double t6274;
  double t6912;
  double t6914;
  double t6302;
  double t6315;
  double t6319;
  double t7119;
  double t7124;
  double t7127;
  double t6947;
  double t6970;
  double t6981;
  double t6982;
  double t6151;
  double t6176;
  double t6199;
  double t7289;
  double t7297;
  double t7304;
  double t7319;
  double t7362;
  double t7365;
  double t7331;
  double t7352;
  double t6864;
  double t6865;
  double t6902;
  double t6906;
  double t6907;
  double t6908;
  double t6909;
  double t6915;
  double t6918;
  double t6919;
  double t6925;
  double t6944;
  double t6992;
  double t7037;
  double t7047;
  double t7270;
  double t7283;
  double t7524;
  double t7529;
  double t7461;
  double t7464;
  double t7532;
  double t7538;
  double t7554;
  double t7555;
  double t7380;
  double t7397;
  double t7801;
  double t7805;
  double t7811;
  double t7813;
  double t7836;
  double t7837;
  double t7820;
  double t7865;
  double t7906;
  double t7942;
  double t7985;
  double t8002;
  double t7926;
  double t8057;
  double t8086;
  double t8154;
  double t8170;
  double t8173;
  double t8401;
  double t8405;
  double t8515;
  double t7488;
  double t7491;
  double t7497;
  double t7505;
  double t8712;
  double t8720;
  double t8723;
  double t8730;
  double t8734;
  double t8735;
  double t7635;
  double t7661;
  double t8696;
  double t7489;
  double t8705;
  double t7492;
  double t8709;
  double t8739;
  double t7515;
  double t7540;
  double t7560;
  double t7561;
  double t7619;
  double t7624;
  double t8751;
  double t7636;
  double t8752;
  double t7688;
  double t8801;
  double t8809;
  double t8774;
  double t8775;
  double t8776;
  double t8790;
  double t8791;
  double t8793;
  double t8794;
  double t8795;
  double t8804;
  double t8813;
  double t8818;
  double t8821;
  double t8826;
  double t8827;
  double t8841;
  double t8846;
  double t8847;
  double t8848;
  double t8850;
  double t8851;
  double t8852;
  double t8854;
  double t8866;
  double t8868;
  double t8871;
  double t8877;
  double t8883;
  double t8888;
  double t8891;
  double t8849;
  double t8856;
  double t8858;
  double t8874;
  double t8875;
  double t8878;
  double t8882;
  double t8884;
  double t8889;
  double t8917;
  double t8894;
  double t8896;
  double t8897;
  double t8900;
  double t8901;
  double t8903;
  double t8921;
  double t8919;
  double t8920;
  double t8923;
  double t8881;
  double t8890;
  double t8892;
  double t8939;
  double t8945;
  double t8946;
  double t8952;
  double t8957;
  double t8964;
  double t8965;
  double t8997;
  double t8998;
  double t8999;
  double t9002;
  double t9003;
  double t9004;
  double t8970;
  double t8972;
  double t8975;
  double t8982;
  double t8986;
  double t8991;
  double t9017;
  double t8971;
  double t9018;
  double t8976;
  double t8977;
  double t9020;
  double t8978;
  double t8979;
  double t9024;
  double t8983;
  double t8984;
  double t8985;
  double t9027;
  double t8987;
  double t9031;
  double t8992;
  double t9058;
  double t9061;
  double t9052;
  double t9055;
  double t9056;
  double t9048;
  double t9049;
  double t9050;
  double t9059;
  double t9060;
  double t9062;
  double t9064;
  double t9065;
  double t9067;
  double t9075;
  double t9076;
  double t9077;
  double t9078;
  double t9080;
  double t9081;
  double t9082;
  double t9083;
  double t9084;
  double t9094;
  double t9095;
  double t9079;
  double t9085;
  double t9086;
  double t9116;
  double t9098;
  double t9100;
  double t9101;
  double t9102;
  double t9104;
  double t9117;
  double t9118;
  double t9096;
  double t9130;
  double t9131;
  double t9141;
  double t9142;
  double t9143;
  double t9145;
  double t9146;
  double t9147;
  double t9135;
  double t9157;
  double t9136;
  double t9158;
  double t9186;
  double t9187;
  double t9182;
  double t9183;
  double t9184;
  double t9176;
  double t9177;
  double t9178;
  double t9190;
  double t9192;
  double t9193;
  double t9194;
  double t9217;
  double t9218;
  double t9219;
  double t9220;
  double t9221;
  double t9222;
  double t9230;
  t277 = Cos(var1[4]);
  t137 = Cos(var1[5]);
  t226 = Sin(var1[4]);
  t289 = Sin(var1[5]);
  t382 = Cos(var1[3]);
  t267 = -1.*t137*t226;
  t329 = -1.*t277*t289;
  t362 = t267 + t329;
  t73 = Sin(var1[3]);
  t384 = t277*t137;
  t391 = -1.*t226*t289;
  t393 = t384 + t391;
  t642 = Cos(var1[2]);
  t16 = Sin(var1[2]);
  t658 = t382*t362;
  t662 = -1.*t73*t393;
  t765 = t658 + t662;
  t829 = -1.*t73*t362;
  t842 = -1.*t382*t393;
  t888 = t829 + t842;
  t777 = t642*t765;
  t369 = t73*t362;
  t406 = t382*t393;
  t639 = t369 + t406;
  t918 = -1.*t16*t765;
  t1357 = t137*t226;
  t1371 = t277*t289;
  t1385 = t1357 + t1371;
  t1408 = -1.*t73*t1385;
  t1410 = t1408 + t406;
  t1444 = -1.*t382*t1385;
  t1474 = t1444 + t662;
  t1494 = t382*t1385;
  t1525 = t73*t393;
  t1535 = t1494 + t1525;
  t1493 = -1.*t16*t1410;
  t1425 = t642*t1410;
  t641 = -1.*t16*t639;
  t816 = t641 + t777;
  t1006 = -1.*t642*t639;
  t1051 = t1006 + t918;
  t1204 = -1.*t642*t765;
  t1238 = t642*t639;
  t1241 = t16*t765;
  t1340 = t1238 + t1241;
  t1558 = -1.*t642*t1535;
  t1569 = t1493 + t1558;
  t1796 = -1.*t16*t1535;
  t1812 = t1425 + t1796;
  t1619 = t16*t1410;
  t1623 = t642*t1535;
  t1629 = t1619 + t1623;
  t1587 = -1.*t642*t1410;
  t2123 = -1.*t277*t137;
  t2164 = t226*t289;
  t2169 = t2123 + t2164;
  t2175 = t382*t2169;
  t2181 = t829 + t2175;
  t2231 = t73*t2169;
  t2239 = t658 + t2231;
  t2083 = 1.142857*t1340*t1569;
  t2084 = 1.142857*t1051*t1629;
  t2097 = 2.285714*t816*t1812;
  t2203 = -1.*t16*t2181;
  t2271 = -1.*t642*t2239;
  t2282 = t2203 + t2271;
  t2288 = 1.142857*t1340*t2282;
  t2310 = t16*t2181;
  t2384 = t642*t2239;
  t2447 = t2310 + t2384;
  t2477 = 1.142857*t1051*t2447;
  t2501 = t642*t2181;
  t2502 = -1.*t16*t2239;
  t2530 = t2501 + t2502;
  t2538 = 2.285714*t816*t2530;
  t2564 = t2083 + t2084 + t2097 + t2288 + t2477 + t2538;
  t987 = t16*t888;
  t1003 = t987 + t777;
  t898 = t642*t888;
  t950 = t898 + t918;
  t1752 = t642*t1474;
  t1761 = t1493 + t1752;
  t1476 = t16*t1474;
  t1479 = t1425 + t1476;
  t1092 = -1.*t16*t888;
  t2735 = -1.*t382*t362;
  t2746 = t2735 + t1525;
  t1592 = -1.*t16*t1474;
  t2992 = t73*t1385;
  t3048 = t2992 + t842;
  t981 = 2.285714*t816*t950;
  t1054 = 1.142857*t1003*t1051;
  t1205 = t1092 + t1204;
  t1353 = 1.142857*t1205*t1340;
  t1578 = 1.142857*t1479*t1569;
  t1612 = t1587 + t1592;
  t1648 = 1.142857*t1612*t1629;
  t1820 = 2.285714*t1761*t1812;
  t1844 = t981 + t1054 + t1353 + t1578 + t1648 + t1820;
  t3303 = -1.*t73*t2169;
  t3334 = t2735 + t3303;
  t3250 = 1.142857*t1340*t1761;
  t3257 = 1.142857*t816*t1479;
  t3277 = 1.142857*t950*t1629;
  t3295 = 1.142857*t1003*t1812;
  t3345 = t642*t3334;
  t3348 = t2203 + t3345;
  t3429 = 1.142857*t1340*t3348;
  t3432 = t16*t3334;
  t3437 = t2501 + t3432;
  t3438 = 1.142857*t816*t3437;
  t3440 = 1.142857*t950*t2447;
  t3455 = 1.142857*t1003*t2530;
  t3471 = t3250 + t3257 + t3277 + t3295 + t3429 + t3438 + t3440 + t3455;
  t3545 = t2992 + t2175;
  t3554 = t1494 + t3303;
  t3543 = 2.285714*t816*t1340;
  t3551 = -1.*t16*t3545;
  t3563 = t642*t3554;
  t3577 = t3551 + t3563;
  t3675 = 1.142857*t1340*t3577;
  t3681 = t642*t3545;
  t3686 = t16*t3554;
  t3687 = t3681 + t3686;
  t3696 = 1.142857*t816*t3687;
  t3721 = 1.142857*t1812*t2447;
  t3753 = 1.142857*t1629*t2530;
  t3774 = 2.285714*t2447*t2530;
  t3791 = t3543 + t3675 + t3696 + t3721 + t3753 + t3774;
  t3530 = -0.5*var2[3]*t3471;
  t3538 = -0.5*var2[2]*t2564;
  t3815 = -0.5*var2[4]*t3791;
  t3830 = -0.5*var2[5]*t3791;
  t3843 = t3530 + t3538 + t3815 + t3830;
  t3857 = var2[1]*t3843;
  t4038 = 1.142857*t816*t1629;
  t4047 = 1.142857*t1340*t1812;
  t4068 = 1.142857*t816*t2447;
  t4078 = 1.142857*t1340*t2530;
  t4081 = t4038 + t4047 + t4068 + t4078;
  t3959 = Power(t816,2);
  t3960 = 1.142857*t3959;
  t3970 = 1.142857*t1051*t1340;
  t3984 = 1.142857*t1569*t1629;
  t3995 = Power(t1812,2);
  t4017 = 1.142857*t3995;
  t4025 = t3960 + t3970 + t3984 + t4017;
  t3882 = 1.142857*t1003*t816;
  t3895 = 1.142857*t950*t1340;
  t3934 = 1.142857*t1761*t1629;
  t3935 = 1.142857*t1479*t1812;
  t3951 = t3882 + t3895 + t3934 + t3935;
  t4151 = -0.5*var2[1]*t4081;
  t1911 = t16*t639;
  t1921 = t1911 + t1204;
  t1988 = t16*t1535;
  t2024 = t1587 + t1988;
  t4323 = 2.285714*t816*t1569;
  t4325 = 2.285714*t1051*t1812;
  t4328 = 2.285714*t816*t2282;
  t4332 = 2.285714*t1051*t2530;
  t4387 = t4323 + t4325 + t4328 + t4332;
  t2748 = t642*t2746;
  t2782 = t1092 + t2748;
  t3083 = t642*t3048;
  t3084 = t3083 + t1592;
  t4154 = 2.285714*t1205*t816;
  t4159 = 2.285714*t950*t1051;
  t4173 = 2.285714*t1761*t1569;
  t4185 = 2.285714*t1612*t1812;
  t4200 = t4154 + t4159 + t4173 + t4185;
  t4595 = 2.285714*t816*t1761;
  t4605 = 2.285714*t950*t1812;
  t4615 = 2.285714*t816*t3348;
  t4634 = 2.285714*t950*t2530;
  t4647 = t4595 + t4605 + t4615 + t4634;
  t4728 = 2.285714*t3959;
  t4743 = 2.285714*t816*t3577;
  t4776 = 2.285714*t1812*t2530;
  t4830 = Power(t2530,2);
  t4834 = 2.285714*t4830;
  t4845 = t4728 + t4743 + t4776 + t4834;
  t4717 = -0.5*var2[3]*t4647;
  t4727 = -0.5*var2[2]*t4387;
  t4873 = -0.5*var2[4]*t4845;
  t4880 = -0.5*var2[5]*t4845;
  t4940 = t4717 + t4727 + t4873 + t4880;
  t4941 = var2[1]*t4940;
  t5022 = t2097 + t2538;
  t4974 = 2.285714*t816*t1051;
  t4982 = 2.285714*t1569*t1812;
  t4996 = t4974 + t4982;
  t4951 = t981 + t1820;
  t5129 = -0.5*var2[1]*t5022;
  t5218 = -1.*t137;
  t5220 = 1. + t5218;
  t5239 = -1.3127*t5220;
  t5241 = -1.3127*t137;
  t5264 = -0.06*t289;
  t5269 = t5239 + t5241 + t5264;
  t5170 = -1.*t277;
  t5190 = 1. + t5170;
  t5203 = -0.9063*t5190;
  t5212 = -0.06*t137*t226;
  t5271 = t277*t5269;
  t5279 = t5203 + t5212 + t5271;
  t5302 = 0.06*t277*t137;
  t5325 = 0.9063*t226;
  t5332 = t226*t5269;
  t5334 = t5302 + t5325 + t5332;
  t5380 = -1.*t382;
  t5381 = 1. + t5380;
  t5402 = -0.4999*t5381;
  t5406 = t382*t5279;
  t5410 = -1.*t73*t5334;
  t5419 = t5402 + t5406 + t5410;
  t5165 = 0.4999*t73;
  t5287 = t73*t5279;
  t5360 = t382*t5334;
  t5365 = t5165 + t5287 + t5360;
  t5368 = -1.*t5365*t639;
  t5424 = -1.*t5419*t765;
  t5432 = t5368 + t5424;
  t5495 = t5419*t1410;
  t5498 = t5365*t1535;
  t5516 = t5495 + t5498;
  t5657 = -0.4999*t73;
  t5678 = -1.*t73*t5279;
  t5679 = -1.*t382*t5334;
  t5744 = t5657 + t5678 + t5679;
  t5614 = 0.4999*t382;
  t5624 = t5614 + t5406 + t5410;
  t6016 = 0.9063*t277;
  t6032 = t6016 + t5212 + t5271;
  t6042 = -0.06*t277*t137;
  t6073 = -0.9063*t226;
  t6083 = -1.*t226*t5269;
  t6086 = t6042 + t6073 + t6083;
  t6117 = t382*t6032;
  t6119 = t73*t6086;
  t6123 = t6117 + t6119;
  t6034 = -1.*t73*t6032;
  t6090 = t382*t6086;
  t6097 = t6034 + t6090;
  t5935 = 1.142857*t1051*t5432;
  t5952 = t5365*t639;
  t6101 = t5419*t765;
  t6208 = -0.06*t277*t289;
  t6209 = t5212 + t6208;
  t6231 = 0.06*t226*t289;
  t6232 = t6042 + t6231;
  t6153 = 1.142857*t5516*t2282;
  t6226 = -1.*t73*t6209;
  t6237 = t382*t6232;
  t6242 = t6226 + t6237;
  t6258 = t382*t6209;
  t6262 = t73*t6232;
  t6263 = t6258 + t6262;
  t6158 = -1.*t5419*t2181;
  t6167 = -1.*t5365*t2239;
  t5599 = -1.*t5419*t888;
  t5637 = -1.*t5624*t639;
  t5751 = -1.*t5744*t765;
  t5758 = -1.*t5365*t765;
  t5779 = t5599 + t5637 + t5751 + t5758;
  t6480 = -0.4999*t382;
  t6495 = -1.*t382*t5279;
  t6501 = t73*t5334;
  t6538 = t6480 + t6495 + t6501;
  t5797 = t5744*t1410;
  t5807 = t5365*t1410;
  t5812 = t5419*t1474;
  t5827 = t5624*t1535;
  t5830 = t5797 + t5807 + t5812 + t5827;
  t5596 = 1.142857*t5432*t1612;
  t5781 = 1.142857*t5779*t1569;
  t5796 = 1.142857*t1205*t5516;
  t5870 = 1.142857*t1051*t5830;
  t5893 = t5596 + t5781 + t5796 + t5870;
  t6099 = t6097*t1410;
  t6127 = t6123*t1535;
  t6139 = t5952 + t6099 + t6101 + t6127;
  t6156 = -1.*t6123*t639;
  t6157 = -1.*t6097*t765;
  t6170 = t6156 + t6157 + t6158 + t6167;
  t6856 = -1.*t382*t6032;
  t6857 = -1.*t73*t6086;
  t6862 = t6856 + t6857;
  t6799 = 1.142857*t816*t5779;
  t6837 = 1.142857*t950*t5432;
  t6852 = t5419*t888;
  t6855 = t5624*t639;
  t6866 = t5744*t765;
  t6873 = t5365*t765;
  t6246 = t1410*t6242;
  t6266 = t1535*t6263;
  t6274 = t5952 + t6101 + t6246 + t6266;
  t6912 = 1.142857*t5516*t3348;
  t6914 = 1.142857*t5830*t2530;
  t6302 = -1.*t765*t6242;
  t6315 = -1.*t639*t6263;
  t6319 = t6302 + t6315 + t6158 + t6167;
  t7119 = -1.*t382*t6209;
  t7124 = -1.*t73*t6232;
  t7127 = t7119 + t7124;
  t6947 = -1.*t5744*t2181;
  t6970 = -1.*t5365*t2181;
  t6981 = -1.*t5419*t3334;
  t6982 = -1.*t5624*t2239;
  t6151 = 1.142857*t1051*t6139;
  t6176 = 1.142857*t1569*t6170;
  t6199 = t5935 + t6151 + t6153 + t6176;
  t7289 = -0.9063*t277;
  t7297 = 0.06*t137*t226;
  t7304 = -1.*t277*t5269;
  t7319 = t7289 + t7297 + t7304;
  t7362 = t382*t7319;
  t7365 = t7362 + t6857;
  t7331 = t73*t7319;
  t7352 = t7331 + t6090;
  t6864 = t6862*t1410;
  t6865 = t6123*t1410;
  t6902 = t6097*t1474;
  t6906 = t6097*t1535;
  t6907 = t6852 + t6855 + t6864 + t6865 + t6866 + t6873 + t6902 + t6906;
  t6908 = 1.142857*t816*t6907;
  t6909 = 1.142857*t950*t6139;
  t6915 = 1.142857*t1761*t6170;
  t6918 = -1.*t6097*t888;
  t6919 = -1.*t6097*t639;
  t6925 = -1.*t6862*t765;
  t6944 = -1.*t6123*t765;
  t6992 = t6918 + t6919 + t6925 + t6944 + t6947 + t6970 + t6981 + t6982;
  t7037 = 1.142857*t1812*t6992;
  t7047 = t6799 + t6837 + t6908 + t6909 + t6912 + t6914 + t6915 + t7037;
  t7270 = 1.142857*t5516*t3577;
  t7283 = 1.142857*t5432*t2530;
  t7524 = 0.06*t277*t289;
  t7529 = t7297 + t7524;
  t7461 = t5419*t2181;
  t7464 = t5365*t2239;
  t7532 = t73*t7529;
  t7538 = t7532 + t6237;
  t7554 = t382*t7529;
  t7555 = t7554 + t7124;
  t7380 = -1.*t5365*t3545;
  t7397 = -1.*t5419*t3554;
  t7801 = -0.06*t137;
  t7805 = 0. + t7801;
  t7811 = t7805*t226;
  t7813 = t7811 + t6208;
  t7836 = t277*t7805;
  t7837 = t7836 + t6231;
  t7820 = -1.*t73*t7813;
  t7865 = t382*t7837;
  t7906 = t7820 + t7865;
  t7942 = t382*t7813;
  t7985 = t73*t7837;
  t8002 = t7942 + t7985;
  t7926 = t1410*t7906;
  t8057 = t1535*t8002;
  t8086 = t5952 + t6101 + t7926 + t8057;
  t8154 = -1.*t765*t7906;
  t8170 = -1.*t639*t8002;
  t8173 = t8154 + t8170 + t6158 + t6167;
  t8401 = -1.*t382*t7813;
  t8405 = -1.*t73*t7837;
  t8515 = t8401 + t8405;
  t7488 = 1.142857*t6139*t2530;
  t7491 = 1.142857*t816*t6170;
  t7497 = t6123*t639;
  t7505 = t6097*t765;
  t8712 = -1.*t7805*t226;
  t8720 = t8712 + t7524;
  t8723 = t73*t8720;
  t8730 = t8723 + t7865;
  t8734 = t382*t8720;
  t8735 = t8734 + t8405;
  t7635 = -1.*t6097*t2181;
  t7661 = -1.*t6123*t2239;
  t8696 = 1.142857*t8086*t2530;
  t7489 = 1.142857*t6274*t2530;
  t8705 = 1.142857*t816*t8173;
  t7492 = 1.142857*t816*t6319;
  t8709 = t765*t7906;
  t8739 = t639*t8002;
  t7515 = t765*t6242;
  t7540 = t1535*t7538;
  t7560 = t1410*t7555;
  t7561 = t639*t6263;
  t7619 = -1.*t639*t7538;
  t7624 = -1.*t765*t7555;
  t8751 = -1.*t7906*t2181;
  t7636 = -1.*t6242*t2181;
  t8752 = -1.*t8002*t2239;
  t7688 = -1.*t6263*t2239;
  t8801 = 1.142857*t816*t5432;
  t8809 = 1.142857*t5516*t2530;
  t8774 = 1.142857*t5432*t1569;
  t8775 = 1.142857*t1051*t5516;
  t8776 = t8774 + t8775;
  t8790 = 1.142857*t5432*t1761;
  t8791 = 1.142857*t5779*t1812;
  t8793 = 1.142857*t950*t5516;
  t8794 = 1.142857*t816*t5830;
  t8795 = t8790 + t8791 + t8793 + t8794;
  t8804 = 1.142857*t816*t6139;
  t8813 = 1.142857*t1812*t6170;
  t8818 = t8801 + t8804 + t8809 + t8813;
  t8821 = 1.142857*t816*t6274;
  t8826 = 1.142857*t1812*t6319;
  t8827 = t8801 + t8821 + t8809 + t8826;
  t8841 = t5334*t1385;
  t8846 = 0.4999*t393;
  t8847 = t5279*t393;
  t8848 = t8841 + t8846 + t8847;
  t8850 = -1.*t5279*t362;
  t8851 = 0.4999*t1385;
  t8852 = -1.*t5334*t393;
  t8854 = t8850 + t8851 + t8852;
  t8866 = 1.142857*t8854*t1051;
  t8868 = 0.4999*t362;
  t8871 = t5279*t362;
  t8877 = t5334*t393;
  t8883 = -1.*t5334*t362;
  t8888 = -1.*t5279*t2169;
  t8891 = 1.142857*t8848*t2282;
  t8849 = 1.142857*t8848*t1205;
  t8856 = 1.142857*t8854*t1612;
  t8858 = t8849 + t8856;
  t8874 = t6032*t1385;
  t8875 = t6086*t393;
  t8878 = t8868 + t8871 + t8874 + t8875 + t8877;
  t8882 = -1.*t6086*t362;
  t8884 = -1.*t6032*t393;
  t8889 = t8882 + t8883 + t8846 + t8884 + t8888;
  t8917 = 1.142857*t8854*t950;
  t8894 = t6209*t1385;
  t8896 = t393*t6232;
  t8897 = t8868 + t8871 + t8894 + t8877 + t8896;
  t8900 = -1.*t6209*t393;
  t8901 = -1.*t362*t6232;
  t8903 = t8883 + t8846 + t8900 + t8901 + t8888;
  t8921 = 1.142857*t8848*t3348;
  t8919 = 1.142857*t8878*t950;
  t8920 = 1.142857*t8889*t1761;
  t8923 = t8917 + t8919 + t8920 + t8921;
  t8881 = 1.142857*t8878*t1051;
  t8890 = 1.142857*t8889*t1569;
  t8892 = t8866 + t8881 + t8890 + t8891;
  t8939 = t5334*t362;
  t8945 = 0.4999*t2169;
  t8946 = t5279*t2169;
  t8952 = -1.*t5279*t1385;
  t8957 = -1.*t5334*t2169;
  t8964 = 1.142857*t8848*t3577;
  t8965 = 1.142857*t8854*t2530;
  t8997 = t7813*t1385;
  t8998 = t393*t7837;
  t8999 = t8868 + t8871 + t8997 + t8877 + t8998;
  t9002 = -1.*t7813*t393;
  t9003 = -1.*t362*t7837;
  t9004 = t8883 + t8846 + t9002 + t9003 + t8888;
  t8970 = 1.142857*t8889*t816;
  t8972 = t6086*t362;
  t8975 = t6032*t393;
  t8982 = -1.*t6032*t362;
  t8986 = -1.*t6086*t2169;
  t8991 = 1.142857*t8878*t2530;
  t9017 = 1.142857*t9004*t816;
  t8971 = 1.142857*t8903*t816;
  t9018 = t7813*t393;
  t8976 = t6209*t393;
  t8977 = t7529*t393;
  t9020 = t362*t7837;
  t8978 = t362*t6232;
  t8979 = t1385*t6232;
  t9024 = -1.*t362*t7813;
  t8983 = -1.*t362*t6209;
  t8984 = -1.*t362*t7529;
  t8985 = -1.*t393*t6232;
  t9027 = -1.*t7837*t2169;
  t8987 = -1.*t6232*t2169;
  t9031 = 1.142857*t8999*t2530;
  t8992 = 1.142857*t8897*t2530;
  t9058 = 1.142857*t8854*t816;
  t9061 = 1.142857*t8848*t2530;
  t9052 = 1.142857*t8848*t1051;
  t9055 = 1.142857*t8854*t1569;
  t9056 = t9052 + t9055;
  t9048 = 1.142857*t8848*t950;
  t9049 = 1.142857*t8854*t1761;
  t9050 = t9048 + t9049;
  t9059 = 1.142857*t8878*t816;
  t9060 = 1.142857*t8889*t1812;
  t9062 = t9058 + t9059 + t9060 + t9061;
  t9064 = 1.142857*t8897*t816;
  t9065 = 1.142857*t8903*t1812;
  t9067 = t9058 + t9064 + t9065 + t9061;
  t9075 = 0.9063*t137;
  t9076 = t137*t5269;
  t9077 = 0.06*t137*t289;
  t9078 = t9075 + t9076 + t9077;
  t9080 = Power(t137,2);
  t9081 = -0.06*t9080;
  t9082 = 0.9063*t289;
  t9083 = t5269*t289;
  t9084 = t9081 + t9082 + t9083;
  t9094 = 1.142857*t9084*t1051;
  t9095 = 1.142857*t9078*t2282;
  t9079 = 1.142857*t9078*t1205;
  t9085 = 1.142857*t9084*t1612;
  t9086 = t9079 + t9085;
  t9116 = 1.142857*t9084*t950;
  t9098 = -0.9063*t289;
  t9100 = -1.*t5269*t289;
  t9101 = Power(t289,2);
  t9102 = -0.06*t9101;
  t9104 = 0. + t9098 + t9100 + t9102;
  t9117 = 1.142857*t9078*t3348;
  t9118 = t9116 + t9117;
  t9096 = t9094 + t9095;
  t9130 = 1.142857*t9078*t3577;
  t9131 = 1.142857*t9084*t2530;
  t9141 = t7805*t137;
  t9142 = 0.06*t9080;
  t9143 = t9141 + t9142 + t9098 + t9100 + t9102;
  t9145 = t7805*t289;
  t9146 = 0.12*t137*t289;
  t9147 = t9075 + t9076 + t9145 + t9146;
  t9135 = 1.142857*t9078*t816;
  t9157 = 1.142857*t9147*t816;
  t9136 = 1.142857*t9104*t2530;
  t9158 = 1.142857*t9143*t2530;
  t9186 = 1.142857*t9084*t816;
  t9187 = 1.142857*t9078*t2530;
  t9182 = 1.142857*t9078*t1051;
  t9183 = 1.142857*t9084*t1569;
  t9184 = t9182 + t9183;
  t9176 = 1.142857*t9078*t950;
  t9177 = 1.142857*t9084*t1761;
  t9178 = t9176 + t9177;
  t9190 = t9186 + t9187;
  t9192 = 1.142857*t9104*t816;
  t9193 = 1.142857*t9078*t1812;
  t9194 = t9186 + t9192 + t9193 + t9187;
  t9217 = 0.03428571*var2[3]*t950;
  t9218 = 0.03428571*var2[2]*t1051;
  t9219 = 0.03428571*var2[4]*t2530;
  t9220 = 0.03428571*var2[5]*t2530;
  t9221 = t9217 + t9218 + t9219 + t9220;
  t9222 = var2[1]*t9221;
  t9230 = 0.03428571*var2[1]*t816;
  p_output1[0]=var2[1]*(-0.5*(3.428571*t1569*t1812 + 1.142857*t1340*t1921 + 1.142857*t1629*t2024 + 3.428571*t1051*t816)*var2[2] - 0.5*t1844*var2[3] - 0.5*t2564*var2[4] - 0.5*t2564*var2[5]);
  p_output1[1]=var2[1]*(-0.5*t1844*var2[2] - 0.5*(2.285714*t1479*t1761 + 1.142857*t1340*t2782 + 1.142857*t1812*(t1752 + t16*t3048) + 1.142857*t1629*t3084 + 1.142857*t816*(t16*t2746 + t898) + 2.285714*t1003*t950)*var2[3] - 0.5*t3471*var2[4] - 0.5*t3471*var2[5]);
  p_output1[2]=t3857;
  p_output1[3]=t3857;
  p_output1[4]=-0.5*t4025*var2[2] - 0.5*t3951*var2[3] - 0.5*t4081*var2[4] - 0.5*t4081*var2[5];
  p_output1[5]=-0.5*t4025*var2[1];
  p_output1[6]=-0.5*t3951*var2[1];
  p_output1[7]=t4151;
  p_output1[8]=t4151;
  p_output1[9]=var2[1]*(-0.5*(2.285714*Power(t1051,2) + 2.285714*Power(t1569,2) + 2.285714*t1812*t2024 + 2.285714*t1921*t816)*var2[2] - 0.5*t4200*var2[3] - 0.5*t4387*var2[4] - 0.5*t4387*var2[5]);
  p_output1[10]=var2[1]*(-0.5*t4200*var2[2] - 0.5*(2.285714*Power(t1761,2) + 2.285714*t1812*t3084 + 2.285714*t2782*t816 + 2.285714*Power(t950,2))*var2[3] - 0.5*t4647*var2[4] - 0.5*t4647*var2[5]);
  p_output1[11]=t4941;
  p_output1[12]=t4941;
  p_output1[13]=-0.5*t4996*var2[2] - 0.5*t4951*var2[3] - 0.5*t5022*var2[4] - 0.5*t5022*var2[5];
  p_output1[14]=-0.5*t4996*var2[1];
  p_output1[15]=-0.5*t4951*var2[1];
  p_output1[16]=t5129;
  p_output1[17]=t5129;
  p_output1[18]=var2[1]*(-0.5*(1.142857*t2024*t5432 + 1.142857*t1921*t5516)*var2[2] - 0.5*t5893*var2[3] - 0.5*t6199*var2[4] - 0.5*(t5935 + t6153 + 1.142857*t1051*t6274 + 1.142857*t1569*t6319)*var2[5]);
  p_output1[19]=var2[1]*(-0.5*t5893*var2[2] - 0.5*(1.142857*t3084*t5432 + 1.142857*t2782*t5516 + 2.285714*t1761*t5779 + 1.142857*(t1474*t5365 + t3048*t5419 + 2.*t1410*t5624 + 2.*t1474*t5744 + t1535*t5744 + t1410*t6538)*t816 + 1.142857*t1812*(-1.*t2746*t5419 - 1.*t5744*t639 - 2.*t5624*t765 - 1.*t6538*t765 - 1.*t5365*t888 - 2.*t5744*t888) + 2.285714*t5830*t950)*var2[3] - 0.5*t7047*var2[4] - 0.5*(1.142857*t1761*t6319 + t6799 + t6837 + t6912 + t6914 + 1.142857*(t1474*t6242 + t1535*t6242 + t1410*t6263 + t6852 + t6855 + t6866 + t6873 + t1410*t7127)*t816 + 1.142857*t1812*(-1.*t6242*t639 + t6947 + t6970 + t6981 + t6982 - 1.*t6263*t765 - 1.*t7127*t765 - 1.*t6242*t888) + 1.142857*t6274*t950)*var2[5]);
  p_output1[20]=var2[1]*(-0.5*t6199*var2[2] - 0.5*t7047*var2[3] - 0.5*(2.285714*t2530*t6139 + t7270 + t7283 + 1.142857*t1812*(-2.*t2181*t6097 - 2.*t2239*t6123 - 1.*t639*t7352 + t7380 + t7397 - 1.*t7365*t765) + 2.285714*t6170*t816 + 1.142857*(2.*t6123*t639 + t1535*t7352 + t1410*t7365 + t7461 + t7464 + 2.*t6097*t765)*t816)*var2[4] - 0.5*(t7270 + t7283 + t7488 + t7489 + t7491 + t7492 + 1.142857*t1812*(t7380 + t7397 + t7619 + t7624 + t7635 + t7636 + t7661 + t7688) + 1.142857*(t7461 + t7464 + t7497 + t7505 + t7515 + t7540 + t7560 + t7561)*t816)*var2[5]);
  p_output1[21]=var2[1]*(-0.5*(t5935 + t6153 + 1.142857*t1051*t8086 + 1.142857*t1569*t8173)*var2[2] - 0.5*(t6799 + t6837 + t6912 + t6914 + 1.142857*t1761*t8173 + 1.142857*t816*(t6852 + t6855 + t6866 + t6873 + t1474*t7906 + t1535*t7906 + t1410*t8002 + t1410*t8515) + 1.142857*t1812*(t6947 + t6970 + t6981 + t6982 - 1.*t639*t7906 - 1.*t765*t8002 - 1.*t765*t8515 - 1.*t7906*t888) + 1.142857*t8086*t950)*var2[3] - 0.5*(t7270 + t7283 + t7488 + t7491 + t8696 + t8705 + 1.142857*t816*(t7461 + t7464 + t7497 + t7505 + t8709 + t1535*t8730 + t1410*t8735 + t8739) + 1.142857*t1812*(t7380 + t7397 + t7635 + t7661 - 1.*t639*t8730 - 1.*t765*t8735 + t8751 + t8752))*var2[4] - 0.5*(t7270 + t7283 + t7489 + t7492 + t8696 + t8705 + 1.142857*t816*(t7461 + t7464 + t7515 + t7540 + t7560 + t7561 + t8709 + t8739) + 1.142857*t1812*(t7380 + t7397 + t7619 + t7624 + t7636 + t7688 + t8751 + t8752))*var2[5]);
  p_output1[22]=-0.5*t8776*var2[2] - 0.5*t8795*var2[3] - 0.5*t8818*var2[4] - 0.5*t8827*var2[5];
  p_output1[23]=-0.5*t8776*var2[1];
  p_output1[24]=-0.5*t8795*var2[1];
  p_output1[25]=-0.5*t8818*var2[1];
  p_output1[26]=-0.5*t8827*var2[1];
  p_output1[27]=var2[1]*(-0.5*(1.142857*t1921*t8848 + 1.142857*t2024*t8854)*var2[2] - 0.5*t8858*var2[3] - 0.5*t8892*var2[4] - 0.5*(t8866 + t8891 + 1.142857*t1051*t8897 + 1.142857*t1569*t8903)*var2[5]);
  p_output1[28]=var2[1]*(-0.5*t8858*var2[2] - 0.5*(1.142857*t2782*t8848 + 1.142857*t3084*t8854)*var2[3] - 0.5*t8923*var2[4] - 0.5*(1.142857*t1761*t8903 + t8917 + t8921 + 1.142857*t8897*t950)*var2[5]);
  p_output1[29]=var2[1]*(-0.5*t8892*var2[2] - 0.5*t8923*var2[3] - 0.5*(2.285714*t2530*t8878 + 2.285714*t816*t8889 + 1.142857*t816*(2.*t393*t6032 + t1385*t6086 + 2.*t362*t6086 + t393*t7319 + t8939 + t8945 + t8946) + 1.142857*t1812*(-2.*t362*t6032 - 2.*t2169*t6086 - 1.*t393*t6086 - 1.*t362*t7319 + t8868 + t8952 + t8957) + t8964 + t8965)*var2[4] - 0.5*(t8964 + t8965 + t8970 + t8971 + 1.142857*t816*(t8939 + t8945 + t8946 + t8972 + t8975 + t8976 + t8977 + t8978 + t8979) + 1.142857*t1812*(t8868 + t8952 + t8957 + t8982 + t8983 + t8984 + t8985 + t8986 + t8987) + t8991 + t8992)*var2[5]);
  p_output1[30]=var2[1]*(-0.5*(t8866 + t8891 + 1.142857*t1051*t8999 + 1.142857*t1569*t9004)*var2[2] - 0.5*(t8917 + t8921 + 1.142857*t1761*t9004 + 1.142857*t8999*t950)*var2[3] - 0.5*(t8964 + t8965 + t8970 + t8991 + t9017 + 1.142857*t816*(t1385*t7837 + t393*t8720 + t8939 + t8945 + t8946 + t8972 + t8975 + t9018 + t9020) + 1.142857*t1812*(-1.*t393*t7837 - 1.*t362*t8720 + t8868 + t8952 + t8957 + t8982 + t8986 + t9024 + t9027) + t9031)*var2[4] - 0.5*(t8964 + t8965 + t8971 + t8992 + t9017 + 1.142857*t816*(t8939 + t8945 + t8946 + t8976 + t8977 + t8978 + t8979 + t9018 + t9020) + 1.142857*t1812*(t8868 + t8952 + t8957 + t8983 + t8984 + t8985 + t8987 + t9024 + t9027) + t9031)*var2[5]);
  p_output1[31]=-0.5*t9056*var2[2] - 0.5*t9050*var2[3] - 0.5*t9062*var2[4] - 0.5*t9067*var2[5];
  p_output1[32]=-0.5*t9056*var2[1];
  p_output1[33]=-0.5*t9050*var2[1];
  p_output1[34]=-0.5*t9062*var2[1];
  p_output1[35]=-0.5*t9067*var2[1];
  p_output1[36]=var2[1]*(-0.5*(1.142857*t1921*t9078 + 1.142857*t2024*t9084)*var2[2] - 0.5*t9086*var2[3] - 0.5*t9096*var2[4] - 0.5*(1.142857*t1569*t9078 + t9094 + t9095 + 1.142857*t1051*t9104)*var2[5]);
  p_output1[37]=var2[1]*(-0.5*t9086*var2[2] - 0.5*(1.142857*t2782*t9078 + 1.142857*t3084*t9084)*var2[3] - 0.5*t9118*var2[4] - 0.5*(1.142857*t1761*t9078 + t9116 + t9117 + 1.142857*t9104*t950)*var2[5]);
  p_output1[38]=var2[1]*(-0.5*t9096*var2[2] - 0.5*t9118*var2[3] - 0.5*(t9130 + t9131)*var2[4] - 0.5*(t9130 + t9131 + t9135 + t9136)*var2[5]);
  p_output1[39]=var2[1]*(-0.5*(t9094 + t9095 + 1.142857*t1051*t9143 + 1.142857*t1569*t9147)*var2[2] - 0.5*(t9116 + t9117 + 1.142857*t1761*t9147 + 1.142857*t9143*t950)*var2[3] - 0.5*(t9130 + t9131 + t9157 + t9158)*var2[4] - 0.5*(1.142857*(-0.9063*t137 - 0.12*t137*t289 - 1.*t137*t5269 - 1.*t289*t7805)*t816 + t9130 + t9131 + t9135 + t9136 + 1.142857*t1812*t9143 + t9157 + t9158)*var2[5]);
  p_output1[40]=-0.5*t9184*var2[2] - 0.5*t9178*var2[3] - 0.5*t9190*var2[4] - 0.5*t9194*var2[5];
  p_output1[41]=-0.5*t9184*var2[1];
  p_output1[42]=-0.5*t9178*var2[1];
  p_output1[43]=-0.5*t9190*var2[1];
  p_output1[44]=-0.5*t9194*var2[1];
  p_output1[45]=var2[1]*(0.03428571*t2024*var2[2] + 0.03428571*t1612*var2[3] + 0.03428571*t1051*var2[4] + 0.03428571*t1051*var2[5]);
  p_output1[46]=var2[1]*(0.03428571*t1612*var2[2] + 0.03428571*t3084*var2[3] + 0.03428571*t950*var2[4] + 0.03428571*t950*var2[5]);
  p_output1[47]=t9222;
  p_output1[48]=t9222;
  p_output1[49]=0.03428571*t1569*var2[2] + 0.03428571*t1761*var2[3] + 0.03428571*t816*var2[4] + 0.03428571*t816*var2[5];
  p_output1[50]=0.03428571*t1569*var2[1];
  p_output1[51]=0.03428571*t1761*var2[1];
  p_output1[52]=t9230;
  p_output1[53]=t9230;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 9 && ncols == 1) && 
      !(mrows == 1 && ncols == 9))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 9 && ncols == 1) && 
      !(mrows == 1 && ncols == 9))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 54, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_Ce1_vec_L4_J2_amber3_feet.hh"

namespace RightSS1
{

void J_Ce1_vec_L4_J2_amber3_feet_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
