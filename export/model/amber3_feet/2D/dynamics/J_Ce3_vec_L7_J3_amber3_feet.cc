/*
 * Automatically Generated from Mathematica.
 * Wed 1 Mar 2023 13:29:25 GMT-08:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t34;
  double t120;
  double t202;
  double t213;
  double t320;
  double t334;
  double t348;
  double t400;
  double t404;
  double t473;
  double t487;
  double t585;
  double t122;
  double t168;
  double t190;
  double t305;
  double t544;
  double t548;
  double t595;
  double t627;
  double t679;
  double t721;
  double t763;
  double t777;
  double t786;
  double t800;
  double t810;
  double t832;
  double t865;
  double t1224;
  double t1259;
  double t1298;
  double t1390;
  double t793;
  double t897;
  double t1190;
  double t1133;
  double t1156;
  double t1165;
  double t923;
  double t966;
  double t976;
  double t1007;
  double t1105;
  double t1117;
  double t1347;
  double t1350;
  double t113;
  double t556;
  double t732;
  double t735;
  double t1393;
  double t1419;
  double t1422;
  double t922;
  double t1180;
  double t1186;
  double t1532;
  double t1536;
  double t1542;
  double t1626;
  double t1849;
  double t1864;
  double t1896;
  double t1670;
  double t1953;
  double t1954;
  double t1982;
  double t2005;
  double t1752;
  double t1788;
  double t1916;
  double t1929;
  double t1356;
  double t1906;
  double t1950;
  double t2041;
  double t2105;
  double t2113;
  double t1631;
  double t1644;
  double t1518;
  double t1666;
  double t1687;
  double t2278;
  double t2279;
  double t2306;
  double t2320;
  double t2326;
  double t2620;
  double t2635;
  double t2684;
  double t2687;
  double t2698;
  double t2711;
  double t2831;
  double t2832;
  double t2861;
  double t2761;
  double t2776;
  double t2782;
  double t2676;
  double t2732;
  double t2735;
  double t2929;
  double t2933;
  double t2942;
  double t2944;
  double t2235;
  double t2241;
  double t2242;
  double t2614;
  double t2741;
  double t2760;
  double t2793;
  double t2808;
  double t2155;
  double t2162;
  double t2171;
  double t3074;
  double t3086;
  double t3089;
  double t3110;
  double t3112;
  double t2597;
  double t3414;
  double t3425;
  double t3454;
  double t3463;
  double t3465;
  double t3486;
  double t3489;
  double t3496;
  double t2937;
  double t3014;
  double t3023;
  double t3050;
  double t3480;
  double t3501;
  double t3532;
  double t3546;
  double t3552;
  double t3559;
  double t3146;
  double t3537;
  double t3562;
  double t3574;
  double t3201;
  double t3213;
  double t3260;
  double t3269;
  double t3587;
  double t3593;
  double t3603;
  double t1665;
  double t1688;
  double t1689;
  double t3701;
  double t3707;
  double t3714;
  double t1795;
  double t1808;
  double t1838;
  double t2179;
  double t2195;
  double t2201;
  double t2231;
  double t2358;
  double t2361;
  double t2385;
  double t2389;
  double t2391;
  double t2400;
  double t2472;
  double t2477;
  double t2556;
  double t2559;
  double t2560;
  double t2563;
  double t2574;
  double t2580;
  double t2586;
  double t3849;
  double t3858;
  double t3863;
  double t3869;
  double t3884;
  double t3904;
  double t3937;
  double t3982;
  double t3991;
  double t4001;
  double t4042;
  double t4045;
  double t4046;
  double t4222;
  double t4245;
  double t4246;
  double t4287;
  double t4297;
  double t4300;
  double t4328;
  double t4332;
  double t4337;
  double t4118;
  double t4132;
  double t4167;
  double t4207;
  double t5307;
  double t5313;
  double t5322;
  double t4052;
  double t4055;
  double t4094;
  double t4099;
  double t4106;
  double t5277;
  double t5281;
  double t5326;
  double t5327;
  double t5334;
  double t5340;
  double t5361;
  double t5418;
  double t5424;
  double t5431;
  double t5444;
  double t4576;
  double t4569;
  double t4586;
  double t4605;
  double t5465;
  double t5477;
  double t5489;
  double t5495;
  double t5505;
  double t5516;
  double t5521;
  double t5528;
  double t5529;
  double t4421;
  double t4458;
  double t4533;
  double t4538;
  double t4813;
  double t4864;
  double t4872;
  double t4920;
  double t4923;
  double t4729;
  double t4731;
  double t4763;
  double t4786;
  double t4791;
  double t6060;
  double t6080;
  double t6092;
  double t6047;
  double t6056;
  double t6103;
  double t6111;
  double t6112;
  double t5553;
  double t5558;
  double t5648;
  double t5649;
  double t5677;
  double t6175;
  double t6186;
  double t6192;
  double t6194;
  double t6197;
  double t5843;
  double t5845;
  double t5875;
  double t5882;
  double t5888;
  double t5891;
  double t5902;
  double t5903;
  double t5904;
  double t5959;
  double t5971;
  double t6002;
  double t6004;
  double t6007;
  double t6009;
  double t6361;
  double t6364;
  double t6369;
  double t6370;
  double t6372;
  double t6412;
  double t6415;
  double t6422;
  double t6387;
  double t6399;
  double t6403;
  double t2821;
  double t3125;
  double t3127;
  double t3144;
  double t3149;
  double t3296;
  double t3306;
  double t3370;
  double t3408;
  double t3411;
  double t5450;
  double t5536;
  double t5540;
  double t5547;
  double t5549;
  double t5550;
  double t5554;
  double t5596;
  double t5604;
  double t5624;
  double t5670;
  double t5675;
  double t5680;
  double t5687;
  double t5692;
  double t5700;
  double t5704;
  double t5713;
  double t5733;
  double t5811;
  double t5823;
  double t5824;
  double t5834;
  double t5853;
  double t5864;
  double t5925;
  double t5928;
  double t5934;
  double t5951;
  double t5990;
  double t5995;
  double t6016;
  double t6025;
  double t6028;
  double t6040;
  double t6041;
  double t6042;
  double t6471;
  double t6492;
  double t6493;
  double t6496;
  double t6497;
  double t6501;
  double t6506;
  double t6507;
  double t6516;
  double t6523;
  double t6524;
  double t6530;
  double t6534;
  double t6538;
  double t6539;
  double t6568;
  double t6580;
  double t6591;
  double t6595;
  double t6599;
  double t6601;
  double t6606;
  double t6607;
  double t6610;
  double t6977;
  double t7000;
  double t7001;
  double t6139;
  double t6140;
  double t6141;
  double t6148;
  double t6150;
  double t6153;
  double t6165;
  double t6122;
  double t6125;
  double t6126;
  double t7020;
  double t7021;
  double t7023;
  double t7036;
  double t7022;
  double t7038;
  double t7039;
  double t7041;
  double t7042;
  double t7048;
  double t7053;
  double t6660;
  double t6670;
  double t6245;
  double t6248;
  double t6249;
  double t6726;
  double t6746;
  double t6747;
  double t6224;
  double t6235;
  double t6237;
  double t7068;
  double t7083;
  double t7085;
  double t7089;
  double t7090;
  double t7096;
  double t7098;
  double t6895;
  double t6900;
  double t6901;
  double t6906;
  double t6907;
  double t6855;
  double t6861;
  double t6862;
  double t6864;
  double t6866;
  double t7336;
  double t7337;
  double t7339;
  double t7340;
  double t7343;
  double t7373;
  double t7375;
  double t7377;
  double t7380;
  double t7381;
  double t7366;
  double t7370;
  double t7371;
  double t7422;
  double t7428;
  double t7427;
  double t7430;
  double t7432;
  double t7442;
  double t7443;
  double t7445;
  double t7440;
  double t7446;
  double t7455;
  double t7463;
  double t7465;
  double t7470;
  double t7489;
  double t7492;
  double t7494;
  double t7484;
  double t7485;
  double t7498;
  double t7499;
  double t7501;
  double t7525;
  double t7528;
  double t7532;
  double t7533;
  double t7534;
  double t7619;
  double t7517;
  double t7621;
  double t7624;
  double t7627;
  double t7629;
  double t7625;
  double t7630;
  double t7633;
  double t7634;
  double t7635;
  double t7109;
  double t7130;
  double t7556;
  double t7557;
  double t7560;
  double t7161;
  double t7163;
  double t7548;
  double t7551;
  double t7552;
  double t7642;
  double t7643;
  double t7644;
  double t7645;
  double t7646;
  double t7264;
  double t7266;
  double t7282;
  double t7299;
  double t7727;
  double t7110;
  double t7652;
  double t7656;
  double t7657;
  double t7136;
  double t7658;
  double t7170;
  double t7665;
  double t7668;
  double t7181;
  double t7669;
  double t7670;
  double t7748;
  double t7265;
  double t7707;
  double t7267;
  double t7708;
  double t7296;
  double t7715;
  double t7317;
  double t7716;
  double t7477;
  double t7479;
  double t7480;
  double t7787;
  double t7788;
  double t7789;
  double t7799;
  double t7800;
  double t7801;
  double t7802;
  double t7803;
  double t7793;
  double t7794;
  double t7795;
  double t7796;
  double t7797;
  t34 = Sin(var1[6]);
  t120 = Cos(var1[7]);
  t202 = Cos(var1[8]);
  t213 = Sin(var1[7]);
  t320 = -1.*t202;
  t334 = 1. + t320;
  t348 = -1.3127*t334;
  t400 = -1.3127*t202;
  t404 = Sin(var1[8]);
  t473 = -0.06*t404;
  t487 = t348 + t400 + t473;
  t585 = Cos(var1[6]);
  t122 = -1.*t120;
  t168 = 1. + t122;
  t190 = -0.9063*t168;
  t305 = -0.06*t202*t213;
  t544 = t120*t487;
  t548 = t190 + t305 + t544;
  t595 = 0.06*t120*t202;
  t627 = 0.9063*t213;
  t679 = t213*t487;
  t721 = t595 + t627 + t679;
  t763 = -1.*t202*t213;
  t777 = -1.*t120*t404;
  t786 = t763 + t777;
  t800 = t120*t202;
  t810 = -1.*t213*t404;
  t832 = t800 + t810;
  t865 = t585*t832;
  t1224 = t202*t213;
  t1259 = t120*t404;
  t1298 = t1224 + t1259;
  t1390 = Sin(var1[2]);
  t793 = t34*t786;
  t897 = t793 + t865;
  t1190 = Cos(var1[2]);
  t1133 = t585*t786;
  t1156 = -1.*t34*t832;
  t1165 = t1133 + t1156;
  t923 = -1.*t585;
  t966 = 1. + t923;
  t976 = -0.4999*t966;
  t1007 = t585*t548;
  t1105 = -1.*t34*t721;
  t1117 = t976 + t1007 + t1105;
  t1347 = -1.*t34*t1298;
  t1350 = t1347 + t865;
  t113 = 0.4999*t34;
  t556 = t34*t548;
  t732 = t585*t721;
  t735 = t113 + t556 + t732;
  t1393 = t585*t1298;
  t1419 = t34*t832;
  t1422 = t1393 + t1419;
  t922 = -1.*t735*t897;
  t1180 = -1.*t1117*t1165;
  t1186 = t922 + t1180;
  t1532 = t1117*t1350;
  t1536 = t735*t1422;
  t1542 = t1532 + t1536;
  t1626 = -1.*t1390*t1350;
  t1849 = -1.*t34*t786;
  t1864 = -1.*t585*t832;
  t1896 = t1849 + t1864;
  t1670 = -1.*t1390*t1165;
  t1953 = -0.4999*t34;
  t1954 = -1.*t34*t548;
  t1982 = -1.*t585*t721;
  t2005 = t1953 + t1954 + t1982;
  t1752 = -1.*t585*t1298;
  t1788 = t1752 + t1156;
  t1916 = 0.4999*t585;
  t1929 = t1916 + t1007 + t1105;
  t1356 = -1.*t1190*t1350;
  t1906 = -1.*t1117*t1896;
  t1950 = -1.*t1929*t897;
  t2041 = -1.*t2005*t1165;
  t2105 = -1.*t735*t1165;
  t2113 = t1906 + t1950 + t2041 + t2105;
  t1631 = -1.*t1190*t1422;
  t1644 = t1626 + t1631;
  t1518 = -1.*t1190*t1165;
  t1666 = -1.*t1190*t897;
  t1687 = t1666 + t1670;
  t2278 = t2005*t1350;
  t2279 = t735*t1350;
  t2306 = t1117*t1788;
  t2320 = t1929*t1422;
  t2326 = t2278 + t2279 + t2306 + t2320;
  t2620 = 0.9063*t120;
  t2635 = t2620 + t305 + t544;
  t2684 = -0.06*t120*t202;
  t2687 = -0.9063*t213;
  t2698 = -1.*t213*t487;
  t2711 = t2684 + t2687 + t2698;
  t2831 = -1.*t120*t202;
  t2832 = t213*t404;
  t2861 = t2831 + t2832;
  t2761 = t585*t2635;
  t2776 = t34*t2711;
  t2782 = t2761 + t2776;
  t2676 = -1.*t34*t2635;
  t2732 = t585*t2711;
  t2735 = t2676 + t2732;
  t2929 = t585*t2861;
  t2933 = t1849 + t2929;
  t2942 = t34*t2861;
  t2944 = t1133 + t2942;
  t2235 = -1.*t1390*t897;
  t2241 = t1190*t1165;
  t2242 = t2235 + t2241;
  t2614 = t735*t897;
  t2741 = t2735*t1350;
  t2760 = t1117*t1165;
  t2793 = t2782*t1422;
  t2808 = t2614 + t2741 + t2760 + t2793;
  t2155 = t1190*t1350;
  t2162 = -1.*t1390*t1422;
  t2171 = t2155 + t2162;
  t3074 = -1.*t2782*t897;
  t3086 = -1.*t2735*t1165;
  t3089 = -1.*t1117*t2933;
  t3110 = -1.*t735*t2944;
  t3112 = t3074 + t3086 + t3089 + t3110;
  t2597 = 1.142857*t1687*t1186;
  t3414 = -0.06*t202;
  t3425 = 0. + t3414;
  t3454 = t3425*t213;
  t3463 = -0.06*t120*t404;
  t3465 = t3454 + t3463;
  t3486 = t120*t3425;
  t3489 = 0.06*t213*t404;
  t3496 = t3486 + t3489;
  t2937 = -1.*t1390*t2933;
  t3014 = -1.*t1190*t2944;
  t3023 = t2937 + t3014;
  t3050 = 1.142857*t1542*t3023;
  t3480 = -1.*t34*t3465;
  t3501 = t585*t3496;
  t3532 = t3480 + t3501;
  t3546 = t585*t3465;
  t3552 = t34*t3496;
  t3559 = t3546 + t3552;
  t3146 = 1.142857*t2242*t1186;
  t3537 = t1350*t3532;
  t3562 = t1422*t3559;
  t3574 = t2614 + t2760 + t3537 + t3562;
  t3201 = t1190*t2933;
  t3213 = -1.*t1390*t2944;
  t3260 = t3201 + t3213;
  t3269 = 1.142857*t1542*t3260;
  t3587 = -1.*t1165*t3532;
  t3593 = -1.*t897*t3559;
  t3603 = t3587 + t3593 + t3089 + t3110;
  t1665 = 1.142857*t1186*t1644;
  t1688 = 1.142857*t1687*t1542;
  t1689 = t1665 + t1688;
  t3701 = 1.142857*t1186*t2171;
  t3707 = 1.142857*t2242*t1542;
  t3714 = t3701 + t3707;
  t1795 = t1190*t1788;
  t1808 = t1626 + t1795;
  t1838 = 1.142857*t1186*t1808;
  t2179 = 1.142857*t2113*t2171;
  t2195 = t1190*t1896;
  t2201 = t2195 + t1670;
  t2231 = 1.142857*t2201*t1542;
  t2358 = 1.142857*t2242*t2326;
  t2361 = t1838 + t2179 + t2231 + t2358;
  t2385 = 0.5*var2[0]*t2361;
  t2389 = -1.*t1390*t1788;
  t2391 = t1356 + t2389;
  t2400 = 1.142857*t1186*t2391;
  t2472 = 1.142857*t2113*t1644;
  t2477 = -1.*t1390*t1896;
  t2556 = t2477 + t1518;
  t2559 = 1.142857*t2556*t1542;
  t2560 = 1.142857*t1687*t2326;
  t2563 = t2400 + t2472 + t2559 + t2560;
  t2574 = 0.5*var2[1]*t2563;
  t2580 = t2385 + t2574;
  t2586 = var2[2]*t2580;
  t3849 = -2.*t2005*t1896;
  t3858 = -1.*t735*t1896;
  t3863 = -1.*t2005*t897;
  t3869 = -2.*t1929*t1165;
  t3884 = -0.4999*t585;
  t3904 = -1.*t585*t548;
  t3937 = t34*t721;
  t3982 = t3884 + t3904 + t3937;
  t3991 = -1.*t3982*t1165;
  t4001 = -1.*t585*t786;
  t4042 = t4001 + t1419;
  t4045 = -1.*t1117*t4042;
  t4046 = t3849 + t3858 + t3863 + t3869 + t3991 + t4045;
  t4222 = t34*t1298;
  t4245 = t4222 + t1864;
  t4246 = t1117*t4245;
  t4287 = 2.*t1929*t1350;
  t4297 = t3982*t1350;
  t4300 = 2.*t2005*t1788;
  t4328 = t735*t1788;
  t4332 = t2005*t1422;
  t4337 = t4246 + t4287 + t4297 + t4300 + t4328 + t4332;
  t4118 = 0.9063*t202;
  t4132 = t202*t487;
  t4167 = 0.06*t202*t404;
  t4207 = t4118 + t4132 + t4167;
  t5307 = -1.*t585*t2635;
  t5313 = -1.*t34*t2711;
  t5322 = t5307 + t5313;
  t4052 = Power(t202,2);
  t4055 = -0.06*t4052;
  t4094 = 0.9063*t404;
  t4099 = t487*t404;
  t4106 = t4055 + t4094 + t4099;
  t5277 = -1.*t2735*t1896;
  t5281 = -1.*t2735*t897;
  t5326 = -1.*t5322*t1165;
  t5327 = -1.*t2782*t1165;
  t5334 = -1.*t2005*t2933;
  t5340 = -1.*t735*t2933;
  t5361 = -1.*t34*t2861;
  t5418 = t4001 + t5361;
  t5424 = -1.*t1117*t5418;
  t5431 = -1.*t1929*t2944;
  t5444 = t5277 + t5281 + t5326 + t5327 + t5334 + t5340 + t5424 + t5431;
  t4576 = 0.4999*t832;
  t4569 = t721*t1298;
  t4586 = t548*t832;
  t4605 = t4569 + t4576 + t4586;
  t5465 = t1117*t1896;
  t5477 = t1929*t897;
  t5489 = t5322*t1350;
  t5495 = t2782*t1350;
  t5505 = t2005*t1165;
  t5516 = t735*t1165;
  t5521 = t2735*t1788;
  t5528 = t2735*t1422;
  t5529 = t5465 + t5477 + t5489 + t5495 + t5505 + t5516 + t5521 + t5528;
  t4421 = -1.*t548*t786;
  t4458 = 0.4999*t1298;
  t4533 = -1.*t721*t832;
  t4538 = t4421 + t4458 + t4533;
  t4813 = t1190*t897;
  t4864 = t1390*t1165;
  t4872 = t4813 + t4864;
  t4920 = t1390*t1896;
  t4923 = t4920 + t2241;
  t4729 = t1390*t1788;
  t4731 = t2155 + t4729;
  t4763 = t1390*t1350;
  t4786 = t1190*t1422;
  t4791 = t4763 + t4786;
  t6060 = -1.*t585*t3465;
  t6080 = -1.*t34*t3496;
  t6092 = t6060 + t6080;
  t6047 = -1.*t1896*t3532;
  t6056 = -1.*t897*t3532;
  t6103 = -1.*t1165*t6092;
  t6111 = -1.*t1165*t3559;
  t6112 = t6047 + t6056 + t6103 + t6111 + t5334 + t5340 + t5424 + t5431;
  t5553 = -1.*t721*t786;
  t5558 = -1.*t548*t2861;
  t5648 = 0.4999*t786;
  t5649 = t548*t786;
  t5677 = t721*t832;
  t6175 = t1788*t3532;
  t6186 = t1422*t3532;
  t6192 = t1350*t6092;
  t6194 = t1350*t3559;
  t6197 = t5465 + t5477 + t5505 + t5516 + t6175 + t6186 + t6192 + t6194;
  t5843 = 1.142857*t4872*t2113;
  t5845 = 1.142857*t4923*t1186;
  t5875 = t1390*t5418;
  t5882 = t3201 + t5875;
  t5888 = 1.142857*t1542*t5882;
  t5891 = t1390*t2933;
  t5902 = t1190*t2944;
  t5903 = t5891 + t5902;
  t5904 = 1.142857*t2326*t5903;
  t5959 = 1.142857*t2242*t2113;
  t5971 = 1.142857*t2201*t1186;
  t6002 = t1190*t5418;
  t6004 = t2937 + t6002;
  t6007 = 1.142857*t1542*t6004;
  t6009 = 1.142857*t2326*t3260;
  t6361 = 1.142857*t1186*t4731;
  t6364 = 1.142857*t2113*t4791;
  t6369 = 1.142857*t4923*t1542;
  t6370 = 1.142857*t4872*t2326;
  t6372 = t6361 + t6364 + t6369 + t6370;
  t6412 = 1.142857*t4538*t2113;
  t6415 = 1.142857*t4605*t2326;
  t6422 = t6412 + t6415;
  t6387 = 1.142857*t4106*t2113;
  t6399 = 1.142857*t4207*t2326;
  t6403 = t6387 + t6399;
  t2821 = 1.142857*t1687*t2808;
  t3125 = 1.142857*t1644*t3112;
  t3127 = t2597 + t2821 + t3050 + t3125;
  t3144 = 0.5*var2[1]*t3127;
  t3149 = 1.142857*t2242*t2808;
  t3296 = 1.142857*t2171*t3112;
  t3306 = t3146 + t3149 + t3269 + t3296;
  t3370 = 0.5*var2[0]*t3306;
  t3408 = t3144 + t3370;
  t3411 = var2[2]*t3408;
  t5450 = -0.03428571*var2[8]*t5444;
  t5536 = 1.142857*t4207*t5529;
  t5540 = 1.142857*t4106*t5444;
  t5547 = t5536 + t5540;
  t5549 = 0.5*var2[7]*t5547;
  t5550 = -1.*t2711*t786;
  t5554 = -1.*t2635*t832;
  t5596 = t5550 + t5553 + t4576 + t5554 + t5558;
  t5604 = 1.142857*t5596*t2113;
  t5624 = 1.142857*t4605*t5529;
  t5670 = t2635*t1298;
  t5675 = t2711*t832;
  t5680 = t5648 + t5649 + t5670 + t5675 + t5677;
  t5687 = 1.142857*t5680*t2326;
  t5692 = 1.142857*t4538*t5444;
  t5700 = t5604 + t5624 + t5687 + t5692;
  t5704 = 0.5*var2[6]*t5700;
  t5713 = 2.285714*t5529*t1542;
  t5733 = 2.285714*t2808*t2326;
  t5811 = 2.285714*t2113*t3112;
  t5823 = 2.285714*t1186*t5444;
  t5824 = t5713 + t5733 + t5811 + t5823;
  t5834 = 0.5*var2[2]*t5824;
  t5853 = 1.142857*t4872*t5529;
  t5864 = 1.142857*t4923*t2808;
  t5925 = 1.142857*t4731*t3112;
  t5928 = 1.142857*t4791*t5444;
  t5934 = t5843 + t5845 + t5853 + t5864 + t5888 + t5904 + t5925 + t5928;
  t5951 = 0.5*var2[0]*t5934;
  t5990 = 1.142857*t2242*t5529;
  t5995 = 1.142857*t2201*t2808;
  t6016 = 1.142857*t1808*t3112;
  t6025 = 1.142857*t2171*t5444;
  t6028 = t5959 + t5971 + t5990 + t5995 + t6007 + t6009 + t6016 + t6025;
  t6040 = 0.5*var2[1]*t6028;
  t6041 = t5450 + t5549 + t5704 + t5834 + t5951 + t6040;
  t6042 = var2[2]*t6041;
  t6471 = -0.9063*t120;
  t6492 = 0.06*t202*t213;
  t6493 = -1.*t120*t487;
  t6496 = t6471 + t6492 + t6493;
  t6497 = t34*t6496;
  t6501 = t6497 + t2732;
  t6506 = -1.*t6501*t897;
  t6507 = t585*t6496;
  t6516 = t6507 + t5313;
  t6523 = -1.*t6516*t1165;
  t6524 = -2.*t2735*t2933;
  t6530 = t4222 + t2929;
  t6534 = -1.*t735*t6530;
  t6538 = t1393 + t5361;
  t6539 = -1.*t1117*t6538;
  t6568 = -2.*t2782*t2944;
  t6580 = t6506 + t6523 + t6524 + t6534 + t6539 + t6568;
  t6591 = 2.*t2782*t897;
  t6595 = t6516*t1350;
  t6599 = 2.*t2735*t1165;
  t6601 = t6501*t1422;
  t6606 = t1117*t2933;
  t6607 = t735*t2944;
  t6610 = t6591 + t6595 + t6599 + t6601 + t6606 + t6607;
  t6977 = -1.*t3425*t213;
  t7000 = 0.06*t120*t404;
  t7001 = t6977 + t7000;
  t6139 = t3425*t202;
  t6140 = 0.06*t4052;
  t6141 = -0.9063*t404;
  t6148 = -1.*t487*t404;
  t6150 = Power(t404,2);
  t6153 = -0.06*t6150;
  t6165 = t6139 + t6140 + t6141 + t6148 + t6153;
  t6122 = t3425*t404;
  t6125 = 0.12*t202*t404;
  t6126 = t4118 + t4132 + t6122 + t6125;
  t7020 = t34*t7001;
  t7021 = t7020 + t3501;
  t7023 = t585*t7001;
  t7036 = t7023 + t6080;
  t7022 = -1.*t897*t7021;
  t7038 = -1.*t1165*t7036;
  t7039 = -1.*t2735*t2933;
  t7041 = -1.*t3532*t2933;
  t7042 = -1.*t2782*t2944;
  t7048 = -1.*t3559*t2944;
  t7053 = t7022 + t7038 + t7039 + t7041 + t6534 + t6539 + t7042 + t7048;
  t6660 = -1.*t548*t1298;
  t6670 = -1.*t721*t2861;
  t6245 = t3465*t1298;
  t6248 = t832*t3496;
  t6249 = t5648 + t5649 + t6245 + t5677 + t6248;
  t6726 = t721*t786;
  t6746 = 0.4999*t2861;
  t6747 = t548*t2861;
  t6224 = -1.*t3465*t832;
  t6235 = -1.*t786*t3496;
  t6237 = t5553 + t4576 + t6224 + t6235 + t5558;
  t7068 = t2782*t897;
  t7083 = t2735*t1165;
  t7085 = t1165*t3532;
  t7089 = t1422*t7021;
  t7090 = t1350*t7036;
  t7096 = t897*t3559;
  t7098 = t7068 + t7083 + t7085 + t7089 + t7090 + t7096 + t6606 + t6607;
  t6895 = t1190*t6530;
  t6900 = t1390*t6538;
  t6901 = t6895 + t6900;
  t6906 = 1.142857*t1542*t6901;
  t6907 = 1.142857*t1186*t5903;
  t6855 = -1.*t1390*t6530;
  t6861 = t1190*t6538;
  t6862 = t6855 + t6861;
  t6864 = 1.142857*t1542*t6862;
  t6866 = 1.142857*t1186*t3260;
  t7336 = 1.142857*t4872*t1186;
  t7337 = 1.142857*t4872*t2808;
  t7339 = 1.142857*t1542*t5903;
  t7340 = 1.142857*t4791*t3112;
  t7343 = t7336 + t7337 + t7339 + t7340;
  t7373 = 1.142857*t5596*t1186;
  t7375 = 1.142857*t4605*t2808;
  t7377 = 1.142857*t5680*t1542;
  t7380 = 1.142857*t4538*t3112;
  t7381 = t7373 + t7375 + t7377 + t7380;
  t7366 = 1.142857*t4207*t2808;
  t7370 = 1.142857*t4106*t3112;
  t7371 = t7366 + t7370;
  t7422 = t305 + t3463;
  t7428 = t2684 + t3489;
  t7427 = -1.*t34*t7422;
  t7430 = t585*t7428;
  t7432 = t7427 + t7430;
  t7442 = t585*t7422;
  t7443 = t34*t7428;
  t7445 = t7442 + t7443;
  t7440 = t1350*t7432;
  t7446 = t1422*t7445;
  t7455 = t2614 + t2760 + t7440 + t7446;
  t7463 = -1.*t1165*t7432;
  t7465 = -1.*t897*t7445;
  t7470 = t7463 + t7465 + t3089 + t3110;
  t7489 = -1.*t585*t7422;
  t7492 = -1.*t34*t7428;
  t7494 = t7489 + t7492;
  t7484 = -1.*t1896*t7432;
  t7485 = -1.*t897*t7432;
  t7498 = -1.*t1165*t7494;
  t7499 = -1.*t1165*t7445;
  t7501 = t7484 + t7485 + t7498 + t7499 + t5334 + t5340 + t5424 + t5431;
  t7525 = t1788*t7432;
  t7528 = t1422*t7432;
  t7532 = t1350*t7494;
  t7533 = t1350*t7445;
  t7534 = t5465 + t5477 + t5505 + t5516 + t7525 + t7528 + t7532 + t7533;
  t7619 = t6492 + t7000;
  t7517 = 0. + t6141 + t6148 + t6153;
  t7621 = t34*t7619;
  t7624 = t7621 + t7430;
  t7627 = t585*t7619;
  t7629 = t7627 + t7492;
  t7625 = -1.*t897*t7624;
  t7630 = -1.*t1165*t7629;
  t7633 = -1.*t7432*t2933;
  t7634 = -1.*t7445*t2944;
  t7635 = t7625 + t7630 + t7039 + t7633 + t6534 + t6539 + t7042 + t7634;
  t7109 = -1.*t2635*t786;
  t7130 = -1.*t2711*t2861;
  t7556 = t7422*t1298;
  t7557 = t832*t7428;
  t7560 = t5648 + t5649 + t7556 + t5677 + t7557;
  t7161 = t2711*t786;
  t7163 = t2635*t832;
  t7548 = -1.*t7422*t832;
  t7551 = -1.*t786*t7428;
  t7552 = t5553 + t4576 + t7548 + t7551 + t5558;
  t7642 = t1165*t7432;
  t7643 = t1422*t7624;
  t7644 = t1350*t7629;
  t7645 = t897*t7445;
  t7646 = t7068 + t7083 + t7642 + t7643 + t7644 + t7645 + t6606 + t6607;
  t7264 = 1.142857*t2808*t5903;
  t7266 = 1.142857*t4872*t3112;
  t7282 = 1.142857*t2808*t3260;
  t7299 = 1.142857*t2242*t3112;
  t7727 = t7625 + t7630 + t7041 + t7633 + t6534 + t6539 + t7048 + t7634;
  t7110 = -1.*t786*t3465;
  t7652 = -1.*t786*t7422;
  t7656 = -1.*t786*t7619;
  t7657 = -1.*t832*t7428;
  t7136 = -1.*t3496*t2861;
  t7658 = -1.*t7428*t2861;
  t7170 = t3465*t832;
  t7665 = t7422*t832;
  t7668 = t7619*t832;
  t7181 = t786*t3496;
  t7669 = t786*t7428;
  t7670 = t1298*t7428;
  t7748 = t7085 + t7096 + t7642 + t7643 + t7644 + t7645 + t6606 + t6607;
  t7265 = 1.142857*t3574*t5903;
  t7707 = 1.142857*t7455*t5903;
  t7267 = 1.142857*t4872*t3603;
  t7708 = 1.142857*t4872*t7470;
  t7296 = 1.142857*t3574*t3260;
  t7715 = 1.142857*t7455*t3260;
  t7317 = 1.142857*t2242*t3603;
  t7716 = 1.142857*t2242*t7470;
  t7477 = 1.142857*t2242*t7455;
  t7479 = 1.142857*t2171*t7470;
  t7480 = t3146 + t7477 + t3269 + t7479;
  t7787 = 1.142857*t4872*t7455;
  t7788 = 1.142857*t4791*t7470;
  t7789 = t7336 + t7787 + t7339 + t7788;
  t7799 = 1.142857*t7552*t1186;
  t7800 = 1.142857*t7560*t1542;
  t7801 = 1.142857*t4605*t7455;
  t7802 = 1.142857*t4538*t7470;
  t7803 = t7799 + t7800 + t7801 + t7802;
  t7793 = 1.142857*t4207*t1186;
  t7794 = 1.142857*t7517*t1542;
  t7795 = 1.142857*t4207*t7455;
  t7796 = 1.142857*t4106*t7470;
  t7797 = t7793 + t7794 + t7795 + t7796;
  p_output1[0]=(0.5*t1689*var2[0] + 0.5*(1.142857*t1186*(t1356 + t1390*t1422) + 1.142857*t1542*(t1518 + t1390*t897))*var2[1])*var2[2];
  p_output1[1]=t2586;
  p_output1[2]=t3411;
  p_output1[3]=(0.5*(t3146 + t3269 + 1.142857*t2242*t3574 + 1.142857*t2171*t3603)*var2[0] + 0.5*(t2597 + t3050 + 1.142857*t1687*t3574 + 1.142857*t1644*t3603)*var2[1])*var2[2];
  p_output1[4]=0.5*t3714*var2[2];
  p_output1[5]=0.5*t1689*var2[2];
  p_output1[6]=0.5*t3714*var2[0] + 0.5*t1689*var2[1];
  p_output1[7]=t2586;
  p_output1[8]=var2[2]*(0.5*(1.142857*t1542*(t2195 + t1390*t4042) + 1.142857*t1186*(t1795 + t1390*t4245) + 2.285714*t2113*t4731 + 1.142857*t4046*t4791 + 1.142857*t4337*t4872 + 2.285714*t2326*t4923)*var2[0] + 0.5*(2.285714*t1808*t2113 + 2.285714*t2201*t2326 + 1.142857*t1542*(t2477 + t1190*t4042) + 1.142857*t2171*t4046 + 1.142857*t1186*(t2389 + t1190*t4245) + 1.142857*t2242*t4337)*var2[1] + 0.5*(2.285714*Power(t2113,2) + 2.285714*Power(t2326,2) + 2.285714*t1186*t4046 + 2.285714*t1542*t4337)*var2[2] + 0.5*(1.142857*t4046*t4538 + 1.142857*t4337*t4605)*var2[6] + 0.5*(1.142857*t4046*t4106 + 1.142857*t4207*t4337)*var2[7] - 0.03428571*t4046*var2[8]);
  p_output1[9]=t6042;
  p_output1[10]=var2[2]*(0.5*(1.142857*t3603*t4731 + 1.142857*t3574*t4923 + t5843 + t5845 + t5888 + t5904 + 1.142857*t4791*t6112 + 1.142857*t4872*t6197)*var2[0] + 0.5*(1.142857*t2201*t3574 + 1.142857*t1808*t3603 + t5959 + t5971 + t6007 + t6009 + 1.142857*t2171*t6112 + 1.142857*t2242*t6197)*var2[1] + 0.5*(2.285714*t2326*t3574 + 2.285714*t2113*t3603 + 2.285714*t1186*t6112 + 2.285714*t1542*t6197)*var2[2] + 0.5*(1.142857*t4538*t6112 + 1.142857*t4605*t6197 + 1.142857*t2113*t6237 + 1.142857*t2326*t6249)*var2[6] + 0.5*(1.142857*t4106*t6112 + 1.142857*t2113*t6126 + 1.142857*t2326*t6165 + 1.142857*t4207*t6197)*var2[7] - 0.03428571*t6112*var2[8]);
  p_output1[11]=0.5*t6372*var2[2];
  p_output1[12]=0.5*t2361*var2[2];
  p_output1[13]=0.5*t6372*var2[0] + 0.5*t2361*var2[1] + (2.285714*t1186*t2113 + 2.285714*t1542*t2326)*var2[2] + 0.5*t6422*var2[6] + 0.5*t6403*var2[7] - 0.03428571*t2113*var2[8];
  p_output1[14]=0.5*t6422*var2[2];
  p_output1[15]=0.5*t6403*var2[2];
  p_output1[16]=-0.03428571*t2113*var2[2];
  p_output1[17]=t3411;
  p_output1[18]=t6042;
  p_output1[19]=var2[2]*(0.5*(2.285714*t3112*t4872 + 2.285714*t2808*t5903 + 1.142857*t4791*t6580 + 1.142857*t4872*t6610 + t6906 + t6907)*var2[0] + 0.5*(2.285714*t2242*t3112 + 2.285714*t2808*t3260 + 1.142857*t2171*t6580 + 1.142857*t2242*t6610 + t6864 + t6866)*var2[1] + 0.5*(2.285714*Power(t2808,2) + 2.285714*Power(t3112,2) + 2.285714*t1186*t6580 + 2.285714*t1542*t6610)*var2[2] + 0.5*(2.285714*t3112*t5596 + 2.285714*t2808*t5680 + 1.142857*t4538*t6580 + 1.142857*t4605*t6610 + 1.142857*t1186*(-2.*t2711*t2861 + t5648 + t6660 + t6670 - 2.*t2635*t786 - 1.*t6496*t786 - 1.*t2711*t832) + 1.142857*t1542*(t1298*t2711 + t6726 + t6746 + t6747 + 2.*t2711*t786 + 2.*t2635*t832 + t6496*t832))*var2[6] + 0.5*(1.142857*t4106*t6580 + 1.142857*t4207*t6610)*var2[7] - 0.03428571*t6580*var2[8]);
  p_output1[20]=var2[2]*(0.5*(t6906 + t6907 + 1.142857*t4791*t7053 + 1.142857*t4872*t7098 + t7264 + t7265 + t7266 + t7267)*var2[0] + 0.5*(t6864 + t6866 + 1.142857*t2171*t7053 + 1.142857*t2242*t7098 + t7282 + t7296 + t7299 + t7317)*var2[1] + 0.5*(2.285714*t2808*t3574 + 2.285714*t3112*t3603 + 2.285714*t1186*t7053 + 2.285714*t1542*t7098)*var2[2] + 0.5*(1.142857*t3603*t5596 + 1.142857*t3574*t5680 + 1.142857*t3112*t6237 + 1.142857*t2808*t6249 + 1.142857*t4538*t7053 + 1.142857*t4605*t7098 + 1.142857*t1186*(t5648 + t6660 + t6670 + t7109 + t7110 + t7130 + t7136 - 1.*t7001*t786 - 1.*t3496*t832) + 1.142857*t1542*(t1298*t3496 + t6726 + t6746 + t6747 + t7161 + t7163 + t7170 + t7181 + t7001*t832))*var2[6] + 0.5*(1.142857*t3112*t6126 + 1.142857*t2808*t6165 + 1.142857*t4106*t7053 + 1.142857*t4207*t7098)*var2[7] - 0.03428571*t7053*var2[8]);
  p_output1[21]=0.5*t7343*var2[2];
  p_output1[22]=0.5*t3306*var2[2];
  p_output1[23]=0.5*t7343*var2[0] + 0.5*t3306*var2[1] + (2.285714*t1542*t2808 + 2.285714*t1186*t3112)*var2[2] + 0.5*t7381*var2[6] + 0.5*t7371*var2[7] - 0.03428571*t3112*var2[8];
  p_output1[24]=0.5*t7381*var2[2];
  p_output1[25]=0.5*t7371*var2[2];
  p_output1[26]=-0.03428571*t3112*var2[2];
  p_output1[27]=(0.5*t7480*var2[0] + 0.5*(t2597 + t3050 + 1.142857*t1687*t7455 + 1.142857*t1644*t7470)*var2[1])*var2[2];
  p_output1[28]=var2[2]*(0.5*(t5843 + t5845 + t5888 + t5904 + 1.142857*t4923*t7455 + 1.142857*t4731*t7470 + 1.142857*t4791*t7501 + 1.142857*t4872*t7534)*var2[0] + 0.5*(t5959 + t5971 + t6007 + t6009 + 1.142857*t2201*t7455 + 1.142857*t1808*t7470 + 1.142857*t2171*t7501 + 1.142857*t2242*t7534)*var2[1] + 0.5*(2.285714*t2326*t7455 + 2.285714*t2113*t7470 + 2.285714*t1186*t7501 + 2.285714*t1542*t7534)*var2[2] + 0.5*(1.142857*t4538*t7501 + 1.142857*t4605*t7534 + 1.142857*t2113*t7552 + 1.142857*t2326*t7560)*var2[6] + 0.5*(1.142857*t2113*t4207 + 1.142857*t4106*t7501 + 1.142857*t2326*t7517 + 1.142857*t4207*t7534)*var2[7] - 0.03428571*t7501*var2[8]);
  p_output1[29]=var2[2]*(0.5*(t6906 + t6907 + t7264 + t7266 + 1.142857*t4791*t7635 + 1.142857*t4872*t7646 + t7707 + t7708)*var2[0] + 0.5*(t6864 + t6866 + t7282 + t7299 + 1.142857*t2171*t7635 + 1.142857*t2242*t7646 + t7715 + t7716)*var2[1] + 0.5*(2.285714*t2808*t7455 + 2.285714*t3112*t7470 + 2.285714*t1186*t7635 + 2.285714*t1542*t7646)*var2[2] + 0.5*(1.142857*t5680*t7455 + 1.142857*t5596*t7470 + 1.142857*t3112*t7552 + 1.142857*t2808*t7560 + 1.142857*t4538*t7635 + 1.142857*t4605*t7646 + 1.142857*t1186*(t5648 + t6660 + t6670 + t7109 + t7130 + t7652 + t7656 + t7657 + t7658) + 1.142857*t1542*(t6726 + t6746 + t6747 + t7161 + t7163 + t7665 + t7668 + t7669 + t7670))*var2[6] + 0.5*(1.142857*t3112*t4207 + 1.142857*t2808*t7517 + 1.142857*t4106*t7635 + 1.142857*t4207*t7646)*var2[7] - 0.03428571*t7635*var2[8]);
  p_output1[30]=var2[2]*(0.5*(t6906 + t6907 + t7265 + t7267 + t7707 + t7708 + 1.142857*t4791*t7727 + 1.142857*t4872*t7748)*var2[0] + 0.5*(t6864 + t6866 + t7296 + t7317 + t7715 + t7716 + 1.142857*t2171*t7727 + 1.142857*t2242*t7748)*var2[1] + 0.5*(2.285714*t3574*t7455 + 2.285714*t3603*t7470 + 2.285714*t1186*t7727 + 2.285714*t1542*t7748)*var2[2] + 0.5*(1.142857*t6249*t7455 + 1.142857*t6237*t7470 + 1.142857*t3603*t7552 + 1.142857*t3574*t7560 + 1.142857*t1186*(t5648 + t6660 + t6670 + t7110 + t7136 + t7652 + t7656 + t7657 + t7658) + 1.142857*t1542*(t6726 + t6746 + t6747 + t7170 + t7181 + t7665 + t7668 + t7669 + t7670) + 1.142857*t4538*t7727 + 1.142857*t4605*t7748)*var2[6] + 0.5*(1.142857*t3603*t4207 + 1.142857*t1542*(-0.9063*t202 - 0.12*t202*t404 - 1.*t3425*t404 - 1.*t202*t487) + 1.142857*t1186*t6165 + 1.142857*t6165*t7455 + 1.142857*t6126*t7470 + 1.142857*t3574*t7517 + 1.142857*t4106*t7727 + 1.142857*t4207*t7748)*var2[7] - 0.03428571*t7727*var2[8]);
  p_output1[31]=0.5*t7789*var2[2];
  p_output1[32]=0.5*t7480*var2[2];
  p_output1[33]=0.5*t7789*var2[0] + 0.5*t7480*var2[1] + (2.285714*t1542*t7455 + 2.285714*t1186*t7470)*var2[2] + 0.5*t7803*var2[6] + 0.5*t7797*var2[7] - 0.03428571*t7470*var2[8];
  p_output1[34]=0.5*t7803*var2[2];
  p_output1[35]=0.5*t7797*var2[2];
  p_output1[36]=-0.03428571*t7470*var2[2];
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 9 && ncols == 1) && 
      !(mrows == 1 && ncols == 9))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 9 && ncols == 1) && 
      !(mrows == 1 && ncols == 9))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 37, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_Ce3_vec_L7_J3_amber3_feet.hh"

namespace RightSS1
{

void J_Ce3_vec_L7_J3_amber3_feet_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
