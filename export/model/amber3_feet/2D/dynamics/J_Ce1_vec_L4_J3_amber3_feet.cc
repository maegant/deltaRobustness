/*
 * Automatically Generated from Mathematica.
 * Wed 1 Mar 2023 13:24:49 GMT-08:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t20;
  double t80;
  double t283;
  double t284;
  double t369;
  double t384;
  double t406;
  double t463;
  double t485;
  double t486;
  double t491;
  double t598;
  double t158;
  double t180;
  double t186;
  double t331;
  double t509;
  double t532;
  double t630;
  double t640;
  double t654;
  double t658;
  double t757;
  double t777;
  double t816;
  double t898;
  double t916;
  double t917;
  double t950;
  double t1340;
  double t1353;
  double t1357;
  double t1425;
  double t857;
  double t981;
  double t1337;
  double t1180;
  double t1205;
  double t1238;
  double t1003;
  double t1051;
  double t1054;
  double t1083;
  double t1127;
  double t1128;
  double t1371;
  double t1383;
  double t68;
  double t596;
  double t713;
  double t738;
  double t1434;
  double t1453;
  double t1476;
  double t987;
  double t1241;
  double t1285;
  double t1421;
  double t1648;
  double t1663;
  double t1681;
  double t1508;
  double t1525;
  double t1545;
  double t1569;
  double t1812;
  double t1820;
  double t1863;
  double t1891;
  double t1593;
  double t1612;
  double t1752;
  double t1761;
  double t2057;
  double t2074;
  double t2083;
  double t2288;
  double t2304;
  double t2363;
  double t2384;
  double t2416;
  double t2445;
  double t2557;
  double t2567;
  double t2596;
  double t1970;
  double t1980;
  double t1988;
  double t2490;
  double t2501;
  double t2519;
  double t2310;
  double t2447;
  double t2464;
  double t2597;
  double t2598;
  double t2651;
  double t2654;
  double t2278;
  double t2282;
  double t2477;
  double t2878;
  double t2886;
  double t2899;
  double t2924;
  double t2619;
  double t2677;
  double t2678;
  double t2685;
  double t2887;
  double t2925;
  double t2943;
  double t2962;
  double t2979;
  double t2988;
  double t2753;
  double t2755;
  double t1619;
  double t1683;
  double t1786;
  double t1911;
  double t1921;
  double t1938;
  double t3104;
  double t3108;
  double t3230;
  double t3250;
  double t3252;
  double t3257;
  double t1999;
  double t3265;
  double t3277;
  double t2084;
  double t2090;
  double t2097;
  double t2155;
  double t2164;
  double t1623;
  double t1629;
  double t1998;
  double t2024;
  double t2031;
  double t2175;
  double t2231;
  double t3323;
  double t3331;
  double t3338;
  double t3509;
  double t3520;
  double t2467;
  double t2530;
  double t2538;
  double t3128;
  double t3129;
  double t2709;
  double t2748;
  double t2782;
  double t3302;
  double t3307;
  double t3315;
  double t3681;
  double t3686;
  double t3687;
  double t3857;
  double t3882;
  double t3577;
  double t3611;
  double t3668;
  double t3675;
  double t3724;
  double t3753;
  double t2959;
  double t2992;
  double t3043;
  double t3895;
  double t3915;
  double t3934;
  double t3935;
  double t3955;
  double t3959;
  double t3960;
  double t3061;
  double t3066;
  double t3069;
  double t4135;
  double t4142;
  double t4148;
  double t4024;
  double t4026;
  double t4038;
  double t4043;
  double t2543;
  double t2786;
  double t2826;
  double t4436;
  double t4440;
  double t4446;
  double t4470;
  double t4323;
  double t4328;
  double t4535;
  double t4540;
  double t4505;
  double t4508;
  double t3696;
  double t3721;
  double t3758;
  double t3768;
  double t3774;
  double t3803;
  double t3843;
  double t3970;
  double t3984;
  double t3995;
  double t4004;
  double t4017;
  double t4047;
  double t4068;
  double t4078;
  double t4325;
  double t4332;
  double t4339;
  double t4403;
  double t4410;
  double t4751;
  double t4758;
  double t4655;
  double t4663;
  double t4759;
  double t4760;
  double t4773;
  double t4776;
  double t4561;
  double t4586;
  double t4982;
  double t4985;
  double t4988;
  double t5002;
  double t5067;
  double t5089;
  double t5023;
  double t5095;
  double t5107;
  double t5203;
  double t5207;
  double t5212;
  double t5165;
  double t5239;
  double t5241;
  double t5271;
  double t5287;
  double t5302;
  double t5352;
  double t5353;
  double t5360;
  double t4709;
  double t4728;
  double t4741;
  double t4743;
  double t5546;
  double t5582;
  double t5583;
  double t5592;
  double t5614;
  double t5657;
  double t4834;
  double t4940;
  double t5504;
  double t4710;
  double t5516;
  double t4730;
  double t5518;
  double t5779;
  double t4746;
  double t4761;
  double t4782;
  double t4783;
  double t4825;
  double t4830;
  double t5807;
  double t4892;
  double t5812;
  double t4941;
  double t6151;
  double t6170;
  double t6101;
  double t6117;
  double t6119;
  double t6127;
  double t6133;
  double t6153;
  double t6176;
  double t6182;
  double t6208;
  double t6213;
  double t6231;
  double t6266;
  double t1479;
  double t1486;
  double t6349;
  double t1494;
  double t1509;
  double t6537;
  double t6549;
  double t6563;
  double t6613;
  double t6621;
  double t6438;
  double t3176;
  double t3180;
  double t3181;
  double t3190;
  double t3261;
  double t3293;
  double t3295;
  double t3345;
  double t3348;
  double t3429;
  double t3432;
  double t3437;
  double t3438;
  double t3440;
  double t6460;
  double t6451;
  double t6453;
  double t6457;
  double t6469;
  double t6472;
  double t6480;
  double t6501;
  double t6822;
  double t6837;
  double t4125;
  double t4127;
  double t4154;
  double t4159;
  double t4173;
  double t6855;
  double t6864;
  double t6865;
  double t6866;
  double t4208;
  double t4224;
  double t4246;
  double t4264;
  double t4271;
  double t6543;
  double t6629;
  double t6667;
  double t4512;
  double t4543;
  double t4544;
  double t4595;
  double t4605;
  double t4634;
  double t4650;
  double t4652;
  double t4654;
  double t4690;
  double t6838;
  double t6852;
  double t6873;
  double t6877;
  double t6879;
  double t6914;
  double t6915;
  double t6942;
  double t6978;
  double t6992;
  double t4792;
  double t4946;
  double t5343;
  double t5345;
  double t5402;
  double t5406;
  double t5432;
  double t5450;
  double t5458;
  double t5463;
  double t5467;
  double t5472;
  double t7125;
  double t7157;
  double t5596;
  double t5774;
  double t5781;
  double t5796;
  double t5797;
  double t5827;
  double t7263;
  double t7130;
  double t7265;
  double t7160;
  double t5898;
  double t5952;
  double t1490;
  double t1575;
  double t1578;
  double t2273;
  double t2858;
  double t3050;
  double t3075;
  double t3076;
  double t3083;
  double t3563;
  double t4322;
  double t7442;
  double t7447;
  double t7449;
  double t7450;
  double t7452;
  double t8131;
  double t8173;
  double t8270;
  double t8306;
  double t8307;
  double t8308;
  double t8516;
  double t8574;
  double t8590;
  double t8696;
  double t8695;
  double t8705;
  double t8709;
  double t8663;
  double t8671;
  double t8677;
  double t8681;
  double t8739;
  double t8743;
  double t8756;
  double t8757;
  double t8761;
  double t8758;
  double t8759;
  double t8762;
  double t8736;
  double t8742;
  double t8748;
  double t8749;
  double t8753;
  double t8763;
  double t8766;
  double t8768;
  double t8829;
  double t8835;
  double t8790;
  double t8791;
  double t8793;
  double t8847;
  double t8854;
  double t8856;
  double t8772;
  double t8774;
  double t8775;
  double t8875;
  double t8889;
  double t8927;
  double t8928;
  double t8929;
  double t8896;
  double t8897;
  double t8921;
  double t8924;
  double t8925;
  double t8941;
  double t8877;
  double t8878;
  double t8881;
  double t8947;
  double t8890;
  double t8954;
  double t8898;
  double t8903;
  double t8958;
  double t8904;
  double t8907;
  double t8997;
  double t8998;
  double t8999;
  double t9004;
  double t9007;
  double t9008;
  double t9009;
  double t9010;
  double t9014;
  double t9016;
  double t9017;
  double t9018;
  double t9019;
  double t9040;
  double t9041;
  double t9042;
  double t9043;
  double t9026;
  double t9028;
  double t9029;
  double t9031;
  double t9032;
  double t9047;
  double t9048;
  double t9049;
  double t9055;
  double t9057;
  double t9058;
  double t9059;
  double t9060;
  double t9091;
  double t9092;
  double t9094;
  double t9085;
  double t9087;
  double t9088;
  double t9133;
  double t9134;
  double t9137;
  double t9139;
  double t9140;
  double t9141;
  double t9143;
  double t9144;
  double t9145;
  double t9146;
  double t9147;
  t20 = Sin(var1[3]);
  t80 = Cos(var1[4]);
  t283 = Cos(var1[5]);
  t284 = Sin(var1[4]);
  t369 = -1.*t283;
  t384 = 1. + t369;
  t406 = -1.3127*t384;
  t463 = -1.3127*t283;
  t485 = Sin(var1[5]);
  t486 = -0.06*t485;
  t491 = t406 + t463 + t486;
  t598 = Cos(var1[3]);
  t158 = -1.*t80;
  t180 = 1. + t158;
  t186 = -0.9063*t180;
  t331 = -0.06*t283*t284;
  t509 = t80*t491;
  t532 = t186 + t331 + t509;
  t630 = 0.06*t80*t283;
  t640 = 0.9063*t284;
  t654 = t284*t491;
  t658 = t630 + t640 + t654;
  t757 = -1.*t283*t284;
  t777 = -1.*t80*t485;
  t816 = t757 + t777;
  t898 = t80*t283;
  t916 = -1.*t284*t485;
  t917 = t898 + t916;
  t950 = t598*t917;
  t1340 = t283*t284;
  t1353 = t80*t485;
  t1357 = t1340 + t1353;
  t1425 = Cos(var1[2]);
  t857 = t20*t816;
  t981 = t857 + t950;
  t1337 = Sin(var1[2]);
  t1180 = t598*t816;
  t1205 = -1.*t20*t917;
  t1238 = t1180 + t1205;
  t1003 = -1.*t598;
  t1051 = 1. + t1003;
  t1054 = -0.4999*t1051;
  t1083 = t598*t532;
  t1127 = -1.*t20*t658;
  t1128 = t1054 + t1083 + t1127;
  t1371 = -1.*t20*t1357;
  t1383 = t1371 + t950;
  t68 = 0.4999*t20;
  t596 = t20*t532;
  t713 = t598*t658;
  t738 = t68 + t596 + t713;
  t1434 = t598*t1357;
  t1453 = t20*t917;
  t1476 = t1434 + t1453;
  t987 = -1.*t738*t981;
  t1241 = -1.*t1128*t1238;
  t1285 = t987 + t1241;
  t1421 = -1.*t1337*t1383;
  t1648 = -1.*t20*t816;
  t1663 = -1.*t598*t917;
  t1681 = t1648 + t1663;
  t1508 = -1.*t1337*t1238;
  t1525 = t1128*t1383;
  t1545 = t738*t1476;
  t1569 = t1525 + t1545;
  t1812 = -0.4999*t20;
  t1820 = -1.*t20*t532;
  t1863 = -1.*t598*t658;
  t1891 = t1812 + t1820 + t1863;
  t1593 = -1.*t598*t1357;
  t1612 = t1593 + t1205;
  t1752 = 0.4999*t598;
  t1761 = t1752 + t1083 + t1127;
  t2057 = -1.*t1337*t981;
  t2074 = t1425*t1238;
  t2083 = t2057 + t2074;
  t2288 = 0.9063*t80;
  t2304 = t2288 + t331 + t509;
  t2363 = -0.06*t80*t283;
  t2384 = -0.9063*t284;
  t2416 = -1.*t284*t491;
  t2445 = t2363 + t2384 + t2416;
  t2557 = -1.*t80*t283;
  t2567 = t284*t485;
  t2596 = t2557 + t2567;
  t1970 = t1425*t1383;
  t1980 = -1.*t1337*t1476;
  t1988 = t1970 + t1980;
  t2490 = t598*t2304;
  t2501 = t20*t2445;
  t2519 = t2490 + t2501;
  t2310 = -1.*t20*t2304;
  t2447 = t598*t2445;
  t2464 = t2310 + t2447;
  t2597 = t598*t2596;
  t2598 = t1648 + t2597;
  t2651 = t20*t2596;
  t2654 = t1180 + t2651;
  t2278 = 1.142857*t2083*t1285;
  t2282 = t738*t981;
  t2477 = t1128*t1238;
  t2878 = -0.06*t80*t485;
  t2886 = t331 + t2878;
  t2899 = 0.06*t284*t485;
  t2924 = t2363 + t2899;
  t2619 = t1425*t2598;
  t2677 = -1.*t1337*t2654;
  t2678 = t2619 + t2677;
  t2685 = 1.142857*t1569*t2678;
  t2887 = -1.*t20*t2886;
  t2925 = t598*t2924;
  t2943 = t2887 + t2925;
  t2962 = t598*t2886;
  t2979 = t20*t2924;
  t2988 = t2962 + t2979;
  t2753 = -1.*t1128*t2598;
  t2755 = -1.*t738*t2654;
  t1619 = t1425*t1612;
  t1683 = -1.*t1128*t1681;
  t1786 = -1.*t1761*t981;
  t1911 = -1.*t1891*t1238;
  t1921 = -1.*t738*t1238;
  t1938 = t1683 + t1786 + t1911 + t1921;
  t3104 = t20*t1357;
  t3108 = t3104 + t1663;
  t3230 = -0.4999*t598;
  t3250 = -1.*t598*t532;
  t3252 = t20*t658;
  t3257 = t3230 + t3250 + t3252;
  t1999 = t1425*t1681;
  t3265 = -1.*t598*t816;
  t3277 = t3265 + t1453;
  t2084 = t1891*t1383;
  t2090 = t738*t1383;
  t2097 = t1128*t1612;
  t2155 = t1761*t1476;
  t2164 = t2084 + t2090 + t2097 + t2155;
  t1623 = t1421 + t1619;
  t1629 = 1.142857*t1285*t1623;
  t1998 = 1.142857*t1938*t1988;
  t2024 = t1999 + t1508;
  t2031 = 1.142857*t2024*t1569;
  t2175 = 1.142857*t2083*t2164;
  t2231 = t1629 + t1998 + t2031 + t2175;
  t3323 = t1425*t981;
  t3331 = t1337*t1238;
  t3338 = t3323 + t3331;
  t3509 = t1337*t1681;
  t3520 = t3509 + t2074;
  t2467 = t2464*t1383;
  t2530 = t2519*t1476;
  t2538 = t2282 + t2467 + t2477 + t2530;
  t3128 = t1337*t1612;
  t3129 = t1970 + t3128;
  t2709 = -1.*t2519*t981;
  t2748 = -1.*t2464*t1238;
  t2782 = t2709 + t2748 + t2753 + t2755;
  t3302 = t1337*t1383;
  t3307 = t1425*t1476;
  t3315 = t3302 + t3307;
  t3681 = -1.*t598*t2304;
  t3686 = -1.*t20*t2445;
  t3687 = t3681 + t3686;
  t3857 = -1.*t20*t2596;
  t3882 = t3265 + t3857;
  t3577 = 1.142857*t3338*t1938;
  t3611 = 1.142857*t3520*t1285;
  t3668 = t1128*t1681;
  t3675 = t1761*t981;
  t3724 = t1891*t1238;
  t3753 = t738*t1238;
  t2959 = t1383*t2943;
  t2992 = t1476*t2988;
  t3043 = t2282 + t2477 + t2959 + t2992;
  t3895 = t1337*t3882;
  t3915 = t2619 + t3895;
  t3934 = 1.142857*t1569*t3915;
  t3935 = t1337*t2598;
  t3955 = t1425*t2654;
  t3959 = t3935 + t3955;
  t3960 = 1.142857*t2164*t3959;
  t3061 = -1.*t1238*t2943;
  t3066 = -1.*t981*t2988;
  t3069 = t3061 + t3066 + t2753 + t2755;
  t4135 = -1.*t598*t2886;
  t4142 = -1.*t20*t2924;
  t4148 = t4135 + t4142;
  t4024 = -1.*t1891*t2598;
  t4026 = -1.*t738*t2598;
  t4038 = -1.*t1128*t3882;
  t4043 = -1.*t1761*t2654;
  t2543 = 1.142857*t2083*t2538;
  t2786 = 1.142857*t1988*t2782;
  t2826 = t2278 + t2543 + t2685 + t2786;
  t4436 = -0.9063*t80;
  t4440 = 0.06*t283*t284;
  t4446 = -1.*t80*t491;
  t4470 = t4436 + t4440 + t4446;
  t4323 = t3104 + t2597;
  t4328 = t1434 + t3857;
  t4535 = t598*t4470;
  t4540 = t4535 + t3686;
  t4505 = t20*t4470;
  t4508 = t4505 + t2447;
  t3696 = t3687*t1383;
  t3721 = t2519*t1383;
  t3758 = t2464*t1612;
  t3768 = t2464*t1476;
  t3774 = t3668 + t3675 + t3696 + t3721 + t3724 + t3753 + t3758 + t3768;
  t3803 = 1.142857*t3338*t3774;
  t3843 = 1.142857*t3520*t2538;
  t3970 = 1.142857*t3129*t2782;
  t3984 = -1.*t2464*t1681;
  t3995 = -1.*t2464*t981;
  t4004 = -1.*t3687*t1238;
  t4017 = -1.*t2519*t1238;
  t4047 = t3984 + t3995 + t4004 + t4017 + t4024 + t4026 + t4038 + t4043;
  t4068 = 1.142857*t3315*t4047;
  t4078 = t3577 + t3611 + t3803 + t3843 + t3934 + t3960 + t3970 + t4068;
  t4325 = t1425*t4323;
  t4332 = t1337*t4328;
  t4339 = t4325 + t4332;
  t4403 = 1.142857*t1569*t4339;
  t4410 = 1.142857*t1285*t3959;
  t4751 = 0.06*t80*t485;
  t4758 = t4440 + t4751;
  t4655 = t1128*t2598;
  t4663 = t738*t2654;
  t4759 = t20*t4758;
  t4760 = t4759 + t2925;
  t4773 = t598*t4758;
  t4776 = t4773 + t4142;
  t4561 = -1.*t738*t4323;
  t4586 = -1.*t1128*t4328;
  t4982 = -0.06*t283;
  t4985 = 0. + t4982;
  t4988 = t4985*t284;
  t5002 = t4988 + t2878;
  t5067 = t80*t4985;
  t5089 = t5067 + t2899;
  t5023 = -1.*t20*t5002;
  t5095 = t598*t5089;
  t5107 = t5023 + t5095;
  t5203 = t598*t5002;
  t5207 = t20*t5089;
  t5212 = t5203 + t5207;
  t5165 = t1383*t5107;
  t5239 = t1476*t5212;
  t5241 = t2282 + t2477 + t5165 + t5239;
  t5271 = -1.*t1238*t5107;
  t5287 = -1.*t981*t5212;
  t5302 = t5271 + t5287 + t2753 + t2755;
  t5352 = -1.*t598*t5002;
  t5353 = -1.*t20*t5089;
  t5360 = t5352 + t5353;
  t4709 = 1.142857*t2538*t3959;
  t4728 = 1.142857*t3338*t2782;
  t4741 = t2519*t981;
  t4743 = t2464*t1238;
  t5546 = -1.*t4985*t284;
  t5582 = t5546 + t4751;
  t5583 = t20*t5582;
  t5592 = t5583 + t5095;
  t5614 = t598*t5582;
  t5657 = t5614 + t5353;
  t4834 = -1.*t2464*t2598;
  t4940 = -1.*t2519*t2654;
  t5504 = 1.142857*t5241*t3959;
  t4710 = 1.142857*t3043*t3959;
  t5516 = 1.142857*t3338*t5302;
  t4730 = 1.142857*t3338*t3069;
  t5518 = t1238*t5107;
  t5779 = t981*t5212;
  t4746 = t1238*t2943;
  t4761 = t1476*t4760;
  t4782 = t1383*t4776;
  t4783 = t981*t2988;
  t4825 = -1.*t981*t4760;
  t4830 = -1.*t1238*t4776;
  t5807 = -1.*t5107*t2598;
  t4892 = -1.*t2943*t2598;
  t5812 = -1.*t5212*t2654;
  t4941 = -1.*t2988*t2654;
  t6151 = 1.142857*t3338*t1285;
  t6170 = 1.142857*t1569*t3959;
  t6101 = 1.142857*t1285*t3129;
  t6117 = 1.142857*t1938*t3315;
  t6119 = 1.142857*t3520*t1569;
  t6127 = 1.142857*t3338*t2164;
  t6133 = t6101 + t6117 + t6119 + t6127;
  t6153 = 1.142857*t3338*t2538;
  t6176 = 1.142857*t3315*t2782;
  t6182 = t6151 + t6153 + t6170 + t6176;
  t6208 = 1.142857*t3338*t3043;
  t6213 = 1.142857*t3315*t3069;
  t6231 = t6151 + t6208 + t6170 + t6213;
  t6266 = -1.*t1425*t1383;
  t1479 = -1.*t1425*t1476;
  t1486 = t1421 + t1479;
  t6349 = -1.*t1425*t1238;
  t1494 = -1.*t1425*t981;
  t1509 = t1494 + t1508;
  t6537 = 1.142857*t1509*t1285;
  t6549 = -1.*t1337*t2598;
  t6563 = -1.*t1425*t2654;
  t6613 = t6549 + t6563;
  t6621 = 1.142857*t1569*t6613;
  t6438 = -1.*t1337*t1612;
  t3176 = -2.*t1891*t1681;
  t3180 = -1.*t738*t1681;
  t3181 = -1.*t1891*t981;
  t3190 = -2.*t1761*t1238;
  t3261 = -1.*t3257*t1238;
  t3293 = -1.*t1128*t3277;
  t3295 = t3176 + t3180 + t3181 + t3190 + t3261 + t3293;
  t3345 = t1128*t3108;
  t3348 = 2.*t1761*t1383;
  t3429 = t3257*t1383;
  t3432 = 2.*t1891*t1612;
  t3437 = t738*t1612;
  t3438 = t1891*t1476;
  t3440 = t3345 + t3348 + t3429 + t3432 + t3437 + t3438;
  t6460 = -1.*t1337*t1681;
  t6451 = t6266 + t6438;
  t6453 = 1.142857*t1285*t6451;
  t6457 = 1.142857*t1938*t1486;
  t6469 = t6460 + t6349;
  t6472 = 1.142857*t6469*t1569;
  t6480 = 1.142857*t1509*t2164;
  t6501 = t6453 + t6457 + t6472 + t6480;
  t6822 = 1.142857*t2083*t1938;
  t6837 = 1.142857*t2024*t1285;
  t4125 = t1612*t2943;
  t4127 = t1476*t2943;
  t4154 = t1383*t4148;
  t4159 = t1383*t2988;
  t4173 = t3668 + t3675 + t3724 + t3753 + t4125 + t4127 + t4154 + t4159;
  t6855 = t1425*t3882;
  t6864 = t6549 + t6855;
  t6865 = 1.142857*t1569*t6864;
  t6866 = 1.142857*t2164*t2678;
  t4208 = -1.*t1681*t2943;
  t4224 = -1.*t981*t2943;
  t4246 = -1.*t1238*t4148;
  t4264 = -1.*t1238*t2988;
  t4271 = t4208 + t4224 + t4246 + t4264 + t4024 + t4026 + t4038 + t4043;
  t6543 = 1.142857*t1509*t2538;
  t6629 = 1.142857*t1486*t2782;
  t6667 = t6537 + t6543 + t6621 + t6629;
  t4512 = -1.*t4508*t981;
  t4543 = -1.*t4540*t1238;
  t4544 = -2.*t2464*t2598;
  t4595 = -2.*t2519*t2654;
  t4605 = t4512 + t4543 + t4544 + t4561 + t4586 + t4595;
  t4634 = 2.*t2519*t981;
  t4650 = t4540*t1383;
  t4652 = 2.*t2464*t1238;
  t4654 = t4508*t1476;
  t4690 = t4634 + t4650 + t4652 + t4654 + t4655 + t4663;
  t6838 = 1.142857*t2083*t3774;
  t6852 = 1.142857*t2024*t2538;
  t6873 = 1.142857*t1623*t2782;
  t6877 = 1.142857*t1988*t4047;
  t6879 = t6822 + t6837 + t6838 + t6852 + t6865 + t6866 + t6873 + t6877;
  t6914 = -1.*t1337*t4323;
  t6915 = t1425*t4328;
  t6942 = t6914 + t6915;
  t6978 = 1.142857*t1569*t6942;
  t6992 = 1.142857*t1285*t2678;
  t4792 = t4741 + t4743 + t4746 + t4761 + t4782 + t4783 + t4655 + t4663;
  t4946 = t4825 + t4830 + t4834 + t4892 + t4561 + t4586 + t4940 + t4941;
  t5343 = t1612*t5107;
  t5345 = t1476*t5107;
  t5402 = t1383*t5360;
  t5406 = t1383*t5212;
  t5432 = t3668 + t3675 + t3724 + t3753 + t5343 + t5345 + t5402 + t5406;
  t5450 = -1.*t1681*t5107;
  t5458 = -1.*t981*t5107;
  t5463 = -1.*t1238*t5360;
  t5467 = -1.*t1238*t5212;
  t5472 = t5450 + t5458 + t5463 + t5467 + t4024 + t4026 + t4038 + t4043;
  t7125 = 1.142857*t2538*t2678;
  t7157 = 1.142857*t2083*t2782;
  t5596 = t1476*t5592;
  t5774 = t1383*t5657;
  t5781 = t4741 + t4743 + t5518 + t5596 + t5774 + t5779 + t4655 + t4663;
  t5796 = -1.*t981*t5592;
  t5797 = -1.*t1238*t5657;
  t5827 = t5796 + t5797 + t4834 + t5807 + t4561 + t4586 + t4940 + t5812;
  t7263 = 1.142857*t5241*t2678;
  t7130 = 1.142857*t3043*t2678;
  t7265 = 1.142857*t2083*t5302;
  t7160 = 1.142857*t2083*t3069;
  t5898 = t5518 + t5779 + t4746 + t4761 + t4782 + t4783 + t4655 + t4663;
  t5952 = t4825 + t4830 + t5807 + t4892 + t4561 + t4586 + t5812 + t4941;
  t1490 = 1.142857*t1285*t1486;
  t1575 = 1.142857*t1509*t1569;
  t1578 = t1490 + t1575;
  t2273 = -0.5*var2[3]*t2231;
  t2858 = -0.5*var2[4]*t2826;
  t3050 = 1.142857*t2083*t3043;
  t3075 = 1.142857*t1988*t3069;
  t3076 = t2278 + t3050 + t2685 + t3075;
  t3083 = -0.5*var2[5]*t3076;
  t3563 = -0.5*var2[2]*t2231;
  t4322 = -0.5*var2[2]*t2826;
  t7442 = 2.285714*t3774*t1569;
  t7447 = 2.285714*t2538*t2164;
  t7449 = 2.285714*t1938*t2782;
  t7450 = 2.285714*t1285*t4047;
  t7452 = t7442 + t7447 + t7449 + t7450;
  t8131 = 2.285714*t1938*t1285;
  t8173 = 2.285714*t1569*t2164;
  t8270 = t8131 + t8173;
  t8306 = 2.285714*t2538*t1569;
  t8307 = 2.285714*t1285*t2782;
  t8308 = t8306 + t8307;
  t8516 = 2.285714*t1569*t3043;
  t8574 = 2.285714*t1285*t3069;
  t8590 = t8516 + t8574;
  t8696 = 0.4999*t917;
  t8695 = t658*t1357;
  t8705 = t532*t917;
  t8709 = t8695 + t8696 + t8705;
  t8663 = -1.*t532*t816;
  t8671 = 0.4999*t1357;
  t8677 = -1.*t658*t917;
  t8681 = t8663 + t8671 + t8677;
  t8739 = -1.*t658*t816;
  t8743 = -1.*t532*t2596;
  t8756 = 0.4999*t816;
  t8757 = t532*t816;
  t8761 = t658*t917;
  t8758 = t2304*t1357;
  t8759 = t2445*t917;
  t8762 = t8756 + t8757 + t8758 + t8759 + t8761;
  t8736 = -1.*t2445*t816;
  t8742 = -1.*t2304*t917;
  t8748 = t8736 + t8739 + t8696 + t8742 + t8743;
  t8749 = 1.142857*t8748*t1938;
  t8753 = 1.142857*t8709*t3774;
  t8763 = 1.142857*t8762*t2164;
  t8766 = 1.142857*t8681*t4047;
  t8768 = t8749 + t8753 + t8763 + t8766;
  t8829 = -1.*t532*t1357;
  t8835 = -1.*t658*t2596;
  t8790 = t2886*t1357;
  t8791 = t917*t2924;
  t8793 = t8756 + t8757 + t8790 + t8761 + t8791;
  t8847 = t658*t816;
  t8854 = 0.4999*t2596;
  t8856 = t532*t2596;
  t8772 = -1.*t2886*t917;
  t8774 = -1.*t816*t2924;
  t8775 = t8739 + t8696 + t8772 + t8774 + t8743;
  t8875 = -1.*t2304*t816;
  t8889 = -1.*t2445*t2596;
  t8927 = t5002*t1357;
  t8928 = t917*t5089;
  t8929 = t8756 + t8757 + t8927 + t8761 + t8928;
  t8896 = t2445*t816;
  t8897 = t2304*t917;
  t8921 = -1.*t5002*t917;
  t8924 = -1.*t816*t5089;
  t8925 = t8739 + t8696 + t8921 + t8924 + t8743;
  t8941 = -1.*t816*t5002;
  t8877 = -1.*t816*t2886;
  t8878 = -1.*t816*t4758;
  t8881 = -1.*t917*t2924;
  t8947 = -1.*t5089*t2596;
  t8890 = -1.*t2924*t2596;
  t8954 = t5002*t917;
  t8898 = t2886*t917;
  t8903 = t4758*t917;
  t8958 = t816*t5089;
  t8904 = t816*t2924;
  t8907 = t1357*t2924;
  t8997 = 1.142857*t8681*t1938;
  t8998 = 1.142857*t8709*t2164;
  t8999 = t8997 + t8998;
  t9004 = 1.142857*t8748*t1285;
  t9007 = 1.142857*t8709*t2538;
  t9008 = 1.142857*t8762*t1569;
  t9009 = 1.142857*t8681*t2782;
  t9010 = t9004 + t9007 + t9008 + t9009;
  t9014 = 1.142857*t8775*t1285;
  t9016 = 1.142857*t8793*t1569;
  t9017 = 1.142857*t8709*t3043;
  t9018 = 1.142857*t8681*t3069;
  t9019 = t9014 + t9016 + t9017 + t9018;
  t9040 = 0.9063*t283;
  t9041 = t283*t491;
  t9042 = 0.06*t283*t485;
  t9043 = t9040 + t9041 + t9042;
  t9026 = Power(t283,2);
  t9028 = -0.06*t9026;
  t9029 = 0.9063*t485;
  t9031 = t491*t485;
  t9032 = t9028 + t9029 + t9031;
  t9047 = 1.142857*t9043*t3774;
  t9048 = 1.142857*t9032*t4047;
  t9049 = t9047 + t9048;
  t9055 = -0.9063*t485;
  t9057 = -1.*t491*t485;
  t9058 = Power(t485,2);
  t9059 = -0.06*t9058;
  t9060 = 0. + t9055 + t9057 + t9059;
  t9091 = t4985*t283;
  t9092 = 0.06*t9026;
  t9094 = t9091 + t9092 + t9055 + t9057 + t9059;
  t9085 = t4985*t485;
  t9087 = 0.12*t283*t485;
  t9088 = t9040 + t9041 + t9085 + t9087;
  t9133 = 1.142857*t9032*t1938;
  t9134 = 1.142857*t9043*t2164;
  t9137 = t9133 + t9134;
  t9139 = 1.142857*t9043*t2538;
  t9140 = 1.142857*t9032*t2782;
  t9141 = t9139 + t9140;
  t9143 = 1.142857*t9043*t1285;
  t9144 = 1.142857*t9060*t1569;
  t9145 = 1.142857*t9043*t3043;
  t9146 = 1.142857*t9032*t3069;
  t9147 = t9143 + t9144 + t9145 + t9146;
  p_output1[0]=var2[2]*(t2273 + t2858 + t3083 - 0.5*t1578*var2[2]);
  p_output1[1]=var2[2]*(t3563 - 0.5*(1.142857*t1285*(t1619 + t1337*t3108) + 2.285714*t1938*t3129 + 1.142857*t1569*(t1999 + t1337*t3277) + 1.142857*t3295*t3315 + 1.142857*t3338*t3440 + 2.285714*t2164*t3520)*var2[3] - 0.5*t4078*var2[4] - 0.5*(1.142857*t3069*t3129 + 1.142857*t3043*t3520 + t3577 + t3611 + t3934 + t3960 + 1.142857*t3338*t4173 + 1.142857*t3315*t4271)*var2[5]);
  p_output1[2]=var2[2]*(t4322 - 0.5*t4078*var2[3] - 0.5*(2.285714*t2782*t3338 + 2.285714*t2538*t3959 + t4403 + t4410 + 1.142857*t3315*t4605 + 1.142857*t3338*t4690)*var2[4] - 0.5*(t4403 + t4410 + t4709 + t4710 + t4728 + t4730 + 1.142857*t3338*t4792 + 1.142857*t3315*t4946)*var2[5]);
  p_output1[3]=var2[2]*(-0.5*(t2278 + t2685 + 1.142857*t2083*t5241 + 1.142857*t1988*t5302)*var2[2] - 0.5*(t3577 + t3611 + t3934 + t3960 + 1.142857*t3520*t5241 + 1.142857*t3129*t5302 + 1.142857*t3338*t5432 + 1.142857*t3315*t5472)*var2[3] - 0.5*(t4403 + t4410 + t4709 + t4728 + t5504 + t5516 + 1.142857*t3338*t5781 + 1.142857*t3315*t5827)*var2[4] - 0.5*(t4403 + t4410 + t4710 + t4730 + t5504 + t5516 + 1.142857*t3338*t5898 + 1.142857*t3315*t5952)*var2[5]);
  p_output1[4]=-1.*(1.142857*t1285*t1988 + 1.142857*t1569*t2083)*var2[2] - 0.5*t6133*var2[3] - 0.5*t6182*var2[4] - 0.5*t6231*var2[5];
  p_output1[5]=-0.5*t6133*var2[2];
  p_output1[6]=-0.5*t6182*var2[2];
  p_output1[7]=-0.5*t6231*var2[2];
  p_output1[8]=var2[2]*(-0.5*(1.142857*t1285*(t1337*t1476 + t6266) + 1.142857*t1569*(t6349 + t1337*t981))*var2[2] - 0.5*t6501*var2[3] - 0.5*t6667*var2[4] - 0.5*(1.142857*t1509*t3043 + 1.142857*t1486*t3069 + t6537 + t6621)*var2[5]);
  p_output1[9]=var2[2]*(-0.5*t6501*var2[2] - 0.5*(2.285714*t1623*t1938 + 2.285714*t2024*t2164 + 1.142857*t1988*t3295 + 1.142857*t2083*t3440 + 1.142857*t1285*(t1425*t3108 + t6438) + 1.142857*t1569*(t1425*t3277 + t6460))*var2[3] - 0.5*t6879*var2[4] - 0.5*(1.142857*t2024*t3043 + 1.142857*t1623*t3069 + 1.142857*t2083*t4173 + 1.142857*t1988*t4271 + t6822 + t6837 + t6865 + t6866)*var2[5]);
  p_output1[10]=var2[2]*(-0.5*t6667*var2[2] - 0.5*t6879*var2[3] - 0.5*(2.285714*t2538*t2678 + 2.285714*t2083*t2782 + 1.142857*t1988*t4605 + 1.142857*t2083*t4690 + t6978 + t6992)*var2[4] - 0.5*(1.142857*t2083*t4792 + 1.142857*t1988*t4946 + t6978 + t6992 + t7125 + t7130 + t7157 + t7160)*var2[5]);
  p_output1[11]=var2[2]*(-0.5*(1.142857*t1509*t5241 + 1.142857*t1486*t5302 + t6537 + t6621)*var2[2] - 0.5*(1.142857*t2024*t5241 + 1.142857*t1623*t5302 + 1.142857*t2083*t5432 + 1.142857*t1988*t5472 + t6822 + t6837 + t6865 + t6866)*var2[3] - 0.5*(1.142857*t2083*t5781 + 1.142857*t1988*t5827 + t6978 + t6992 + t7125 + t7157 + t7263 + t7265)*var2[4] - 0.5*(1.142857*t2083*t5898 + 1.142857*t1988*t5952 + t6978 + t6992 + t7130 + t7160 + t7263 + t7265)*var2[5]);
  p_output1[12]=t2273 + t2858 + t3083 - 1.*t1578*var2[2];
  p_output1[13]=t3563;
  p_output1[14]=t4322;
  p_output1[15]=-0.5*t3076*var2[2];
  p_output1[16]=var2[2]*(-0.5*(2.285714*Power(t1938,2) + 2.285714*Power(t2164,2) + 2.285714*t1285*t3295 + 2.285714*t1569*t3440)*var2[3] - 0.5*t7452*var2[4] - 0.5*(2.285714*t2164*t3043 + 2.285714*t1938*t3069 + 2.285714*t1569*t4173 + 2.285714*t1285*t4271)*var2[5]);
  p_output1[17]=var2[2]*(-0.5*t7452*var2[3] - 0.5*(2.285714*Power(t2538,2) + 2.285714*Power(t2782,2) + 2.285714*t1285*t4605 + 2.285714*t1569*t4690)*var2[4] - 0.5*(2.285714*t2538*t3043 + 2.285714*t2782*t3069 + 2.285714*t1569*t4792 + 2.285714*t1285*t4946)*var2[5]);
  p_output1[18]=var2[2]*(-0.5*(2.285714*t2164*t5241 + 2.285714*t1938*t5302 + 2.285714*t1569*t5432 + 2.285714*t1285*t5472)*var2[3] - 0.5*(2.285714*t2538*t5241 + 2.285714*t2782*t5302 + 2.285714*t1569*t5781 + 2.285714*t1285*t5827)*var2[4] - 0.5*(2.285714*t3043*t5241 + 2.285714*t3069*t5302 + 2.285714*t1569*t5898 + 2.285714*t1285*t5952)*var2[5]);
  p_output1[19]=-0.5*t8270*var2[3] - 0.5*t8308*var2[4] - 0.5*t8590*var2[5];
  p_output1[20]=-0.5*t8270*var2[2];
  p_output1[21]=-0.5*t8308*var2[2];
  p_output1[22]=-0.5*t8590*var2[2];
  p_output1[23]=var2[2]*(-0.5*(1.142857*t3295*t8681 + 1.142857*t3440*t8709)*var2[3] - 0.5*t8768*var2[4] - 0.5*(1.142857*t4271*t8681 + 1.142857*t4173*t8709 + 1.142857*t1938*t8775 + 1.142857*t2164*t8793)*var2[5]);
  p_output1[24]=var2[2]*(-0.5*t8768*var2[3] - 0.5*(1.142857*t4605*t8681 + 1.142857*t4690*t8709 + 2.285714*t2782*t8748 + 2.285714*t2538*t8762 + 1.142857*t1285*(-2.*t2445*t2596 - 2.*t2304*t816 - 1.*t4470*t816 + t8756 + t8829 + t8835 - 1.*t2445*t917) + 1.142857*t1569*(t1357*t2445 + 2.*t2445*t816 + t8847 + t8854 + t8856 + 2.*t2304*t917 + t4470*t917))*var2[4] - 0.5*(1.142857*t4946*t8681 + 1.142857*t4792*t8709 + 1.142857*t3069*t8748 + 1.142857*t3043*t8762 + 1.142857*t2782*t8775 + 1.142857*t2538*t8793 + 1.142857*t1285*(t8756 + t8829 + t8835 + t8875 + t8877 + t8878 + t8881 + t8889 + t8890) + 1.142857*t1569*(t8847 + t8854 + t8856 + t8896 + t8897 + t8898 + t8903 + t8904 + t8907))*var2[5]);
  p_output1[25]=var2[2]*(-0.5*(1.142857*t5472*t8681 + 1.142857*t5432*t8709 + 1.142857*t1938*t8925 + 1.142857*t2164*t8929)*var2[3] - 0.5*(1.142857*t5827*t8681 + 1.142857*t5781*t8709 + 1.142857*t5302*t8748 + 1.142857*t5241*t8762 + 1.142857*t2782*t8925 + 1.142857*t2538*t8929 + 1.142857*t1285*(-1.*t5582*t816 + t8756 + t8829 + t8835 + t8875 + t8889 + t8941 + t8947 - 1.*t5089*t917) + 1.142857*t1569*(t1357*t5089 + t8847 + t8854 + t8856 + t8896 + t8897 + t8954 + t8958 + t5582*t917))*var2[4] - 0.5*(1.142857*t5952*t8681 + 1.142857*t5898*t8709 + 1.142857*t5302*t8775 + 1.142857*t5241*t8793 + 1.142857*t3069*t8925 + 1.142857*t3043*t8929 + 1.142857*t1285*(t8756 + t8829 + t8835 + t8877 + t8878 + t8881 + t8890 + t8941 + t8947) + 1.142857*t1569*(t8847 + t8854 + t8856 + t8898 + t8903 + t8904 + t8907 + t8954 + t8958))*var2[5]);
  p_output1[26]=-0.5*t8999*var2[3] - 0.5*t9010*var2[4] - 0.5*t9019*var2[5];
  p_output1[27]=-0.5*t8999*var2[2];
  p_output1[28]=-0.5*t9010*var2[2];
  p_output1[29]=-0.5*t9019*var2[2];
  p_output1[30]=var2[2]*(-0.5*(1.142857*t3295*t9032 + 1.142857*t3440*t9043)*var2[3] - 0.5*t9049*var2[4] - 0.5*(1.142857*t4271*t9032 + 1.142857*t1938*t9043 + 1.142857*t4173*t9043 + 1.142857*t2164*t9060)*var2[5]);
  p_output1[31]=var2[2]*(-0.5*t9049*var2[3] - 0.5*(1.142857*t4605*t9032 + 1.142857*t4690*t9043)*var2[4] - 0.5*(1.142857*t4946*t9032 + 1.142857*t2782*t9043 + 1.142857*t4792*t9043 + 1.142857*t2538*t9060)*var2[5]);
  p_output1[32]=var2[2]*(-0.5*(1.142857*t5472*t9032 + 1.142857*t5432*t9043 + 1.142857*t1938*t9088 + 1.142857*t2164*t9094)*var2[3] - 0.5*(1.142857*t5827*t9032 + 1.142857*t5781*t9043 + 1.142857*t2782*t9088 + 1.142857*t2538*t9094)*var2[4] - 0.5*(1.142857*t1569*(-0.9063*t283 - 0.12*t283*t485 - 1.*t283*t491 - 1.*t485*t4985) + 1.142857*t5952*t9032 + 1.142857*t5302*t9043 + 1.142857*t5898*t9043 + 1.142857*t5241*t9060 + 1.142857*t3069*t9088 + 1.142857*t1285*t9094 + 1.142857*t3043*t9094)*var2[5]);
  p_output1[33]=-0.5*t9137*var2[3] - 0.5*t9141*var2[4] - 0.5*t9147*var2[5];
  p_output1[34]=-0.5*t9137*var2[2];
  p_output1[35]=-0.5*t9141*var2[2];
  p_output1[36]=-0.5*t9147*var2[2];
  p_output1[37]=var2[2]*(0.03428571*t3295*var2[3] + 0.03428571*t4047*var2[4] + 0.03428571*t4271*var2[5]);
  p_output1[38]=var2[2]*(0.03428571*t4047*var2[3] + 0.03428571*t4605*var2[4] + 0.03428571*t4946*var2[5]);
  p_output1[39]=var2[2]*(0.03428571*t5472*var2[3] + 0.03428571*t5827*var2[4] + 0.03428571*t5952*var2[5]);
  p_output1[40]=0.03428571*t1938*var2[3] + 0.03428571*t2782*var2[4] + 0.03428571*t3069*var2[5];
  p_output1[41]=0.03428571*t1938*var2[2];
  p_output1[42]=0.03428571*t2782*var2[2];
  p_output1[43]=0.03428571*t3069*var2[2];
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 9 && ncols == 1) && 
      !(mrows == 1 && ncols == 9))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 9 && ncols == 1) && 
      !(mrows == 1 && ncols == 9))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 44, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_Ce1_vec_L4_J3_amber3_feet.hh"

namespace RightSS1
{

void J_Ce1_vec_L4_J3_amber3_feet_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
